{
    "version": "https://jsonfeed.org/version/1",
    "title": "DXZ",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/04/27/hello-world%20-%20%E5%89%AF%E6%9C%AC/",
            "url": "http://example.com/2021/04/27/hello-world%20-%20%E5%89%AF%E6%9C%AC/",
            "title": "产品经理常用术语",
            "date_published": "2021-04-27T12:35:43.571Z",
            "content_html": "<h2 id=\"brdbusiness-requirements-document-商业需求文档\"><a class=\"markdownIt-Anchor\" href=\"#brdbusiness-requirements-document-商业需求文档\">#</a> BRD：Business Requirements Document (商业需求文档)</h2>\n<p>是基于商业目标或价值所描述的产品需求内容文档（报告）。其核心的用途就是用于产品在投入研发之前，由企业高层作为决策评估的重要依据。其内容涉及市场分析，销售策略，盈利预测等，通常是供决策层们讨论的演示文档，一般比较短小精炼，没有产品细节。<br>\n针对人群：一般都是针对老版或 CEO 或者项目总负责人</p>\n<h2 id=\"mrdmarket-requirements-document-市场需求文档\"><a class=\"markdownIt-Anchor\" href=\"#mrdmarket-requirements-document-市场需求文档\">#</a> MRD：Market Requirements Document (市场需求文档)</h2>\n<p>该文档在产品项目过程中属于 “过程性” 文档。是市场部门的产品经理或者市场经理编写的一个产品的说明需求的文档。该文档在产品项目过程中属于 “过程性” 文档。该文档是产品项目由 “准备” 阶段进入到 “实施” 阶段的第一文档，其作用就是 “对年度产品中规划的某个产品进行市场层面的说明”，这个文档的质量好坏直接影响到产品项目的开展，并直接影响到公司产品战略意图的实现。该文档在产品项目中是一个 “承上启下” 的作用，“向上” 是对不断积累的市场数据的一种整合和记录，“向下” 是对后续工作的方向说明和工作指导。<br>\n针对人群：一般都是商务、运营、市场人员</p>\n<h2 id=\"prdproduct-requirements-document-产品需求文档\"><a class=\"markdownIt-Anchor\" href=\"#prdproduct-requirements-document-产品需求文档\">#</a> PRD：Product Requirements Document (产品需求文档)</h2>\n<p>该文档是产品项目由 “概念化” 阶段进入到 “图纸化” 阶段的最主要的一个文档，其作用就是 “对 MRD 中的内容进行指标化和技术化”，这个文档的质量好坏直接影响到研发部门是否能够明确产品的功能和性能。<br>\n针对人群：一般都是项目组、开发组、测试组、策划组、体验组人员</p>\n<h2 id=\"fsdfunctional-specifications-document-功能详细说明文档\"><a class=\"markdownIt-Anchor\" href=\"#fsdfunctional-specifications-document-功能详细说明文档\">#</a> FSD：Functional Specifications Document (功能详细说明文档)</h2>\n<p>功能详细说明。有一点像 “概要设计”，在 BRD、MRD 和 PRD 的基础上，这步就开始往开发衔接了，产品 UI、业务逻辑的细节都要确定，细化文档并保持更新。相应的，有很多内容，比如表结构设计，要由项目经理来编写了。</p>\n<h2 id=\"c2cconsumer-to-consumer顾客对顾客\"><a class=\"markdownIt-Anchor\" href=\"#c2cconsumer-to-consumer顾客对顾客\">#</a> C2C：Consumer to Consumer (顾客对顾客)</h2>\n<p>消费者个人间的电子商务行为。比如一个消费者有一台电脑，通过网络进行交易，把它出售给另外一个消费者，此种交易类型就称为 C2C 电子商务。<br>\n例如：淘宝网 拍拍网 易趣网</p>\n<h2 id=\"b2bbusiness-to-business商家对商家-模式垂直综合自建关联\"><a class=\"markdownIt-Anchor\" href=\"#b2bbusiness-to-business商家对商家-模式垂直综合自建关联\">#</a> B2B：Business to Business (商家对商家) 模式：垂直，综合，自建，关联</h2>\n<p>指企业与企业之间通过专用网络或 Internet，进行数据信息的交换、传递，开展交易活动的商业模式。它将企业内部网和企业的产品及服务，通过 B2B 网站或移动客户端与客户紧密结合起来，通过网络的快速反应，为客户提供更好的服务，从而促进企业的业务发展。</p>\n<h2 id=\"o2oonline-to-offline线上线下电子商务\"><a class=\"markdownIt-Anchor\" href=\"#o2oonline-to-offline线上线下电子商务\">#</a> O2O：Online to Offline (线上线下电子商务)</h2>\n<p>将线下的商务机会与互联网结合，让互联网成为线下交易的平台，这个概念最早来源于美国。O2O 的概念非常广泛，既可涉及到线上，又可涉及到线下，可以通称为 O2O。主流商业管理课程均对 O2O 这种新型的商业模式有所介绍及关注。<br>\n例如：百度 阿里 腾讯</p>\n<h2 id=\"p2pperson-to-person-个人对个人\"><a class=\"markdownIt-Anchor\" href=\"#p2pperson-to-person-个人对个人\">#</a> P2P：person to person （个人对个人）</h2>\n<p>P2P 金融指个人与个人间的小额借贷交易，一般需要借助电子商务专业网络平台帮助借贷双方确立借贷关系并完成相关交易手续。借款者可自行发布借款信息，包括金额、利息、还款方式和时间，实现自助式借款；借出者根据借款人发布的信息，自行决定借出金额，实现自助式借贷<br>\n例：人人贷</p>\n<h2 id=\"b2cbusiness-to-consumer商家对个人\"><a class=\"markdownIt-Anchor\" href=\"#b2cbusiness-to-consumer商家对个人\">#</a> B2C：Business to Consumer (商家对个人)</h2>\n<p>“商对客” 是电子商务的一种模式，也就是通常说的直接面向消费者销售产品和服务商业零售模式。<br>\n企业例如：阿里巴巴</p>\n<h2 id=\"ucduser-centered-design以用户为中心的设计\"><a class=\"markdownIt-Anchor\" href=\"#ucduser-centered-design以用户为中心的设计\">#</a> UCD：User Centered Design (以用户为中心的设计)</h2>\n<p>在进行产品设计、开发、维护时从用户的需求和用户的感受出发，围绕用户为中心进行产品设计、开发及维护，而不是让用户去适应产品。无论产品的使用流程、产品的信息架构、人机交互方式等，以 UCD 为核心的设计都时刻高度关注并考虑用户的使用习惯、预期的交互方式、视觉感受等方面。</p>\n<h2 id=\"uxuser-experience-design用户体验\"><a class=\"markdownIt-Anchor\" href=\"#uxuser-experience-design用户体验\">#</a> UX：User Experience Design (用户体验)</h2>\n<p>UX 设计指以用户体验为中心的设计。UX 设计师研究和评估一个系统的用户体验，关注与该系统的易用性，价值体现，实用性，高效性等。</p>\n<h2 id=\"uiuser-interface用户界面\"><a class=\"markdownIt-Anchor\" href=\"#uiuser-interface用户界面\">#</a> UI：User Interface (用户界面)</h2>\n<p>泛指用户的操作界面，包含移动 APP，网页，智能穿戴设备等。<br>\nUI 设计主要指界面的样式，美观程度。而使用上，对软件的人机交互、操作逻辑、界面美观的整体设计则是同样重要的另一个门道。</p>\n<h2 id=\"ugcuser-generated-content用户原创内容\"><a class=\"markdownIt-Anchor\" href=\"#ugcuser-generated-content用户原创内容\">#</a> UGC：User Generated Content (用户原创内容)</h2>\n<p>它并不是某一种具体的业务，而是一种用户使用互联网的新方式，即由原来的以下载为主变成下载和上传并重。<br>\n例如：豆瓣网 优酷土豆 WIKI</p>\n<h2 id=\"clicommand-line-interface命令行界面\"><a class=\"markdownIt-Anchor\" href=\"#clicommand-line-interface命令行界面\">#</a> CLI：Command-line Interface (命令行界面)</h2>\n<p>是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。<br>\n（LINUX 的命令行界面就是典型的 CLI）。</p>\n<h2 id=\"guigraphical-user-interface图形用户界面\"><a class=\"markdownIt-Anchor\" href=\"#guigraphical-user-interface图形用户界面\">#</a> GUI：Graphical User Interface (图形用户界面)</h2>\n<p>采用图形方式显示的计算机操作用户界面。<br>\n与早期计算机使用的命令行界面相比，图形界面对于用户来说在视觉上更易于接受。然而这界面若要通过在显示屏的特定位置，以” 各种美观而不单调的视觉消息 “提示用户” 状态的改变 “，势必得比简单的消息呈现花上更多的计算能力。</p>\n<h2 id=\"nuinatural-user-interface自然用户界面\"><a class=\"markdownIt-Anchor\" href=\"#nuinatural-user-interface自然用户界面\">#</a> NUI：Natural User Interface (自然用户界面)</h2>\n<p>一种更加简单、更加直观、更加自然的程序–Project Natal 。</p>\n<h2 id=\"ueduser-experience-design用户体验设计师\"><a class=\"markdownIt-Anchor\" href=\"#ueduser-experience-design用户体验设计师\">#</a> UED：User Experience Design (用户体验设计师)</h2>\n<p>UED 是进行产品策划的主力之一，他们用自己的知识、经验、设计能力拿出设计方案。UED 不只是互联网专家，还是行业专家。能够用自己的互联网知识来设计出行业专家想实现的操作，而付诸以商业营销。</p>\n<h2 id=\"seosearch-engine-optimization搜索引擎优化\"><a class=\"markdownIt-Anchor\" href=\"#seosearch-engine-optimization搜索引擎优化\">#</a> SEO：Search Engine Optimization (搜索引擎优化)</h2>\n<p>SEO 是指通过对网站进行站内优化和修复 (网站 Web 结构调整、网站内容建设、网站代码优化和编码等) 和站外优化，从而提高网站的网站关键词排名以及公司产品的曝光度。<br>\n（SEO 这个大家可以去唐杰的个人博客站看。他应该是 90 后这一代中最早接触互联网的，也是 90 后从事这个行业的第一批人。而他在转产品时就是学习的 SEO。他的博客里面也有很多关于产品的。我感觉受益良多，大家有想的可以去看看。互联网产品经理 @唐杰）</p>\n<h2 id=\"长尾理论-网络时代兴起的一种新理论由于成本和效率的因素当商品储存流通展示的场地和渠道足够宽广商品生产成本急剧下降以至于个人都可以进行生产并且商品的销售成本急剧降低时几乎任何以前看似需求极低的产品只要有卖都会有人买-这些需求和销量不高的产品所占据的共同市场份额可以和主流产品的市场份额相比甚至更大\"><a class=\"markdownIt-Anchor\" href=\"#长尾理论-网络时代兴起的一种新理论由于成本和效率的因素当商品储存流通展示的场地和渠道足够宽广商品生产成本急剧下降以至于个人都可以进行生产并且商品的销售成本急剧降低时几乎任何以前看似需求极低的产品只要有卖都会有人买-这些需求和销量不高的产品所占据的共同市场份额可以和主流产品的市场份额相比甚至更大\">#</a> 长尾理论：网络时代兴起的一种新理论，由于成本和效率的因素，当商品储存流通展示的场地和渠道足够宽广，商品生产成本急剧下降以至于个人都可以进行生产，并且商品的销售成本急剧降低时，几乎任何以前看似需求极低的产品，只要有卖，都会有人买。这些需求和销量不高的产品所占据的共同市场份额，可以和主流产品的市场份额相比，甚至更大。</h2>\n<h2 id=\"长尾效应头head和尾tail是两个统计学名词-正态曲线中间的突起部分叫头两边相对平缓的部分叫尾-从人们需求的角度来看大多数的需求会集中在头部而这部分我们可以称之为流行而分布在尾部的需求是个性化的零散的小量的需求-而这部分差异化的-少量的需求会在需求曲线上面形成一条长长的尾巴而所谓长尾效应就在于它的数量上将所有非流行的市场累加起来就会形成一个比流行市场还大的市场\"><a class=\"markdownIt-Anchor\" href=\"#长尾效应头head和尾tail是两个统计学名词-正态曲线中间的突起部分叫头两边相对平缓的部分叫尾-从人们需求的角度来看大多数的需求会集中在头部而这部分我们可以称之为流行而分布在尾部的需求是个性化的零散的小量的需求-而这部分差异化的-少量的需求会在需求曲线上面形成一条长长的尾巴而所谓长尾效应就在于它的数量上将所有非流行的市场累加起来就会形成一个比流行市场还大的市场\">#</a> 长尾效应，“头”（head）和 “尾”（tail）是两个统计学名词。正态曲线中间的突起部分叫 “头”；两边相对平缓的部分叫 “尾”。从人们需求的角度来看，大多数的需求会集中在头部，而这部分我们可以称之为流行，而分布在尾部的需求是个性化的，零散的小量的需求。而这部分差异化的、少量的需求会在需求曲线上面形成一条长长的 “尾巴”，而所谓长尾效应就在于它的数量上，将所有非流行的市场累加起来就会形成一个比流行市场还大的市场。</h2>\n<h2 id=\"马太效应matthew-effect指强者愈强-弱者愈弱-好的愈好坏的愈坏多的愈多少的愈少的现象\"><a class=\"markdownIt-Anchor\" href=\"#马太效应matthew-effect指强者愈强-弱者愈弱-好的愈好坏的愈坏多的愈多少的愈少的现象\">#</a> 马太效应：（Matthew Effect），指强者愈强、弱者愈弱、好的愈好，坏的愈坏，多的愈多，少的愈少的现象</h2>\n<h2 id=\"羊群效应也称从众效应指人们经常受到多数人影响从而跟从大众的思想或行为也被称为从众效应-人们会追随大众所同意的将自己的意见默认否定且不会主观上思考事件的意义-羊群效应是诉诸群众谬误的基础\"><a class=\"markdownIt-Anchor\" href=\"#羊群效应也称从众效应指人们经常受到多数人影响从而跟从大众的思想或行为也被称为从众效应-人们会追随大众所同意的将自己的意见默认否定且不会主观上思考事件的意义-羊群效应是诉诸群众谬误的基础\">#</a> 羊群效应：也称从众效应，指人们经常受到多数人影响，从而跟从大众的思想或行为，也被称为 “从众效应”。人们会追随大众所同意的，将自己的意见默认否定，且不会主观上思考事件的意义。羊群效应是诉诸群众谬误的基础。</h2>\n<h2 id=\"霍桑效应指那些意识到自己正在被别人观察的个人具有改变自己行为的倾向\"><a class=\"markdownIt-Anchor\" href=\"#霍桑效应指那些意识到自己正在被别人观察的个人具有改变自己行为的倾向\">#</a> 霍桑效应：指那些意识到自己正在被别人观察的个人具有改变自己行为的倾向。</h2>\n<h2 id=\"tmt数字新媒体或叫tmttechnologymediatelecom产业-tmt是电信-媒体和科技三个英文单词的缩写的第一个字头整合在一起实际是未来电信-媒体科技互联网包括信息技术这样一个融合趋势所产生的大的背景这就是tmt产业\"><a class=\"markdownIt-Anchor\" href=\"#tmt数字新媒体或叫tmttechnologymediatelecom产业-tmt是电信-媒体和科技三个英文单词的缩写的第一个字头整合在一起实际是未来电信-媒体科技互联网包括信息技术这样一个融合趋势所产生的大的背景这就是tmt产业\">#</a> TMT：数字新媒体，或叫 TMT（Technology，Media，Telecom）产业。TMT 是电信、媒体和科技三个英文单词的缩写的第一个字头，整合在一起，实际是未来电信、媒体科技 (互联网), 包括信息技术这样一个融合趋势所产生的大的背景，这就是 TMT 产业。</h2>\n<h2 id=\"pdca这是一种用于持续改进产品的框架计划plan执行do检查check处理act在初期确定发展目标和达到发展目标所需的关键任务然后按照计划执行并不断检查计划的执行情况并给予及时的处理意见\"><a class=\"markdownIt-Anchor\" href=\"#pdca这是一种用于持续改进产品的框架计划plan执行do检查check处理act在初期确定发展目标和达到发展目标所需的关键任务然后按照计划执行并不断检查计划的执行情况并给予及时的处理意见\">#</a> PDCA：这是一种用于持续改进产品的框架，计划 (Plan)+ 执行 (Do)+ 检查 (Check)+ 处理 (Act)，在初期确定发展目标和达到发展目标所需的关键任务，然后按照计划执行，并不断检查计划的执行情况，并给予及时的处理意见。</h2>\n<h2 id=\"用户任务的闭环指的是一系列帮助用户完成任务的环节这些环节可以应对任务可能出现的各种情况\"><a class=\"markdownIt-Anchor\" href=\"#用户任务的闭环指的是一系列帮助用户完成任务的环节这些环节可以应对任务可能出现的各种情况\">#</a> 用户任务的闭环：指的是一系列帮助用户完成任务的环节，这些环节可以应对任务可能出现的各种情况。</h2>\n<h2 id=\"mvp是指的minimum-viable-product最小可行产品即用最低的成本实现一个尽可能展示核心概念的产品产品团队可以通过它收集到尽可能多的用户反馈和数据从而评估这个产品能带来的效益\"><a class=\"markdownIt-Anchor\" href=\"#mvp是指的minimum-viable-product最小可行产品即用最低的成本实现一个尽可能展示核心概念的产品产品团队可以通过它收集到尽可能多的用户反馈和数据从而评估这个产品能带来的效益\">#</a> MVP：是指的 Minimum Viable Product，最小可行产品，即用最低的成本实现一个尽可能展示核心概念的产品，产品团队可以通过它收集到尽可能多的用户反馈和数据，从而评估这个产品能带来的效益。</h2>\n<h2 id=\"crud创建create-检索retrieve-更新update-删除delete有时候也简称增删改这是面向对象设计中最常用的4个基本方法-说来这是数据库里的必备的知识但作为互联网公司的产品经理这也是经常会提起的功能点\"><a class=\"markdownIt-Anchor\" href=\"#crud创建create-检索retrieve-更新update-删除delete有时候也简称增删改这是面向对象设计中最常用的4个基本方法-说来这是数据库里的必备的知识但作为互联网公司的产品经理这也是经常会提起的功能点\">#</a> CRUD：创建 (Create)、检索 (Retrieve)、更新 (Update)、删除 (Delete)，有时候也简称 “增删改” 这是面向对象设计中最常用的 4 个基本方法。说来这是数据库里的必备的知识，但作为互联网公司的产品经理，这也是经常会提起的功能点。</h2>\n<h2 id=\"现金牛产品是指利润率超高的产品并且利润占公司总利润的很大比例比如魔兽世界一度占据九城90的收入曾经是九城最重要的现金牛-有一些平台产品本身就是最大的现金牛产品比如百度的搜索既是平台又是现金牛\"><a class=\"markdownIt-Anchor\" href=\"#现金牛产品是指利润率超高的产品并且利润占公司总利润的很大比例比如魔兽世界一度占据九城90的收入曾经是九城最重要的现金牛-有一些平台产品本身就是最大的现金牛产品比如百度的搜索既是平台又是现金牛\">#</a> 现金牛产品：是指利润率超高的产品，并且利润占公司总利润的很大比例，比如魔兽世界，一度占据九城 90% 的收入，曾经是九城最重要的现金牛。有一些平台产品本身就是最大的现金牛产品，比如百度的搜索，既是平台又是现金牛。</h2>\n<h2 id=\"平台产品就是能通过自身的资源优势拉动其他产品的产品-平台产品具有强大的生命力和拉动能力如果成功往往是一家公司的基石-例如qq-百度-google-微软等\"><a class=\"markdownIt-Anchor\" href=\"#平台产品就是能通过自身的资源优势拉动其他产品的产品-平台产品具有强大的生命力和拉动能力如果成功往往是一家公司的基石-例如qq-百度-google-微软等\">#</a> 平台产品：就是能通过自身的资源优势拉动其他产品的产品。平台产品具有强大的生命力和拉动能力，如果成功，往往是一家公司的基石。例如 QQ、百度、Google、微软等。</h2>\n<h2 id=\"arpu-average-revenue-per-user即每用户平均收入用于衡量电信运营商和互联网公司业务收入的指标\"><a class=\"markdownIt-Anchor\" href=\"#arpu-average-revenue-per-user即每用户平均收入用于衡量电信运营商和互联网公司业务收入的指标\">#</a> ARPU : (Average Revenue Per User) 即每用户平均收入，用于衡量电信运营商和互联网公司业务收入的指标。</h2>\n<h2 id=\"cpc-网络中最常见的一种广告形式它是英文单词cost-per-click的缩写意思就是每次点击付费广告\"><a class=\"markdownIt-Anchor\" href=\"#cpc-网络中最常见的一种广告形式它是英文单词cost-per-click的缩写意思就是每次点击付费广告\">#</a> CPC : 网络中最常见的一种广告形式，它是英文单词 Cost Per Click 的缩写意思就是每次点击付费广告</h2>\n<h2 id=\"spam互联网上到处散布垃圾广告消息的现象-在搜索引擎上的spam通常也称为作弊-搜索引擎营销中所说的spam是专门针对那些欺骗搜索引擎的信息-搜索引擎垃圾技术是利用不道德的技巧去提高自己搜索引擎上的排名-不诚实的网站管理员就是利用这样的手段去欺骗搜索引擎从而获得较高的排名\"><a class=\"markdownIt-Anchor\" href=\"#spam互联网上到处散布垃圾广告消息的现象-在搜索引擎上的spam通常也称为作弊-搜索引擎营销中所说的spam是专门针对那些欺骗搜索引擎的信息-搜索引擎垃圾技术是利用不道德的技巧去提高自己搜索引擎上的排名-不诚实的网站管理员就是利用这样的手段去欺骗搜索引擎从而获得较高的排名\">#</a> SPAM：互联网上到处散布垃圾广告消息的现象。在搜索引擎上的 Spam 通常也称为作弊。搜索引擎营销中所说的 SPAM 是专门针对那些欺骗搜索引擎的信息。搜索引擎垃圾技术是利用不道德的技巧去提高自己搜索引擎上的排名。不诚实的网站管理员就是利用这样的手段去欺骗搜索引擎从而获得较高的排名。</h2>\n<h2 id=\"病毒式营销源于英文词汇viralmarketing-常用于进行网站推广-品牌推广等-利用的是用户口碑传播的原理在互联网上这种口碑传播更为方便可以像病毒一样迅速蔓延因此病毒性营销成为一种高效的信息传播方式而且由于这种传播是用户之间自发进行的因此几乎是不需要费用的网络营销手段\"><a class=\"markdownIt-Anchor\" href=\"#病毒式营销源于英文词汇viralmarketing-常用于进行网站推广-品牌推广等-利用的是用户口碑传播的原理在互联网上这种口碑传播更为方便可以像病毒一样迅速蔓延因此病毒性营销成为一种高效的信息传播方式而且由于这种传播是用户之间自发进行的因此几乎是不需要费用的网络营销手段\">#</a> 病毒式营销：源于英文词汇 viralmarketing。常用于进行网站推广、品牌推广等。利用的是用户口碑传播的原理，在互联网上，这种 “口碑传播” 更为方便，可以像病毒一样迅速蔓延，因此病毒性营销成为一种高效的信息传播方式，而且，由于这种传播是用户之间自发进行的，因此几乎是不需要费用的网络营销手段。</h2>\n<h2 id=\"snssocial-networking-services社会性网络服务\"><a class=\"markdownIt-Anchor\" href=\"#snssocial-networking-services社会性网络服务\">#</a> SNS：Social Networking Services (社会性网络服务)</h2>\n<p>指社交网络服务，包括了社交软件和社交网站。也指社交现有已成熟普及的信息载体，如短信 SMS 服务。SNS 的另一种常用解释：全称 Social Networking Site，即 “社交网站” 或 “社交网”。SNS 也指 Social Network Software，社交网络软件，是一个采用分布式技术，通俗地说是采用 P2P（Peer to Peer）技术，构建的下一代基于个人的网络基础软件。</p>\n<h2 id=\"kpikey-performance-indicator关键绩效指标\"><a class=\"markdownIt-Anchor\" href=\"#kpikey-performance-indicator关键绩效指标\">#</a> KPI：Key Performance Indicator (关键绩效指标)</h2>\n<p>通过对组织内部流程的输入端、输出端的关键参数进行设置、取样、计算、分析，衡量流程绩效的一种目标式量化管理指标，是把企业的战略目标分解为可操作的工作目标的工具，是企业绩效管理的基础。KPI 可以使部门主管明确部门的主要责任，并以此为基础，明确部门人员的业绩衡量指标。建立明确的切实可行的 KPI 体系，是做好绩效管理的关键。关键绩效指标是用于衡量工作人员工作绩效表现的量化指标，是绩效计划的重要组成部分。</p>\n<h2 id=\"iminstant-messaging即时通信\"><a class=\"markdownIt-Anchor\" href=\"#iminstant-messaging即时通信\">#</a> IM：Instant Messaging (即时通信)</h2>\n<p>目前 Internet 上最为流行的通讯方式，各种各样的即时通讯软件也层出不穷；服务提供商也提供了越来越丰富的通讯服务功能。 不容置疑，Internet 已经成为真正的信息高速公路。从实际工程应用角度出发，以计算机网络原理为指导，结合当前网络中的一些常用技术，编程实现基于 C/S 架构的网络聊天工具是切实可行的。</p>\n<h2 id=\"一个实时通信系统允许两人或多人使用网络实时的传递文字消息-文件-语音与视频交流-例如信鸽-视高科技的视高可视协同办公平台-263em-群英cc2010-通软联合的gocom-腾讯公司的rtx-ibm的lotus-sametime-点击科技的gke-中国互联网办公室的imo-中国移动的企业飞信-华夏易联的e-link-擎旗的ucstar等\"><a class=\"markdownIt-Anchor\" href=\"#一个实时通信系统允许两人或多人使用网络实时的传递文字消息-文件-语音与视频交流-例如信鸽-视高科技的视高可视协同办公平台-263em-群英cc2010-通软联合的gocom-腾讯公司的rtx-ibm的lotus-sametime-点击科技的gke-中国互联网办公室的imo-中国移动的企业飞信-华夏易联的e-link-擎旗的ucstar等\">#</a> 一个实时通信系统，允许两人或多人使用网络实时的传递文字消息、文件、语音与视频交流。 例如：信鸽、视高科技的视高可视协同办公平台、263EM、群英 CC2010、通软联合的 GoCom、腾讯公司的 RTX、IBM 的 Lotus Sametime、点击科技的 GKE、中国互联网办公室的 imo、中国移动的企业飞信、华夏易联的 e-Link、擎旗的 UcStar 等</h2>\n<h2 id=\"jdjob-descriptions职位描述-职位界定\"><a class=\"markdownIt-Anchor\" href=\"#jdjob-descriptions职位描述-职位界定\">#</a> JD：Job Descriptions (职位描述、职位界定)</h2>\n<p>对经过职位分析得到的关于某一特定职位的职责和工作内容进行的一种书面记录其成果叫工作说明书 (job description)，日文中工作描述就是给工作画像，是把工作所具有的一些特征用白描的手法写下来。<br>\n它主要包括八项具体内容信息：<br>\n职务基本信息，职务目的，管理权限，工作关系，责任范围与影响程度，工作业绩衡量标准，任职的基本要求和高绩效的要求，薪资收入标准与变化的条件与要求等。</p>\n<h2 id=\"lbslocation-based-service基于位置的服务\"><a class=\"markdownIt-Anchor\" href=\"#lbslocation-based-service基于位置的服务\">#</a> LBS：Location Based Service (基于位置的服务)</h2>\n<p>是指通过电信移动运营商的无线电通讯网络或外部定位方式，获取移动终端用户的位置信息，在 GIS 平台的支持下，为用户提供相应服务的一种增值业务<br>\n意指与定位相关的各类服务系统，简称” 定位服务”。</p>\n<h2 id=\"pvpage-view页面浏览量\"><a class=\"markdownIt-Anchor\" href=\"#pvpage-view页面浏览量\">#</a> PV：page view (页面浏览量)</h2>\n<p>通常是衡量一个网络新闻频道或网站甚至一条网络新闻的主要指标。网页浏览数是评价网站流量最常用的指标之一，简称为 PV。监测网站 PV 的变化趋势和分析其变化原因是很多站长定期要做的工作。 Page Views 中的 Page 一般是指普通的 html 网页，也包含 php、jsp 等动态产生的 html 内容。来自浏览器的一次 html 内容请求会被看作一个 PV，逐渐累计成为 PV 总数。</p>\n<h2 id=\"uvunique-visitor网站独立访客\"><a class=\"markdownIt-Anchor\" href=\"#uvunique-visitor网站独立访客\">#</a> UV：unique visitor (网站独立访客)</h2>\n<p>指通过互联网访问、浏览这个网页的自然人。<br>\n对于使用真实 IP 上网的用户，UV 和 IP 的数值是相同的<br>\n IP 是一个反映网络虚拟地址对象的概念，UV 是一个反映实际使用者的概念，每个 UV 相对于每个 IP，更加准确地对应一个实际的浏览者。使用 UV 作为统计量，可以更加准确的了解单位时间内实际上有多少个访问者来到了相应的页面。</p>\n<h2 id=\"daudaily-active-user日活跃用户量\"><a class=\"markdownIt-Anchor\" href=\"#daudaily-active-user日活跃用户量\">#</a> DAU：Daily Active User (日活跃用户量)</h2>\n<p>常用于反映网站、互联网应用或网络游戏的运营情况。DAU 通常统计一日（统计日）之内，登录或使用了某个产品的用户数（去除重复登录的用户），这与流量统计工具里的访客（UV）概念相似。</p>\n<h2 id=\"rssreally-simple-syndication简易信息聚合\"><a class=\"markdownIt-Anchor\" href=\"#rssreally-simple-syndication简易信息聚合\">#</a> RSS：Really Simple Syndication (简易信息聚合)</h2>\n<p>一种 RSS 基于 XML 标准，在互联网上被广泛采用的内容包装和投递协议。RSS (Really Simple Syndication) 是一种描述和同步网站内容的格式，是使用最广泛的 XML 应用。<br>\nRSS 目前广泛用于网上新闻频道。<br>\nSS 和 Atom 是一种信息聚合的技术，都是为了提供一种更为方便、高效的互联网信息的发布和共享，用更少的时间分享更多的信息。</p>\n<h2 id=\"sdksoftware-development-kit软件开发工具包\"><a class=\"markdownIt-Anchor\" href=\"#sdksoftware-development-kit软件开发工具包\">#</a> SDK：Software Development Kit (软件开发工具包)</h2>\n<p>一般都是一些软件工程师为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件时的开发工具的集合。</p>\n<h2 id=\"otaonline-travel-agent在线旅行社\"><a class=\"markdownIt-Anchor\" href=\"#otaonline-travel-agent在线旅行社\">#</a> OTA：Online Travel Agent (在线旅行社)</h2>\n<p>旅游消费者通过网络向旅游服务提供商预定旅游产品或服务，并通过网上支付或者线下付费，即各旅游主体可以通过网络进行产品营销或产品销售</p>\n<h2 id=\"vpvice-president-副总裁\"><a class=\"markdownIt-Anchor\" href=\"#vpvice-president-副总裁\">#</a> VP：Vice President (副总裁)</h2>\n<p>副总统、副总裁、副总监等职位，泛指所有的高层副级人物。</p>\n<h2 id=\"avpassistant-vice-president-副总裁助理\"><a class=\"markdownIt-Anchor\" href=\"#avpassistant-vice-president-副总裁助理\">#</a> AVP：Assistant Vice President (副总裁助理)</h2>\n<p>副总裁助理，协助加强业务线日常运营管理，协助主管副总裁完成流程优化、绩效管理、质量与风险管理等工作的协调和推进</p>\n<h2 id=\"hrdhuman-resource-director-人力资源总监\"><a class=\"markdownIt-Anchor\" href=\"#hrdhuman-resource-director-人力资源总监\">#</a> HRD：Human Resource Director (人力资源总监)</h2>\n<p>目前很多公司设立了 HRD 的职位，其实说白了就是人力资源总监 / 主管 HRD（Human Resource Director）。</p>\n<h2 id=\"coochief-operating-officer运营总监\"><a class=\"markdownIt-Anchor\" href=\"#coochief-operating-officer运营总监\">#</a> COO：Chief Operating Officer (运营总监)</h2>\n<p>又称首席运营官。该职位要全面负责公司的市场运作和管理；参与公司整体策划，健全公司各项制度，完善公司运营管理；推动公司销售业务，推广公司产品，组织完成公司整体业务计划；建立公司内部信息系统，推进公司财务、行政、人力资源的管理；负责协调各部门工作，建立有效的团队协作机制；维持并开拓各方面的外部关系；管理并激励所属部门的工作绩效。</p>\n<h2 id=\"cmochief-marketing-officer-市场总监\"><a class=\"markdownIt-Anchor\" href=\"#cmochief-marketing-officer-市场总监\">#</a> CMO：Chief Marketing Officer (市场总监)</h2>\n<p>指企业中负责市场运营工作的高级管理人员，又称作市场部经理、营销总监。</p>\n<h2 id=\"pmproduct-manager产品经理-production-manager生产经理-project-manager项目经理\"><a class=\"markdownIt-Anchor\" href=\"#pmproduct-manager产品经理-production-manager生产经理-project-manager项目经理\">#</a> PM：Product Manager (产品经理)、Production Manager (生产经理)、Project Manager (项目经理)</h2>\n<p>项目的管理者，在有限的资源约束下，运用系统的观点、方法和理论，对项目涉及的全部工作进行有效地管理。即从项目的投资决策开始到项目结束的全过程进行计划、组织、指挥、协调、控制和评价，以实现项目的目标。</p>\n<h2 id=\"urluniform-resoure-locator统一资源定位器\"><a class=\"markdownIt-Anchor\" href=\"#urluniform-resoure-locator统一资源定位器\">#</a> URL：Uniform Resoure Locator (统一资源定位器)</h2>\n<p>统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。<br>\n（说白了就是链接、URL 链接）</p>\n<h2 id=\"skustock-keeping-unit库存量单位\"><a class=\"markdownIt-Anchor\" href=\"#skustock-keeping-unit库存量单位\">#</a> SKU：Stock Keeping Unit (库存量单位)</h2>\n<p>即库存进出计量的基本单元，可以是以件，盒，托盘等为单位。<br>\nSKU 这是对于大型连锁超市 DC（配送中心）物流管理的一个必要的方法。现在已经被引申为产品统一编号的简称，每种产品均对应有唯一的 SKU 号。</p>\n<h2 id=\"spustandard-product-unit-标准化产品单元\"><a class=\"markdownIt-Anchor\" href=\"#spustandard-product-unit-标准化产品单元\">#</a> SPU：Standard Product Unit (标准化产品单元)</h2>\n<p>是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。通俗点讲，属性值、特性相同的商品就可以称为一个 SPU。</p>\n<h2 id=\"roireturn-on-investment投资回报率\"><a class=\"markdownIt-Anchor\" href=\"#roireturn-on-investment投资回报率\">#</a> ROI：Return On Investment (投资回报率)</h2>\n<p>通过投资而应返回的价值，即企业从一项投资活动中得到的经济回报。</p>\n<h2 id=\"erpenterprise-resource-planning企业资源计划\"><a class=\"markdownIt-Anchor\" href=\"#erpenterprise-resource-planning企业资源计划\">#</a> ERP：Enterprise Resource Planning (企业资源计划)</h2>\n<p>由美国 Gartner Group 公司于 1990 年提出。企业资源计划是 MRP II（企业制造资源计划）下一代的制造业系统和资源计划软件。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/21/HTML+CSS+JS%20interview%20summary/",
            "url": "http://example.com/2021/01/21/HTML+CSS+JS%20interview%20summary/",
            "title": "HTML+CSS+JS interview summary",
            "date_published": "2021-01-21T13:06:14.508Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcWlpbGVlL3AvNjkxNzk0Mi5odG1s\">https://www.cnblogs.com/qiilee/p/6917942.html</span><br>\n1、 你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么？<br>\nIE: trident 内核<br>\n Firefox：gecko 内核<br>\n Safari:webkit 内核<br>\n Opera: 以前是 presto 内核，Opera 现已改用 Google Chrome 的 Blink 内核<br>\n Chrome:Blink (基于 webkit，Google 与 Opera Software 共同开发)</p>\n<p>2、你能描述一下渐进增强和优雅降级之间的不同吗？<br>\n 渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br>\n优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<p>3、请描述一下 cookies，sessionStorage 和 localStorage 的区别？<br>\nsessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此 sessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储。而 localStorage 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。<br>\nweb storage 和 cookie 的区别<br>\n Web Storage 的概念和 cookie 相似，区别是它是为了更大容量存储设计的。Cookie 的大小是受限的，并且每次你请求一个新的页面的时候 Cookie 都会被发送过去，这样无形中浪费了带宽，另外 cookie 还需要指定作用域，不可以跨域调用。<br>\n除此之外，Web Storage 拥有 setItem,getItem,removeItem,clear 等方法，不像 cookie 需要前端开发者自己封装 setCookie，getCookie。但是 Cookie 也是不可以或缺的：Cookie 的作用是与服务器进行交互，作为 HTTP 规范的一部分而存在 ，而 Web Storage 仅仅是为了在本地 “存储” 数据而生。</p>\n<p>4、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。<br>\n图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。<br>\n如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。<br>\n如果图片为 css 图片，可以使用 CSSsprite，SVGsprite，Iconfont、Base64 等技术。<br>\n如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。<br>\n如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。</p>\n<p>5、什么是 Css Hack？ie6,7,8 的 hack 分别是什么？<br>\n针对不同的浏览器写不同的 CSS code 的过程，就是 CSS hack。</p>\n<p>#test{</p>\n<pre><code>width:300px;  \n\nheight:300px;  \n\n      /*firefox*/\n\nbackground-color:red\\9;      /*all ie*/\n\n    /*ie8*/\n\n+background-color:pink;        /*ie7*/\n\n_       /*ie6*/    &#125; \n\n:root #test &#123; background-color:purple\\9; &#125;  /*ie9*/\n\n@media all and (min-width:0px)&#123; #test &#123;&#125; &#125;  /*opera*/\n\n@media screen and (-webkit-min-device-pixel-ratio:0)&#123; #test &#123;background-color:gray;&#125; &#125;       /*chrome and safari*/\n</code></pre>\n<p>6、Sass、LESS 是什么？大家为什么要使用他们？<br>\n他们是 CSS 预处理器。他是 CSS 上的一种抽象层。他们是一种特殊的语法 / 语言编译成 CSS。<br>\n例如 Less 是一种动态样式语言。将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。<br>\n为什么要使用它们？<br>\n结构清晰，便于扩展。<br>\n可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。<br>\n可以轻松实现多重继承。<br>\n完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。</p>\n<p>7、html 常见兼容性问题？<br>\n1. 双边距 BUG float 引起的  使用 display<br>\n2.3 像素问题 使用 float 引起的 使用 dislpay:inline -3px<br>\n3. 超链接 hover 点击后失效  使用正确的书写顺序 link visited hover active<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzQuSWU=\">4.Ie</span> z-index 问题 给父级添加 position:relative<br>\n5.Png 透明 使用 js 代码 改<br>\n 6.Min-height 最小高度 ！Important 解决’<br>\n7.select 在 ie6 下遮盖 使用 iframe 嵌套<br>\n 8. 为什么没有办法定义 1px 左右的宽度容器（IE6 默认的行高造成的，使用 over:hidden,zoom:0.08 line-height:1px）<br>\n9.IE5-8 不支持 opacity，解决办法：<br>\n.opacity {</p>\n<pre><code>opacity: 0.4\n\nfilter: alpha(opacity=60); /* for IE5-7 */\n\n-ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=60)&quot;; /* for IE 8*/\n</code></pre>\n<p>}</p>\n<p>IE6 不支持 PNG 透明背景，解决办法: IE6 下使用 gif 图片<br>\n 8、描述一个”reset” 的 CSS 文件并如何使用它。知道 normalize.css 吗？你了解他们的不同    之处？<br>\n因为浏览器的品种很多，每个浏览器的默认样式也是不同的，比如<button>标签，在 IE 浏览器、Firefox 浏览器以及 Safari 浏览器中的样式都是不同的，所以，通过重置 button 标签的 CSS 属性，然后再将它统一定义，就可以产生相同的显示效果。<br>\n你可能会用 Normalize 来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。</p>\n<p float:left;width:200px;height:200px;=\"\">9、一边宽度固定，另一边自适应？<br>\n1）第一种：float 单一层浮动法<br>\n例如：左侧固定成 100px; 则核心代码 左侧：width:100px;float:left;<br>\n 右侧 width:auto;margin-left:100px;<br>\n2）第二种：定位 ，在固定元素上加入绝对定位，自适应元素设置成 margin-left: 固定元素的宽度<br>\n 3）通过 BFC 规则实现<br>\n例如：.left</p>\n<pre><code>     .right&#123;width:100%;overflow:hidden;height:200px&#125;\n</code></pre>\n<p>10、什么是圣杯布局？<br>\n左右两边的内容保持不变，中间的内容可以根据屏幕的大小的改变而改变。<br>\n1 .content {<br>\n2 padding: 0 200px;<br>\n3 height: 200px;<br>\n4 min-width: 200px;<br>\n5 }<br>\n.left {<br>\n6 width: 200px;<br>\n7 height: 200px;<br>\n8 background: red;<br>\n9 float: left;<br>\n10 margin-left: -200px;<br>\n11 }<br>\n12 .right {<br>\n13 width: 200px;<br>\n14 height: 200px;<br>\n15 background: yellow;<br>\n16 float: right;<br>\n17 margin-right: -200px;<br>\n18 }<br>\n19 .center {<br>\n20 width: 100%;<br>\n21 min-width: 200px;<br>\n22 height: 200px;<br>\n23 background: green;<br>\n24 float: left;<br>\n25 }<br>\n26 </style><br>\n27 </head><br>\n28 <body><br>\n29 <div class=\"content\"><br>\n30 <div class=\"left\"></div><br>\n31 <div class=\"center\"></div><br>\n32 <div class=\"right\"></div><br>\n33 </div></p>\n<p>11、div 中子元素居中的三种方式？<br>\n首先 div 设置为相对定位 relative, 子元素设置为绝对定位 absolute<br>\n 第一种 #div.img {position:absolute;left:0;top:0;bottom:0;right:0;margin:auto}<br>\n 第二种<br>\n #div.img {position:absoulute;left:50%;top:50%;margin-left:img 的 1/2width；margin-top:-img 的 1/2height;}<br>\nHTML5+CSS3<br>\n1、html5 有哪些新特性、移除了那些元素？如何处理 HTML5 新标签的浏览器兼容问题？</p>\n<p>新特性：</p>\n<ol>\n<li>\n<p>拖拽释放 (Drag and drop) API</p>\n</li>\n<li>\n<p>语义化更好的内容标签（header,nav,footer,aside,article,section）</p>\n</li>\n<li>\n<p>音频、视频 API (audio,video)</p>\n</li>\n<li>\n<p>画布 (Canvas) API</p>\n</li>\n<li>\n<p>地理 (Geolocation) API</p>\n</li>\n<li>\n<p>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</p>\n</li>\n<li>\n<p>sessionStorage 的数据在浏览器关闭后自动删除</p>\n</li>\n<li>\n<p>表单控件，calendar、date、time、email、url、search</p>\n</li>\n<li>\n<p>新的技术 webworker, websocket, Geolocation</p>\n</li>\n</ol>\n<p>移除的元素：</p>\n<ol>\n<li>\n<p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；</p>\n</li>\n<li>\n<p>对可用性产生负面影响的元素：frame，frameset，noframes；</p>\n</li>\n</ol>\n<p>HTML5 兼容性解决方案</p>\n<ol>\n<li>IE8/IE7/IE6 支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 HTML5 新标签，浏览器支持新标签后，还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是 html5shim 框架）：</li>\n</ol>\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n<p>2 你如何对网站的文件和资源进行优化？</p>\n<p>文件合并</p>\n<p>文件最小化 / 文件压缩</p>\n<p>使用 CDN 托管</p>\n<p>缓存的使用</p>\n<p>3 CSS3 新增伪类有那些？</p>\n<p>p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。</p>\n<pre><code>p:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\n\np:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\n\np:only-child    选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。\n\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。\n\n:enabled、:disabled 控制表单控件的禁用状态。\n</code></pre>\n<p>:checked，单选框或复选框被选中。</p>\n<p>4 H5+CSS3 兼容性解决的方案</p>\n<p>1 htmlshiv.js 框架 HTML5shiv 通过 JavaScript 来创建 HTML5 元素 (如 main, header, footer 等)</p>\n<!--[if lt IE 9]>\n\n<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n\n<![endif]-->\n<p>2 selectivizr.js</p>\n<p>selectivizr 是一个 JavaScript 工具，使 IE 浏览器也可以支持 CSS3 伪类以及属性选择器</p>\n<p>使用很简单，只要把 js include 到页面上，然后你就可以</p>\n<script type=\"text/javascript\" src=\"[JS library]\"></script>\n<p>&lt;!- -[if (gte IE 6)&amp;(lte IE 8)]&gt;</p>\n<pre><code>  &lt;script type=&quot;text/javascript&quot; src=&quot;selectivizr.js&quot;&gt;&lt;/script&gt;\n\n  &lt;noscript&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;[fallback css]&quot; /&gt;&lt;/noscript&gt;\n</code></pre>\n<p>&lt;![endif]- -&gt;</p>\n<p>3 条件注释</p>\n<p>5 CSS3 有哪些新特性？</p>\n<ol>\n<li>\n<p>CSS3 实现圆角（border-radius），阴影（box-shadow），</p>\n</li>\n<li>\n<p>对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）</p>\n</li>\n</ol>\n<p>3.transform:rotate (9deg) scale (0.85,0.90) translate (0px,-30px) skew (-9deg,0deg);// 旋转，缩放，定位，倾斜</p>\n<ol start=\"4\">\n<li>\n<p>增加了更多的 CSS 选择器  多背景 rgba</p>\n</li>\n<li>\n<p>在 CSS3 中唯一引入的伪元素是 ::selection.</p>\n</li>\n<li>\n<p>媒体查询，多栏布局</p>\n</li>\n<li>\n<p>border-image</p>\n</li>\n</ol>\n<p>JS+JQuery 部分内容</p>\n<p>1 数组和字符串中常用的方法</p>\n<p>1）数组中常用的方法</p>\n<p>Push () 向数组的末尾增加一项  unshift () 向数组开头增加一项</p>\n<p>pop () 删除数组的末尾项       shift () 删除数组开头项</p>\n<p>Splice () 删除数组中的任意项  concat 拼接</p>\n<p>Join () 把数组中的每一项 按照指定的分隔符拼接成字符串</p>\n<p>reverse: 倒序数组 返回值倒序数组 原有数组改变<br>\n sort: 根据匿名函数进行冒泡排序 b-a 倒序 a-b 升序</p>\n<p>兼容性不好：<br>\nindexOf: 返回获取项在数组中的索引<br>\n lastIndexOf: 返回获取项在数组中出现的最后一次索引<br>\n forEach: 循环遍历数组 参数是一个匿名函数 默认返回为 undefined<br>\nmap：循环遍历数组 参数是一个匿名函数</p>\n<p>2）字符串中常用的方法</p>\n<p>substring 方法返回位于 String 对象中指定位置的子字符串。</p>\n<p>substr 方法返回一个从指定位置开始的指定长度的子字符串。</p>\n<p>slice 方法返回字符串的片段。</p>\n<p>split 将一个字符串分割为子字符串，然后将结果作为字符串数组返回。</p>\n<p>2 js 兼容性问题</p>\n<p>1 获取，设置标签的内容 iE 和 chrome 浏览器支持 innerText  火狐浏览器支持 textContent</p>\n<p>2 获取指定元素的第一个元素和最后一个元素  element.firstElementChild</p>\n<p>IE679 只能获取 firstChild 获取第一个字节点，然后通过判断的节点的类型区的第一个子元素</p>\n<p>3event.x 与 event.y，在 IE 中，event 对象有 x,y 属性，现代浏览器中中，与 event.x 等效的是 event.pageX ，但 event.pageX IE 中没有</p>\n<p>4 问题说明：IE 下，可以使用获取常规属性的方法来获取自定义属性，也可以使用 getAttribute () 获取自定义属性；Firefox 下，只能使用 getAttribute () 获取自定义属性。</p>\n<p>解决方法：统一通过 getAttribute () 获取自定义属性。</p>\n<p>3 说说你对闭包的理解</p>\n<p>可以把闭包简单理解成 “定义在一个函数内部的函数”</p>\n<p>闭包有三个特性：</p>\n<p>1. 函数嵌套函数</p>\n<p>2. 函数内部可以引用外部的参数和变量</p>\n<p>3. 参数和变量不会被垃圾回收机制回收</p>\n<p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题</p>\n<p>4、javascript 里面的继承怎么实现，如何避免原型链上面的对象共享</p>\n<p>用构造函数和原型链的混合模式去实现继承，避免对象共享可以参考经典的 extend () 函数，很多前端框架都有封装的，就是用一个空函数当做中间变量</p>\n<p>5、JavaScript 原型，原型链？有什么特点？</p>\n<p>原型对象也是普通的对象，是对象一个自带隐式的 <strong>proto</strong> 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链。*</p>\n<p>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。</p>\n<p>6 请说出三种减少页面加载时间的方法。</p>\n<p>1. 优化图片</p>\n<p>2. 图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）</p>\n<p>3. 优化 CSS（压缩合并 css，如 margin-top,margin-left…)</p>\n<p>4. 网址后加斜杠（<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3ctZW84ZS5jYW1wci5jb20vJUU3JTlCJUFFJUU1JUJEJTk1JUVGJUJDJThDJUU0JUJDJTlBJUU1JTg4JUE0JUU2JTk2JUFEJUU4JUJGJTk5JUU0JUI4JUFBJUUyJTgwJTlDJUU3JTlCJUFFJUU1JUJEJTk1JUU2JTk4JUFGJUU0JUJCJTgwJUU0JUI5JTg4JUU2JTk2JTg3JUU0JUJCJUI2JUU3JUIxJUJCJUU1JTlFJThCJUVGJUJDJThDJUU2JTg4JTk2JUU4JTgwJTg1JUU2JTk4JUFGJUU3JTlCJUFFJUU1JUJEJTk1JUUzJTgwJTgyJUVGJUJDJTg5\">如 www.campr.com/ 目录，会判断这个 “目录是什么文件类型，或者是目录。）</span></p>\n<p>5. 标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。</p>\n<p>当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。）</p>\n<p>6. 减少 http 请求（合并文件，合并图片）</p>\n<p>7. 你有哪些性能优化的方法？</p>\n<p>（1） 减少 http 请求次数：CSS Sprites, JS、CSS 源码压缩、图片大小控制合适；网页 Gzip，CDN 托管，data 缓存 ，图片服务器。</p>\n<p>（2） 前端模板 JS + 数据，减少由于 HTML 标签导致的带宽浪费，前端用变量保存 AJAX 请求结果，每次操作本地变量，不用请求，减少请求次数</p>\n<p>（3） 用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能。</p>\n<p>（4） 当需要设置的样式很多时设置 className 而不是直接操作 style。</p>\n<p>（5） 少用全局变量、缓存 DOM 节点查找的结果。减少 IO 读取操作。</p>\n<p>（6） 避免使用 CSS Expression（css 表达式) 又称 Dynamic properties (动态属性)。</p>\n<p>图片预加载，将样式表放在顶部，将脚本放在底部？加上时间戳。</p>\n<p>8、 平时如何管理你的项目？</p>\n<p>1) 先期团队必须确定好全局样式（globe.css），编码模式 (utf-8) 等；</p>\n<ol start=\"2\">\n<li>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）</li>\n</ol>\n<p>3) 标注样式编写人，各模块都及时标注（标注关键样式调用的地方）</p>\n<p>4) 页面进行标注（例如 页面 模块 开始和结束）</p>\n<p>5) CSS 跟 HTML 分文件夹并行存放，命名都得统一（例如 style.css）；</p>\n<p>6) JS 分文件夹存放 命名以该 JS 功能为准的英文翻译。</p>\n<p>9、call 和 apply 的区别</p>\n<p>call 和 apply 相同点：改变函数中 this 的指向</p>\n<p>不同点：函数参数的传递形式</p>\n<p>call 将函数参数依次传入</p>\n<p>apply 将函数参数用一个数组的形式传入</p>\n<p>10、原生 JS 的 window.onload 与 Jquery 的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>o</mi><mi>c</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo><mrow></mrow><mo stretchy=\"false\">)</mo><mtext>，</mtext></mrow><annotation encoding=\"application/x-tex\">(document).ready(function() {})，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mord\"></span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">，</span></span></span></span>(function () {}) 有什么不同？</p>\n<p>1) 执行时间</p>\n<p>window.onload 必须等到页面内包括图片的所有元素加载完毕后才能执行。 $(document).ready () 是 DOM 结构绘制完毕后就执行，不必等到加载完毕。</p>\n<p>2) 编写个数不同</p>\n<p>window.onload 不能同时编写多个，如果有多个 window.onload 方法，只会执行一个 $(document).ready () 可以同时编写多个，并且都可以得到执行</p>\n<p>3) 简化写法 window.onload 没有简化写法 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>o</mi><mi>c</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>y</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo><mrow></mrow><mo stretchy=\"false\">)</mo><mtext>可以简写成</mtext></mrow><annotation encoding=\"application/x-tex\">(document).ready(function(){})可以简写成</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mord\"></span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">简</span><span class=\"mord cjk_fallback\">写</span><span class=\"mord cjk_fallback\">成</span></span></span></span> (function (){})；</p>\n<p>11、split (),join () 的区别？</p>\n<p>split () 方法通过把字符串分割成子字符串来把一个 String 对象分割成一个字符串数组。</p>\n<p>join () 方法将数组中的所有元素连接成一个字符串。</p>\n<p>12、谈一下 Jquery 中的 bind (),live (),delegate (),on () 的区别？</p>\n<p>bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回 jQuery 对象。</p>\n<p>live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回 jQuery 对象。</p>\n<p>delegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。</p>\n<p>On: 支持直接在目标元素上绑定事件，也支持在目标元素的祖辈元素上委托绑定。在事件委托绑定模式下，即使是执行 on () 函数之后新添加的元素，只要它符合条件，绑定的事件处理函数也对其有效。</p>\n<p>Ajax 的面试题</p>\n<p>1、解释 jsonp 的原理</p>\n<p>动态创建 script 标签，回调函数</p>\n<p>2、请尽可能详尽的解释 ajax 的工作原理</p>\n<p>思路：先解释异步，再解释 ajax 如何使用</p>\n<p>Ajax 的原理简单来说通过 XmlHttpRequest 对象来向服务器发异步请求，从服务器获得数据，然后用 javascript 来操作 DOM 而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest 有所了解。</p>\n<p>XMLHttpRequest 是 ajax 的核心机制，它是在 IE5 中首先引入的，是一种支持异步请求的技术。简单的说，也就是 javascript 可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>\n<p>3、Ajax 的最大的特点是什么。</p>\n<p>Ajax 可以实现动态不刷新（局部刷新）</p>\n<p>readyState 属性 状态 有 5 个可取值： 0 = 未初始化 ，1 = 启动 2 = 发送，3 = 接收，4 = 完成</p>\n<p>4、ajax 的缺点</p>\n<p>1） ajax 不支持浏览器 back 按钮。</p>\n<p>2) 安全问题 AJAX 暴露了与服务器交互的细节。</p>\n<p>3) 对搜索引擎的支持比较弱。</p>\n<p>4) 破坏了程序的异常机制。</p>\n<p>5) 不容易调试。</p>\n<p>5、get 和 post 的区别？</p>\n<p>GET：一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符；</p>\n<p>POST：一般用于修改服务器上的资源，对所发送的信息没有限制。</p>\n<p>也就是说 Get 是通过地址栏来传值，而 Post 是通过提交表单来传值。</p>\n<p>6、如何解决跨域问题？<br>\n 理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域</p>\n<p>1.Get 方式请求的跨域可以通过 jsonp 来解决。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50dWljb29sLmNvbS9hcnRpY2xlcy9RQmJ1aWFS\">http://www.tuicool.com/articles/QBbuiaR</span></p>\n<p>2.Post 方式的请求  cors 解决跨域</p>\n<p>Cors 解释</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9EYXJyZW5fY29kZS9wL2NvcnMuaHRtbA==\">http://www.cnblogs.com/Darren_code/p/cors.html</span></p>\n<p>JSONP 实现跨域</p>\n<p>常用的 jquery 实现跨域调用</p>\n<p>$.ajax({</p>\n<pre><code>url: &quot;http://127.0.0.1/~chenjiebin/mycode/php/crossdomain/index.php&quot;,\n\ndataType: &quot;jsonp&quot;,\n\njsonp: &quot;callback&quot;,\n\ncontext: document.body,\n\nsuccess: function(data) &#123;\n\n    console.log(data);\n\n&#125;\n</code></pre>\n<p>});</p>\n<p>这个调用实际上的实现原理是</p>\n<p>在网页中构造一个 script 标签，将 src 设置为对应的 url，并增加上相应的 callback 参数，形如如下格式：</p>\n<script src=\"http://127.0.0.1/~chenjiebin/mycode/php/crossdomain/index.php?callback=jQuery211018970995225637144_1465350372062&_=1465350372063\"></script>\n<p>请求的服务端代码如下：</p>\n<p>$data     = json_encode(array(“id” =&gt; “1”, “name” =&gt; “tom”));</p>\n<p>$callback = $_GET[“callback”];</p>\n<p>echo $callback . “(” . $data . “)”;</p>\n<p>实际上最后返回的内容就是一段 js 代码：</p>\n<p>jQuery211018970995225637144_1465350372062({“id”:“1”,“name”:“tom”})</p>\n<p>当浏览器获取到该段 js 代码后就会执行这个函数，从而实现回调 ajax 请求时设置的 success 方法。</p>\n<p>jsonp 实现的缺点</p>\n<p>了解了原理后，就知道 jsonp 实现的跨域方式不支持 post 请求，只能支持 get 请求。但是如果需要支持 post 请求该怎么办呢？下面谈下服务器端设置的方式。</p>\n<p>服务端设置支持跨域</p>\n<p>主要是 Access-Control-Allow-Origin 头参数，该参数用来指定允许哪个来源的域请求。服务端代码如下：</p>\n<p>// 表示支持所有来源的域进行请求</p>\n<p>// 实际在操作过程中可以设置为指定域</p>\n<p>header(‘Access-Control-Allow-Origin:*’);</p>\n<p>$data = json_encode(array(“id” =&gt; “1”, “name” =&gt; “tom”));</p>\n<p>echo $data;</p>\n<p>对应的 js 代码：</p>\n<p>$.ajax({</p>\n<pre><code>type: &quot;POST&quot;,\n\nurl: &quot;http://127.0.0.1/~chenjiebin/mycode/php/crossdomain/header.php&quot;,\n\ndataType: &quot;json&quot;,\n\nsuccess: function(data) &#123;\n\n    console.log(data);\n\n&#125;\n</code></pre>\n<p>});</p>\n<p>可以支持 post 请求</p>\n<pre><code>                   移动web开发\n</code></pre>\n<p>1、px，em，rem 的区别？</p>\n<p>1）px 像素（Pixel） 。绝对单位。像素 px 是相对于显示器屏幕分辨率而言的，是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果 px 要换算成物理长度，需要指定精度 DPI。</p>\n<p>2）em 是相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。它会继承父级元素的字体大小，因此并不是一个固定的值。</p>\n<p>3）rem 是 CSS3 新增的一个相对单位（rootem，根 em） ，使用 rem 为元素设定字体大小时，仍然是相对大小，</p>\n<p>但相对的只是 HTML 根元素。</p>\n<p>2、jQuery 和 Zepto 的区别？各自的使用场景？Zepto 比 jQuery 轻量的原因？</p>\n<p>jQuery 主要用于 PC 端开发，Zepto 比 jQuery 更加小巧，主要用于移动端，Zepto 是不兼容低版本的浏览器</p>\n<p>原因：</p>\n<p>1）Zepto 轻量的原因是没有像 jQuery 一样处理移动端的兼容性问题，</p>\n<p>2）Zepto 的模块是放到不同的模块中，根据业务需要引入模块，减少代码量，提高网页的加载速度</p>\n<p>3、bootstrap 框架中的栅格系统的本质是什么？以及 bootstrap 框架的优缺点？</p>\n<p>bootstrap 的栅格系统的本质是通过 css3 的媒体查询实现的</p>\n<p>优点:bootstrap 框架便于快速布局，而且添加了更加灵活的栅格系统，增加了响应式</p>\n<p>计，来适配不同的设备</p>\n<p>缺点：对 ie678 的兼容性可能不太好，而且 bootstrap 是依赖于 jQuery，代码的体积大，会影响网页的加载速度，不适合移动端。</p>\n<p>4、如何解决移动端的 click 事件的延迟响应？</p>\n<p>移动端 click 屏幕产生 200-300 ms 的延迟响应，往往会造成按钮点击延迟甚至是点击失效。</p>\n<p>解决方案</p>\n<ol>\n<li>github 上有一个叫做 fastclick 的库，它也能规避移动设备上 click 事件的延迟响应，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Z0bGFicy9mYXN0Y2xpY2s=\">https://github.com/ftlabs/fastclick</span></li>\n</ol>\n<p>2) zepto 的 touch 模块，tap 事件也是为了解决在 click 的延迟问题</p>\n<p>5、什么是 mvc 开发模式？</p>\n<p>Mvc 是一中组织代码结构的方式，便于代码的管理和维护。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/21/Linux%20interview%20summary/",
            "url": "http://example.com/2021/01/21/Linux%20interview%20summary/",
            "title": "Linux interview summary",
            "date_published": "2021-01-21T09:30:38.267Z",
            "content_html": "<h2 id=\"常用指令\"><a class=\"markdownIt-Anchor\" href=\"#常用指令\">#</a> 常用指令</h2>\n<p>ls　　        显示文件或目录<br>\n - l           列出文件详细信息 l (list)<br>\n-a          列出当前目录下所有文件及目录，包括隐藏的 a (all)<br>\n mkdir         创建目录<br>\n - p           创建目录，若无父目录，则创建 p (parent)<br>\n cd               切换目录<br>\n touch          创建空文件<br>\n echo            创建带有内容的文件。<br>\ncat              查看文件内容<br>\n cp                拷贝<br>\n mv               移动或重命名<br>\n rm               删除文件<br>\n - r            递归删除，可删除子目录及文件<br>\n - f            强制删除<br>\n find              在文件系统中搜索某文件<br>\n wc                统计文本中行数、字数、字符数<br>\n grep             在文本文件中查找某个字符串<br>\n rmdir           删除空目录<br>\n tree             树形结构显示目录，需要安装 tree 包<br>\n pwd              显示当前目录<br>\n ln                  创建链接文件<br>\n more、less  分页显示文本文件内容<br>\n head、tail    显示文件头、尾内容<br>\n ctrl+alt+F1  命令行全屏模式</p>\n<h2 id=\"系统管理命令\"><a class=\"markdownIt-Anchor\" href=\"#系统管理命令\">#</a> 系统管理命令</h2>\n<p>stat              显示指定文件的详细信息，比 ls 更详细<br>\n who               显示在线登陆用户<br>\n whoami          显示当前操作用户<br>\n hostname      显示主机名<br>\n uname           显示系统信息<br>\n top                动态显示当前耗费资源最多进程信息<br>\n ps                  显示瞬间进程状态 ps -aux<br>\ndu                  查看目录大小 du -h /home 带有单位显示目录信息<br>\n df                  查看磁盘大小 df -h 带有单位显示磁盘信息<br>\n ifconfig          查看网络情况<br>\n ping                测试网络连通<br>\n netstat          显示网络状态信息<br>\n man                命令不会用了，找男人  如：man ls<br>\nclear              清屏<br>\n alias               对命令重命名 如：alias showmeit=“ps -aux” ，另外解除使用 unaliax showmeit<br>\nkill                 杀死进程，可以先用 ps 或 top 命令查看进程的 id，然后再用 kill 命令杀死进程。</p>\n<h2 id=\"打包压缩相关命令\"><a class=\"markdownIt-Anchor\" href=\"#打包压缩相关命令\">#</a> 打包压缩相关命令</h2>\n<p>gzip：<br>\nbzip2：<br>\ntar:                打包压缩<br>\n - c              归档文件<br>\n - x              压缩文件<br>\n - z              gzip 压缩文件<br>\n - j              bzip2 压缩文件<br>\n - v              显示压缩或解压缩过程 v (view)<br>\n-f              使用档名<br>\n例：<br>\ntar -cvf /home/abc.tar/home/abc              只打包，不压缩<br>\n tar -zcvf /home/abc.tar.gz/home/abc        打包，并用 gzip 压缩<br>\n tar -jcvf /home/abc.tar.bz2 /home/abc      打包，并用 bzip2 压缩<br>\n当然，如果想解压缩，就直接替换上面的命令  tar -cvf  /tar -zcvf  /tar -jcvf 中的 “c” 换成 “x” 就可以了。</p>\n<h2 id=\"关机重启机器\"><a class=\"markdownIt-Anchor\" href=\"#关机重启机器\">#</a> 关机 / 重启机器</h2>\n<p>shutdown<br>\n-r             关机重启<br>\n - h             关机不重启<br>\n now          立刻关机<br>\n halt               关机<br>\n reboot          重启</p>\n<h2 id=\"linux管道\"><a class=\"markdownIt-Anchor\" href=\"#linux管道\">#</a> Linux 管道</h2>\n<p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。<br>\n例：grep -r “close” /home/* | more       在 home 目录下所有文件中查找，包括 close 的文件，并分页输出。</p>\n<h2 id=\"linux软件包管理\"><a class=\"markdownIt-Anchor\" href=\"#linux软件包管理\">#</a> Linux 软件包管理</h2>\n<p>dpkg (Debian Package) 管理工具，软件包名以.deb 后缀。这种方法适合系统不能联网的情况下。<br>\n比如安装 tree 命令的安装包，先将 tree.deb 传到 Linux 系统中。再使用如下命令安装。<br>\nsudo dpkg -i tree_1.5.3-1_i386.deb         安装软件<br>\n sudo dpkg -r tree                                     卸载软件<br>\n注：将 tree.deb 传到 Linux 系统中，有多种方式。VMwareTool，使用挂载方式；使用 winSCP 工具等；<br>\nAPT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。</p>\n<p>依然以 tree 为例<br>\n sudo apt-get install tree                         安装 tree<br>\nsudo apt-get remove tree                       卸载 tree<br>\nsudo apt-get update                                 更新软件<br>\n sudo apt-get upgrade</p>\n<p>将.rpm 文件转为.deb 文件<br>\n.rpm 为 RedHat 使用的软件格式。在 Ubuntu 下不能直接使用，所以需要转换一下。<br>\nsudo alien abc.rpm</p>\n<h2 id=\"vim使用\"><a class=\"markdownIt-Anchor\" href=\"#vim使用\">#</a> vim 使用</h2>\n<p>vim 三种模式：命令模式、插入模式、编辑模式。使用 ESC 或 i 或：来切换模式。<br>\n命令模式下：<br>\n:q                      退出<br>\n:q!                     强制退出<br>\n:wq                   保存并退出<br>\n:set number     显示行号<br>\n:set nonumber  隐藏行号<br>\n /apache            在文档中查找 apache 按 n 跳到下一个，shift+n 上一个<br>\n yyp                   复制光标所在行，并粘贴<br>\n h (左移一个字符←)、j (下一行↓)、k (上一行↑)、l (右移一个字符→)</p>\n<h2 id=\"用户及用户组管理\"><a class=\"markdownIt-Anchor\" href=\"#用户及用户组管理\">#</a> 用户及用户组管理</h2>\n<p>/etc/passwd    存储用户账号<br>\n /etc/group       存储组账号<br>\n /etc/shadow    存储用户账号的密码<br>\n /etc/gshadow  存储用户组账号的密码<br>\n useradd 用户名<br>\n userdel 用户名<br>\n adduser 用户名<br>\n groupadd 组名<br>\n groupdel 组名<br>\n passwd root     给 root 设置密码<br>\n su root<br>\nsu - root<br>\n/etc/profile     系统环境变量<br>\n bash_profile     用户环境变量<br>\n.bashrc              用户环境变量<br>\n su user              切换用户，加载配置文件.bashrc<br>\nsu - user            切换用户，加载配置文件 /etc/profile ，加载 bash_profile</p>\n<h2 id=\"更改文件的用户及用户组\"><a class=\"markdownIt-Anchor\" href=\"#更改文件的用户及用户组\">#</a> 更改文件的用户及用户组</h2>\n<p>sudo chown [-R] owner[:group] {File|Directory}<br>\n 例如：还以 jdk-7u21-linux-i586.tar.gz 为例。属于用户 hadoop，组 hadoop<br>\n 要想切换此文件所属的用户及组。可以使用命令。<br>\nsudo chown root:root jdk-7u21-linux-i586.tar.gz</p>\n<h2 id=\"绝对路径用什么符号表示绝对路径用什么符号表示当前目录-上层目录用什么表示主目录用什么表示-切换目录用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#绝对路径用什么符号表示绝对路径用什么符号表示当前目录-上层目录用什么表示主目录用什么表示-切换目录用什么命令\">#</a> 绝对路径用什么符号表示绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示？切换目录用什么命令？</h2>\n<p>绝对路径： 如 /etc/init.d<br>\n 当前目录和上层目录： ./  …/<br>\n 主目录： ~/<br>\n 切换目录： cd</p>\n<h2 id=\"怎么查看当前进程怎么执行退出怎么查看当前路径\"><a class=\"markdownIt-Anchor\" href=\"#怎么查看当前进程怎么执行退出怎么查看当前路径\">#</a> 怎么查看当前进程？怎么执行退出？怎么查看当前路径？</h2>\n<p>查看当前进程： ps<br>\n 执行退出： exit<br>\n 查看当前路径： pwd</p>\n<h2 id=\"怎么清屏怎么退出当前命令怎么执行睡眠怎么查看当前用户-id查看指定帮助用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#怎么清屏怎么退出当前命令怎么执行睡眠怎么查看当前用户-id查看指定帮助用什么命令\">#</a> 怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？</h2>\n<p>清屏： clear<br>\n 退出当前命令： ctrl+c 彻底退出<br>\n执行睡眠 ： ctrl+z 挂起当前进程 fg 恢复后台<br>\n查看当前用户 id： ”id“：查看显示目前登陆账户的 uid 和 gid 及所属分组及用户名<br>\n查看指定帮助： 如 man adduser 这个很全 而且有例子； adduser --help 这个告诉你一些常用参数； info adduesr；</p>\n<h2 id=\"ls-命令执行什么功能-可以带哪些参数有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#ls-命令执行什么功能-可以带哪些参数有什么区别\">#</a> Ls 命令执行什么功能？ 可以带哪些参数，有什么区别？</h2>\n<p>ls 执行的功能： 列出指定目录中的目录，以及文件<br>\n哪些参数以及区别： a 所有文件 l 详细信息，包括大小字节数，可读可写可执行的权限等</p>\n<h2 id=\"建立软链接快捷方式以及硬链接的命令\"><a class=\"markdownIt-Anchor\" href=\"#建立软链接快捷方式以及硬链接的命令\">#</a> 建立软链接 (快捷方式)，以及硬链接的命令。</h2>\n<p>软链接： ln -s slink source<br>\n 硬链接： ln link source</p>\n<h2 id=\"目录创建用什么命令创建文件用什么命令复制文件用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#目录创建用什么命令创建文件用什么命令复制文件用什么命令\">#</a> 目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？</h2>\n<p>创建目录： mkdir<br>\n 创建文件：典型的如 touch，vi 也可以创建文件，其实只要向一个不存在的文件输出，都会创建文件<br>\n复制文件： cp 7. 文件权限修改用什么命令？格式是怎么样的？<br>\n文件权限修改： chmod<br>\n 格式如下：<br>\nchmodu+xfile 给 file 的属主增加执行权限  chmod 751 file 给 file 的属主分配读、写、执行 (7) 的权限，给 file 的所在组分配读、执行 (5) 的权限，给其他用户分配执行 (1) 的权限<br>\n chmodu=rwx,g=rx,o=xfile 上例的另一种形式 chmod =r file 为所有用户分配读权限<br>\n chmod444file 同上例 chmod a-wx,a+r file 同上例<br>\n $ chmod -R u+r directory 递归地给 directory 目录下所有文件和子目录的属主分配读的权限</p>\n<h2 id=\"查看文件内容有哪些命令可以使用\"><a class=\"markdownIt-Anchor\" href=\"#查看文件内容有哪些命令可以使用\">#</a> 查看文件内容有哪些命令可以使用？</h2>\n<p>vi 文件名 #编辑方式查看，可修改<br>\n cat 文件名 #显示全部文件内容<br>\n more 文件名 #分页显示文件内容<br>\n less 文件名 #与 more 相似，更好的是可以往前翻页<br>\n tail 文件名 #仅查看尾部，还可以指定行数<br>\n head 文件名 #仅查看头部，还可以指定行数</p>\n<h2 id=\"随意写文件命令怎么向屏幕输出带空格的字符串比如hello-world\"><a class=\"markdownIt-Anchor\" href=\"#随意写文件命令怎么向屏幕输出带空格的字符串比如hello-world\">#</a> 随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello world”?</h2>\n<p>写文件命令：vi<br>\n 向屏幕输出带空格的字符串:echo hello world</p>\n<h2 id=\"终端是哪个文件夹下的哪个文件黑洞文件是哪个文件夹下的哪个命令\"><a class=\"markdownIt-Anchor\" href=\"#终端是哪个文件夹下的哪个文件黑洞文件是哪个文件夹下的哪个命令\">#</a> 终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？</h2>\n<p>终端  /dev/tty<br>\n 黑洞文件  /dev/null</p>\n<h2 id=\"移动文件用哪个命令改名用哪个命令\"><a class=\"markdownIt-Anchor\" href=\"#移动文件用哪个命令改名用哪个命令\">#</a> 移动文件用哪个命令？改名用哪个命令？</h2>\n<p>mv mv</p>\n<h2 id=\"复制文件用哪个命令如果需要连同文件夹一块复制呢如果需要有提示功能呢\"><a class=\"markdownIt-Anchor\" href=\"#复制文件用哪个命令如果需要连同文件夹一块复制呢如果需要有提示功能呢\">#</a> 复制文件用哪个命令？如果需要连同文件夹一块复制呢？如果需要有提示功能呢？</h2>\n<p>cp cp -r  ？？？？</p>\n<h2 id=\"删除文件用哪个命令如果需要连目录及目录下文件一块删除呢删除空文件夹用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#删除文件用哪个命令如果需要连目录及目录下文件一块删除呢删除空文件夹用什么命令\">#</a> 删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？</h2>\n<p>rm rm -r rmdir</p>\n<h2 id=\"linux-下命令有哪几种可使用的通配符分别代表什么含义\"><a class=\"markdownIt-Anchor\" href=\"#linux-下命令有哪几种可使用的通配符分别代表什么含义\">#</a> Linux 下命令有哪几种可使用的通配符？分别代表什么含义？</h2>\n<p>“？” 可替代单个字符。<br>\n“*” 可替代任意多个字符。<br>\n方括号 “[charset]” 可替代 charset 集中的任何单个字符，如 [a-z]，[abABC]</p>\n<h2 id=\"对一个文件的内容进行统计用什么命令行号-单词数-字节数\"><a class=\"markdownIt-Anchor\" href=\"#对一个文件的内容进行统计用什么命令行号-单词数-字节数\">#</a> 对一个文件的内容进行统计用什么命令？(行号、单词数、字节数)</h2>\n<p>wc 命令 - c 统计字节数 - l 统计行数 - w 统计字数。</p>\n<h2 id=\"grep-命令有什么用-如何忽略大小写-如何查找不含该串的行\"><a class=\"markdownIt-Anchor\" href=\"#grep-命令有什么用-如何忽略大小写-如何查找不含该串的行\">#</a> Grep 命令有什么用？ 如何忽略大小写？ 如何查找不含该串的行？</h2>\n<p>是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。<br>\ngrep [stringSTRING] filename grep [^string] filename</p>\n<h2 id=\"linux-中进程有哪几种状态在-ps-显示出来的信息中分别用什么符号表示的\"><a class=\"markdownIt-Anchor\" href=\"#linux-中进程有哪几种状态在-ps-显示出来的信息中分别用什么符号表示的\">#</a> Linux 中进程有哪几种状态？在 ps 显示出来的信息中，分别用什么符号表示的？</h2>\n<p>1）、不可中断状态：进程处于睡眠状态，但是此刻进程是不可中断的。不可中断， 指进程不响应异步信号。<br>\n（2）、暂停状态 / 跟踪状态：向进程发送一个 SIGSTOP 信号，它就会因响应该信号 而进入 TASK_STOPPED 状态；当进程正在被跟踪时，它处于 TASK_TRACED 这个特殊的状态。<br>\n“正在被跟踪” 指的是进程暂停下来，等待跟踪它的进程对它进行操作。<br>\n（3）、就绪状态：在 run_queue 队列里的状态<br>\n（4）、运行状态：在 run_queue 队列里的状态<br>\n（5）、可中断睡眠状态：处于这个状态的进程因为等待某某事件的发生（比如等待 socket 连接、等待信号量），而被挂起<br>\n（6）、zombie 状态（僵尸）：父亲没有通过 wait 系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉<br>\n（7）、退出状态<br>\n D 不可中断 Uninterruptible（usually IO）<br>\nR 正在运行，或在队列中的进程<br>\n S 处于休眠状态<br>\n T 停止或被追踪<br>\n Z 僵尸进程<br>\n W 进入内存交换（从内核 2.6 开始无效）<br>\nX 死掉的进程</p>\n<h2 id=\"怎么使一个命令在后台运行\"><a class=\"markdownIt-Anchor\" href=\"#怎么使一个命令在后台运行\">#</a> 怎么使一个命令在后台运行？</h2>\n<p>一般都是使用 &amp; 在命令结尾来让程序自动运行。(命令后可以不追加空格)</p>\n<h2 id=\"利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息\"><a class=\"markdownIt-Anchor\" href=\"#利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息\">#</a> 利用 ps 怎么显示所有的进程？怎么利用 ps 查看指定进程的信息？</h2>\n<p>ps -ef (system v 输出)<br>\n ps -aux bsd 格式输出<br>\n ps -ef | grep pid</p>\n<h2 id=\"专门用来查看后台任务的是哪个命令\"><a class=\"markdownIt-Anchor\" href=\"#专门用来查看后台任务的是哪个命令\">#</a> 专门用来查看后台任务的是哪个命令？</h2>\n<p>job -l</p>\n<h2 id=\"把后台任务调到前台执行使用什么命令把停下的后台任务在后台执行起来用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#把后台任务调到前台执行使用什么命令把停下的后台任务在后台执行起来用什么命令\">#</a> 把后台任务调到前台执行使用什么命令？把停下的后台任务在后台执行起来用什么命令？</h2>\n<p>把后台任务调到前台执行 fg<br>\n 把停下的后台任务在后台执行起来 bg</p>\n<p>## 终止进程用什么命令？带什么参数？<br>\nkill [-s &lt; 信息名称或编号&gt;][程序] 或 kill [-l &lt; 信息编号 &gt;]<br>\nkill-9 pid</p>\n<h2 id=\"怎么查看系统支持的所有信号\"><a class=\"markdownIt-Anchor\" href=\"#怎么查看系统支持的所有信号\">#</a> 怎么查看系统支持的所有信号？</h2>\n<p>kill -l</p>\n<h2 id=\"搜索文件用什么命令-格式是怎么样的\"><a class=\"markdownIt-Anchor\" href=\"#搜索文件用什么命令-格式是怎么样的\">#</a> 搜索文件用什么命令？格式是怎么样的？</h2>\n<p>find &lt;指定目录&gt; &lt; 指定条件 &gt; &lt; 指定动作 &gt;<br>\nwhereis 加参数与文件名<br>\n locate 只加文件名<br>\n find 直接搜索磁盘，较慢。<br>\nfind / -name “string*”</p>\n<h2 id=\"查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令\">#</a> 查看当前谁在使用该主机用什么命令？查找自己所在的终端信息用什么命令？</h2>\n<p>查找自己所在的终端信息：who am i<br>\n 查看当前谁在使用该主机：who</p>\n<h2 id=\"查看用过的命令列表使用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#查看用过的命令列表使用什么命令\">#</a> 查看用过的命令列表使用什么命令？</h2>\n<p>history</p>\n<h2 id=\"查看磁盘使用空间使用什么命令-空闲空间呢\"><a class=\"markdownIt-Anchor\" href=\"#查看磁盘使用空间使用什么命令-空闲空间呢\">#</a> 查看磁盘使用空间使用什么命令？ 空闲空间呢？</h2>\n<p>df -hl<br>\n 文件系统 容量 已用 可用 已用 % 挂载点<br>\n Filesystem Size Used Avail Use% Mounted on /dev/hda2 45G 19G 24G 44% /<br>\n/dev/hda1 494M 19M 450M 4% /boot</p>\n<h2 id=\"查看网络是否连通使用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#查看网络是否连通使用什么命令\">#</a> 查看网络是否连通使用什么命令？</h2>\n<p>netstat</p>\n<h2 id=\"查看-ip-地址及接口信息使用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#查看-ip-地址及接口信息使用什么命令\">#</a> 查看 ip 地址及接口信息使用什么命令？</h2>\n<p>ifconfig</p>\n<h2 id=\"查看各类环境变量用什么命令\"><a class=\"markdownIt-Anchor\" href=\"#查看各类环境变量用什么命令\">#</a> 查看各类环境变量用什么命令？</h2>\n<p>查看所有 env<br>\n 查看某个，如 home： env $HOME</p>\n<h2 id=\"指定命令提示符是通过什么命令\"><a class=\"markdownIt-Anchor\" href=\"#指定命令提示符是通过什么命令\">#</a> 指定命令提示符是通过什么命令？</h2>\n<p>\\u：显示当前用户账号<br>\n \\h：显示当前主机名<br>\n \\W：只显示当前路径最后一个目录<br>\n \\w：显示当前绝对路径（当前用户目录会以～代替）<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>W</mi><mi>D</mi><mtext>：显示当前全路径</mtext></mrow><annotation encoding=\"application/x-tex\">PWD：显示当前全路径\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">显</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">前</span><span class=\"mord cjk_fallback\">全</span><span class=\"mord cjk_fallback\">路</span><span class=\"mord cjk_fallback\">径</span></span></span></span>：显示命令行’'或者’#'符号\n\\#：下达的第几个命令\n\\d：代表日期，格式为week day month date，例如：\"MonAug1\"\n\\t：显示时间为24小时格式，如：HH：MM：SS\n\\T：显示时间为12小时格式\n\\A：显示时间为24小时格式：HH：MM\n\\v：BASH的版本信息 如export PS1=’[\\u@\\h\\w\\#]‘</p>\n<h2 id=\"查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加\"><a class=\"markdownIt-Anchor\" href=\"#查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加\">#</a> 查找命令的可执行文件是去哪查找的？怎么对其进行设置及添加？</h2>\n<p>whereis [-bfmsu][-B &lt; 目录 &gt;…][-M &lt; 目录 &gt;…][-S &lt; 目录 &gt;…][文件…]<br>\n 补充说明：whereis 指令会在特定目录中查找符合条件的文件。这些文件的烈性应属于原始代码，二进制文件，或是帮助文件。<br>\n-b   只查找二进制文件。<br>\n-B &lt;目录&gt; 只在设置的目录下查找二进制文件。 -f 不显示文件名前的路径名称。<br>\n-m   只查找说明文件。<br>\n-M &lt;目录&gt; 只在设置的目录下查找说明文件。 -s 只查找原始代码文件。<br>\n-S &lt;目录&gt; 只在设置的目录下查找原始代码文件。 -u 查找不包含指定类型的文件。<br>\nwhich 指令会在 PATH 变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。<br>\n-n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。<br>\n-p 与 - n 参数相同，但此处的包括了文件的路径。 -w 指定输出时栏位的宽度。<br>\n-V   显示版本信息</p>\n<h2 id=\"对命令进行取别名\"><a class=\"markdownIt-Anchor\" href=\"#对命令进行取别名\">#</a> 对命令进行取别名？</h2>\n<p>alias la=‘ls -a’</p>\n<h2 id=\"du-和-df-的定义以及区别\"><a class=\"markdownIt-Anchor\" href=\"#du-和-df-的定义以及区别\">#</a> du 和 df 的定义，以及区别？</h2>\n<p>du 显示目录或文件的大小<br>\n df 显示每个 &lt;文件&gt; 所在的文件系统的信息，默认是显示所有文件系统。<br>\n（文件系统分配其中的一些磁盘块用来记录它自身的一些数据，如 i 节点，磁盘分布图，间接块，超级块等。这些数据对大多数用户级的程序来说是不可见的，通常称为 Meta Data。）<br>\ndu 命令是用户级的程序，它不考虑 Meta Data，而 df 命令则查看文件系统的磁盘分配图并考虑 Meta Data。<br>\ndf 命令获得真正的文件系统数据，而 du 命令只查看文件系统的部分情况。</p>\n<h2 id=\"awk-详解\"><a class=\"markdownIt-Anchor\" href=\"#awk-详解\">#</a> awk 详解。</h2>\n<p>awk ‘{pattern + action}’ {filenames}<br>\n#cat /etc/passwd |awk -F ‘:’ ‘{print 1&quot;\\t&quot;7}’ //-F 的意思是以’:' 分隔 root /bin/bash<br>\ndaemon /bin/sh 搜索 /etc/passwd 有 root 关键字的所有行<br>\n #awk -F: ‘/root/’ /etc/passwd root❌0:0:root:/root:/bin/bash</p>\n<h2 id=\"给命令绑定一个宏或者按键的时候应该怎么做呢\"><a class=\"markdownIt-Anchor\" href=\"#给命令绑定一个宏或者按键的时候应该怎么做呢\">#</a> 给命令绑定一个宏或者按键的时候，应该怎么做呢？</h2>\n<p>可以使用 bind 命令，bind 可以很方便地在 shell 中实现宏或按键的绑定。<br>\n在进行按键绑定的时候，我们需要先获取到绑定按键对应的字符序列。<br>\n比如获取 F12 的字符序列获取方法如下：先按下 Ctrl+V, 然后按下 F12 . 我们就可以得到 F12 的字符序列 ^[[24~。<br>\n接着使用 bind 进行绑定。<br>\n[root@localhost ~]# bind ‘”\\e[24~&quot;:“date”’<br>\n注意：相同的按键在不同的终端或终端模拟器下可能会产生不同的字符序列。<br>\n【附】也可以使用 showkey -a 命令查看按键对应的字符序列。</p>\n<h2 id=\"显示当前系统支持的所有命令的列表他需要怎么做\"><a class=\"markdownIt-Anchor\" href=\"#显示当前系统支持的所有命令的列表他需要怎么做\">#</a> 显示当前系统支持的所有命令的列表，他需要怎么做？</h2>\n<p>使用命令 compgen ­-c，可以打印出所有支持的命令列表。<br>\n[root@localhost ~]$ compgen -c</p>\n<h2 id=\"打印出当前的目录栈你会建议他怎么做\"><a class=\"markdownIt-Anchor\" href=\"#打印出当前的目录栈你会建议他怎么做\">#</a> 打印出当前的目录栈，你会建议他怎么做？</h2>\n<p>使用 Linux 命令 dirs 可以将当前的目录栈打印出来。<br>\n[root@localhost ~]# dirs<br>\n/usr/share/X11<br>\n【附】：目录栈通过 pushd popd 来操作。</p>\n<h2 id=\"系统在多任务运行时不重启机器的条件下把所有正在运行的进程移除\"><a class=\"markdownIt-Anchor\" href=\"#系统在多任务运行时不重启机器的条件下把所有正在运行的进程移除\">#</a> 系统在多任务运行时不重启机器的条件下，把所有正在运行的进程移除？</h2>\n<p>使用 linux 命令 ’disown -r ’可以将所有正在运行的进程移除。</p>\n<h2 id=\"bash-shell-中的hash-命令有什么作用\"><a class=\"markdownIt-Anchor\" href=\"#bash-shell-中的hash-命令有什么作用\">#</a> bash shell 中的 hash 命令有什么作用？</h2>\n<p>linux 命令’hash’管理着一个内置的哈希表，记录了已执行过的命令的完整路径，用该命令可以打印出你所使用过的命令以及执行的次数。<br>\n[root@localhost ~]# hash<br>\nhits command<br>\n2 /bin/ls<br>\n2 /bin/su</p>\n<h2 id=\"哪一个bash内置命令能够进行数学运算\"><a class=\"markdownIt-Anchor\" href=\"#哪一个bash内置命令能够进行数学运算\">#</a> 哪一个 bash 内置命令能够进行数学运算。</h2>\n<p>bash shell 的内置命令 let 可以进行整型数的数学运算。<br>\n#! /bin/bash<br>\n…<br>\n…<br>\nlet c=a+b<br>\n…<br>\n…</p>\n<h2 id=\"一页一页地查看一个大文件的内容\"><a class=\"markdownIt-Anchor\" href=\"#一页一页地查看一个大文件的内容\">#</a> 一页一页地查看一个大文件的内容</h2>\n<p>通过管道将命令”cat file_name.txt” 和 ’more’ 连接在一起可以实现这个需要.<br>\n[root@localhost ~]# cat file_name.txt | more</p>\n<h2 id=\"数据字典属于哪一个用户的\"><a class=\"markdownIt-Anchor\" href=\"#数据字典属于哪一个用户的\">#</a> 数据字典属于哪一个用户的？</h2>\n<p>数据字典是属于’SYS’用户的，用户‘SYS’ 和 ’SYSEM’是由系统默认自动创建的</p>\n<h2 id=\"查看一个linux命令的概要与用法假设你在bin目录中偶然看到一个你从没见过的的命令怎样才能知道它的作用和用法呢\"><a class=\"markdownIt-Anchor\" href=\"#查看一个linux命令的概要与用法假设你在bin目录中偶然看到一个你从没见过的的命令怎样才能知道它的作用和用法呢\">#</a> 查看一个 linux 命令的概要与用法？假设你在 /bin 目录中偶然看到一个你从没见过的的命令，怎样才能知道它的作用和用法呢？</h2>\n<p>使用命令 whatis 可以先出显示出这个命令的用法简要，比如，你可以使用 whatis zcat 去查看‘zcat’的介绍以及使用简要。<br>\n[root@localhost ~]# whatis zcat<br>\nzcat [gzip] (1) – compress or expand files</p>\n<h2 id=\"查看自己文件系统的磁盘空间配额呢\"><a class=\"markdownIt-Anchor\" href=\"#查看自己文件系统的磁盘空间配额呢\">#</a> 查看自己文件系统的磁盘空间配额呢？</h2>\n<p>使用命令 repquota 能够显示出一个文件系统的配额信息<br>\n【附】只有 root 用户才能够查看其它用户的配额。</p>\n<h2 id=\"root用户\"><a class=\"markdownIt-Anchor\" href=\"#root用户\">#</a> root 用户</h2>\n<p>root 存在于 UNIX 系统（如 AIX、BSD 等）和类 UNIX 系统（如 Debian、Redhat、Ubuntu 等版本的 Linux 系统以及 Android 系统）中，超级用户一般命名为 root，相当于 Windows 系统中的 system 用户。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/20/SQL%20interview%20summary/",
            "url": "http://example.com/2021/01/20/SQL%20interview%20summary/",
            "title": "SQL interview summary",
            "date_published": "2021-01-20T07:50:35.342Z",
            "content_html": "<h2 id=\"一-第一-第二-第三范式之间的理解\"><a class=\"markdownIt-Anchor\" href=\"#一-第一-第二-第三范式之间的理解\">#</a> 一、第一、第二、第三范式之间的理解</h2>\n<p>第一范式（1NF）无重复的列<br>\n　　所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。简而言之，第一范式就是无重复的列。</p>\n<a id=\"more\"></a>\n<p>1NF 的定义为：符合 1NF 的关系中的每个属性都不可再分<br>\n说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</p>\n<p>第二范式（2NF）属性完全依赖于主键<br>\n　　第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。例如员工信息表中加上了员工编号（emp_id）列，因为每个员工的员工编号是惟一的，因此每个员工可以被惟一区分。这个惟一属性列被称为主关键字或主键、主码。<br>\n第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是属性完全依赖于主键。</p>\n<p>第三范式（3NF）<br>\n　　满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在的员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性。 也就是说， 如果存在非主属性对于码的传递函数依赖，则不符合 3NF 的要求。</p>\n<p>选择数据库<br>\n mysql -D 库名 -u root -p</p>\n<p>创建数据库表<br>\n create table + 表名</p>\n<p>插入数据<br>\n insert into students values (NULL,“王刚”,“男”,20,“12345678”);</p>\n<p>查询数据<br>\n select name,age from students;<br>\nselect * from students;<br>\nselect * from students where sex=“女”;</p>\n<p>修改数据<br>\n update students set tel = 123 where id = 2;<br>\nupdate students set id = 1 where id = 1;<br>\nupdate students set id = 1 where id = 2;</p>\n<p>删除数据：<br>\ndelete from students where id=1;</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/17/Java%20interview%20summary/",
            "url": "http://example.com/2021/01/17/Java%20interview%20summary/",
            "title": "Java interview summary",
            "date_published": "2021-01-17T10:21:37.380Z",
            "content_html": "<h2 id=\"jre与jdk\"><a class=\"markdownIt-Anchor\" href=\"#jre与jdk\">#</a> JRE 与 JDK</h2>\n<p>JRE： Java Runtime Environment<br>\nJDK：Java Development Kit<br>\nJRE 是 java 运行时环境，包含了 java 虚拟机，java 基础类库。是使用 java 语言编写的程序运行所需要的软件环境，是提供给想运行 java 程序的用户使用的。<br>\nJDK 是 java 开发工具包，</p>\n<a id=\"more\"></a>\n<p>是程序员使用 java 语言编写 java 程序所需的开发工具包，是提供给程序员使用的。JDK 包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具：jconsole，jvisualvm 等工具软件，还包含了 java 程序编写所需的文档和 demo 例子程序。如果你需要运行 java 程序，只需安装 JRE 就可以了。如果你需要编写 java 程序，需要安装 JDK。</p>\n<h2 id=\"形参和实参\"><a class=\"markdownIt-Anchor\" href=\"#形参和实参\">#</a> 形参和实参</h2>\n<p>形参：全称为 &quot;形式参数&quot; 是在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传如的参数.<br>\n 实参：全称为 &quot;实际参数&quot; 是在调用时传递个该函数的参数.</p>\n<h2 id=\"java四类八种基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#java四类八种基本数据类型\">#</a> java 四类八种基本数据类型</h2>\n<p>第一类：整型 byte short int long<br>\n 第二类：浮点型 float double<br>\n 第三类：逻辑型 boolean (它只有两个值可取 true false)<br>\n 第四类：字符型 char<br>\nbyte (位)                     占用 1 字节<br>\n short (短整数)             占用 2 字节<br>\n int (整数)                    占用 4 字节<br>\n long (长整数)              占用 8 字节<br>\n float (单精度)              占用 4 字节<br>\n double (双精度)          占用 8 字节<br>\n char (字符)                 占用 2 字节<br>\n boolean (布尔值)        占用 1/8 字节</p>\n<h2 id=\"java创建对象的四种方式\"><a class=\"markdownIt-Anchor\" href=\"#java创建对象的四种方式\">#</a> java 创建对象的四种方式？</h2>\n<p>使用 new 创建对象、运用反射手段、调用对象的 clone () 方法、运用反序列化手段</p>\n<h2 id=\"面向对象的特征有哪些方面\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的特征有哪些方面\">#</a> 面向对象的特征有哪些方面？</h2>\n<p>①　封装<br>\n最常见的是把属性私有化封装在一个类里面，只能通过方法去访问<br>\n②　继承<br>\n子类继承父类，从而继承了父类的方法和属性<br>\n③　抽象<br>\n比如一个英雄类，抽象出了 name,hp 这些属性，使得开发过程中更加易于理解<br>\n④　多态<br>\n多态分操作符的多态和类的多态。 类的多态指父类引用指向子类对象，并且有继承，有重写。</p>\n<h2 id=\"重载和重写的区别\"><a class=\"markdownIt-Anchor\" href=\"#重载和重写的区别\">#</a> 重载和重写的区别？</h2>\n<p>重载指的是在同一个类里面，方法名一样，但是参数不一样<br>\n重写指的是子类继承了父类的某个方法后，重新又写了一遍</p>\n<h2 id=\"final修饰类\"><a class=\"markdownIt-Anchor\" href=\"#final修饰类\">#</a> final 修饰类:</h2>\n<p>final 修饰类即表示此类已经是 “最后的、最终的” 含义。因此，用 final 修饰的类不能被继承，即不能拥有自己的子类。</p>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<p>队列（queue）是一种采用先进先出 (FIFO) 策略的抽象数据结构，它的想法来自于生活中排队的策略。顾客在付款结账的时候，按照到来的先后顺序排队结账，先来的顾客先结账，后来的顾客后结账。</p>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h2>\n<p>栈是一种操作受限的线性表只允许从一端插入和删除数据。栈有两种存储方式，即线性存储和链接存储（链表）。栈的一个最重要的特征就是栈的插入和删除只能在栈顶进行，所以每次删除的元素都是最后进栈的元素，故栈也被称为后进先出（LIFO）表。每个栈都有一个栈顶指针，它初始值为 - 1，且总是指向最后一个入栈的元素，栈有两种处理方式，即进栈（push）和出栈（pop），因为在进栈只需要移动一个变量存储空间，所以它的时间复杂度为 O (1)，但是对于出栈分两种情况，栈未满时，时间复杂度也为 O (1)，但是当栈满时，需要重新分配内存，并移动栈内所有数据，所以此时的时间复杂度为 O (n)。以下举例栈结构的两种实现方式，线性存储和链接存储。</p>\n<h2 id=\"多继承与多态\"><a class=\"markdownIt-Anchor\" href=\"#多继承与多态\">#</a> 多继承与多态</h2>\n<p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。<br>\n多继承可以看作是单继承的扩展。所谓多继承是指派生类具有多个基类，派生类与每个基类之间的关系仍可看作是一个单继承。<br>\n多态允许将子类类型的指针赋值给父类类型的指针。</p>\n<h2 id=\"虚函数与纯虚函数\"><a class=\"markdownIt-Anchor\" href=\"#虚函数与纯虚函数\">#</a> 虚函数与纯虚函数</h2>\n<p>虚函数是指一个类中你希望重载的成员函数，当你用一个基类指针或引用指向一个继承类对象的时候，你调用一个虚函数，实际调用的是继承类的版本。<br>\n有纯虚函数的类是抽象类，不能生成对象，只能派生。他派生的类的纯虚函数没有被改写，那么，它的派生类还是个抽象类。<br>\n定义纯虚函数就是为了让基类不可实例化化，<br>\n 因为实例化这样的抽象数据结构本身并没有意义.</p>\n<h2 id=\"序列化和反序列化的定义\"><a class=\"markdownIt-Anchor\" href=\"#序列化和反序列化的定义\">#</a> 序列化和反序列化的定义：</h2>\n<p>(1) Java 序列化就是指把 Java 对象转换为字节序列的过程<br>\n Java 反序列化就是指把字节序列恢复为 Java 对象的过程。<br>\n(2) 序列化最重要的作用：在传递和保存对象时。保证对象的完整性和可传递性。对象转换为有序字节流，以便在网络上传输或者保存在本地文件中。<br>\n反序列化的最重要的作用：根据字节流中保存的对象状态及描述信息，通过反序列化重建对象。<br>\n总结：核心作用就是对象状态的保存和重建。（整个过程核心点就是字节流中所保存的对象状态及描述信息）</p>\n<h2 id=\"二叉树的常用性质\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的常用性质\">#</a> 二叉树的常用性质</h2>\n<h3 id=\"常用性质\"><a class=\"markdownIt-Anchor\" href=\"#常用性质\">#</a> 常用性质</h3>\n<p>&lt;1&gt;. 在二叉树的第 i 层上最多有 2^(i-1) 个节点 。（i&gt;=1）<br>\n&lt;2&gt;. 二叉树中如果深度为 k (有 k 层), 那么最多有 2^k-1 个节点。(k&gt;=1）<br>\n&lt;3&gt;. 若二叉树按照从上到下从左到右依次编号，则若某节点编号为 k，则其左右子树根节点编号分别为 2k 和 2k+1;<br>\n&lt;4&gt;. 二叉树分类：满二叉树，完全二叉树<br>\n满二叉树：高度为 h，由 2^h-1 个节点构成的二叉树称为满二叉树。</p>\n<h3 id=\"遍历\"><a class=\"markdownIt-Anchor\" href=\"#遍历\">#</a> 遍历</h3>\n<p>先序遍历：按照根节点 -&gt; 左子树 -&gt; 右子树的顺序访问二叉树<br>\n先序遍历：（1）访问根节点；（2）采用先序递归遍历左子树；（3）采用先序递归遍历右子树；<br>\n中序遍历：按照左子树 -&gt; 根节点 -&gt; 右子树的顺序访问<br>\n中序遍历：（1）采用中序遍历左子树；（2）访问根节点；（3）采用中序遍历右子树<br>\n后序遍历：按照左子树 -&gt; 右子树–&gt; 根节点的顺序访问<br>\n后序遍历：（1）采用后序递归遍历左子树；（2）采用后序递归遍历右子树；（3）访问根节点；</p>\n<h3 id=\"treenode-a-new-treenode1\"><a class=\"markdownIt-Anchor\" href=\"#treenode-a-new-treenode1\">#</a> TreeNode a = new TreeNode(1);</h3>\n<pre><code>    TreeNode b = new TreeNode(2);\n    TreeNode c = new TreeNode(3);\n    TreeNode d = new TreeNode(4);\n    TreeNode e = new TreeNode(5);\n    TreeNode f = new TreeNode(6);\n    TreeNode g = new TreeNode(7);\n    a.left = b;\n    a.right = c;\n    b.right = d;\n    c.left = e;\n    c.right = f;\n    f.left = g;\n    System.out.print(&quot;recursivePreOrder: &quot;);\n    recursivePreOrder(a);\n    System.out.print('\\n' + &quot;recursiveInOrder: &quot;);\n    recursiveInOrder(a);----------\n</code></pre>\n<p>List&lt;List<Integer>&gt; lists = recursiveLevelOrderBottom(a);<br>\nfor (List<Integer> list : lists) {<br>\nfor (int p : list) {<br>\nSystem.out.print(p + &quot; &quot;);           }<br>\nSystem.out.println();}}<br>\npublic static void visit(TreeNode p) {<br>\nSystem.out.print(p.val + &quot; &quot;);    }</p>\n<h3 id=\"递归的先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#递归的先序遍历\">#</a> 递归的先序遍历 **********</h3>\n<pre><code>public static void recursivePreOrder(TreeNode p) &#123;\n    if (p == null) return;\n    visit(p);\n    recursivePreOrder(p.left);\n    recursivePreOrder(p.right);   &#125;\n</code></pre>\n<h3 id=\"递归的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#递归的中序遍历\">#</a> 递归的中序遍历 **********</h3>\n<pre><code>public static void recursiveInOrder(TreeNode p) &#123;\n    if (p == null) return;\n    recursiveInOrder(p.left);\n    visit(p);\n    recursiveInOrder(p.right);    &#125;\n</code></pre>\n<h3 id=\"递归的后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#递归的后序遍历\">#</a> 递归的后序遍历 **********</h3>\n<pre><code>public static void recursivePostOrder(TreeNode p) &#123;\n    if (p == null) return;\n    recursivePostOrder(p.left);\n    recursivePostOrder(p.right);\n    visit(p);    &#125;\n</code></pre>\n<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\">#</a> 排序：</h2>\n<h3 id=\"冒泡排序稳定时间复杂度onon2\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序稳定时间复杂度onon2\">#</a> 冒泡排序（稳定）：时间复杂度 O (n)–O (n^2)</h3>\n<h3 id=\"快速排序不时间复杂度onlgnon2-通过一趟排序将要排序的数据分割成独立的两部分其中一部分的所有数据都比另外一部分的所有数据都要小然后再按此方法对这两部分数据分别进行快速排序整个排序过程可以递归进行以此达到整个数据变成有序序列\"><a class=\"markdownIt-Anchor\" href=\"#快速排序不时间复杂度onlgnon2-通过一趟排序将要排序的数据分割成独立的两部分其中一部分的所有数据都比另外一部分的所有数据都要小然后再按此方法对这两部分数据分别进行快速排序整个排序过程可以递归进行以此达到整个数据变成有序序列\">#</a> 快速排序（不）：时间复杂度 O (nlgn)–O (n^2)。通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</h3>\n<p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\n<h3 id=\"选择排序不时间复杂度on2-它的工作原理是每一次从待排序的数据元素中选出最小或最大的一个元素存放在序列的起始位置直到全部待排序的数据元素排完-选择排序是不稳定的排序方法比如序列5-5-3第一次就将第一个5与3交换导致第一个5挪动到第二个5后面\"><a class=\"markdownIt-Anchor\" href=\"#选择排序不时间复杂度on2-它的工作原理是每一次从待排序的数据元素中选出最小或最大的一个元素存放在序列的起始位置直到全部待排序的数据元素排完-选择排序是不稳定的排序方法比如序列5-5-3第一次就将第一个5与3交换导致第一个5挪动到第二个5后面\">#</a> 选择排序（不）：时间复杂度 O (n^2)。它的工作原理是每一次从待排序的数据元素中选出最小 (或最大) 的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法 (比如序列 [5， 5， 3] 第一次就将第一个 [5] 与 [3] 交换，导致第一个 5 挪动到第二个 5 后面)。</h3>\n<h3 id=\"插入排序稳定入排序的基本操作就是将一个数据插入到已经排好序的有序数据中从而得到一个新的-个数加一的有序数据算法适用于少量数据的排序时间复杂度为onon2-是稳定的排序方法\"><a class=\"markdownIt-Anchor\" href=\"#插入排序稳定入排序的基本操作就是将一个数据插入到已经排好序的有序数据中从而得到一个新的-个数加一的有序数据算法适用于少量数据的排序时间复杂度为onon2-是稳定的排序方法\">#</a> 插入排序（稳定）：入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为 O (n)–O (n^2)。是稳定的排序方法。</h3>\n<p>算法描述<br>\n⒈ 从第一个元素开始，该元素可以认为已经被排序<br>\n⒉ 取出下一个元素，在已经排序的元素序列中从后向前扫描<br>\n⒊ 如果该元素（已排序）大于新元素，将该元素移到下一位置<br>\n⒋ 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置<br>\n⒌ 将新元素插入到下一位置中<br>\n⒍ 重复步骤 2</p>\n<p>如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。该算法可以认为是插入排序的一个变种，称为二分查找排序。</p>\n<h3 id=\"希尔排序不间隔为增量跳跃取数据on125\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序不间隔为增量跳跃取数据on125\">#</a> 希尔排序（不）：间隔为增量跳跃取数据–O (n^1.25)</h3>\n<h2 id=\"哈希查找\"><a class=\"markdownIt-Anchor\" href=\"#哈希查找\">#</a> 哈希查找</h2>\n<p>step1 取数据元素的关键字 key，计算其哈希函数值。若该地址对应的存储<br>\n空间还没有被占用，则将该元素存入；否则执行 step2 解决冲突。<br>\nstep2 根据选择的冲突处理方法，计算关键字 key 的下一个存储地址。若下一个存储地址仍被占用，则继续执行 step2，直到找到能用的存储地址为止。</p>\n<p>哈希查找步骤为:<br>\n 设哈希表为 HST [0~M-1]，哈希函数取 H (key)，解决冲突的方法为 R (x);<br>\nStep1 对给定 k 值，计算哈希地址 Di=H (k); 若 HST 为空，则查找失败；<br>\n 若 HST=k，则查找成功；否则，执行 step2 (处理冲突)。<br>\nStep2 重复计算处理冲突的下一个存储地址 Dk=R (Dk-1)，直到 HST [Dk] 为<br>\n空，或 HST [Dk]=k 为止。若 HST [Dk]=K，则查找成功，否则查找失败。</p>\n<p>哈希查找的本质是先将数据映射成它的哈希值。哈希查找的核心是构造一个哈希函数，它将原来直观、整洁的数据映射为看上去似乎是随机的一些整数。</p>\n<p>哈希查找的产生有这样一种背景–有些数据本身是无法排序的 (如图像)，有些数据是很难比较的 (如图像)。如果数据本身是无法排序的，就不能对它们进行比较查找。如果数据是很难比较的，即使采用折半查找，要比较的次数也是非常多的。因此，哈希查找并不查找数据本身，而是先将数据映射为一个整数 (它的哈希值)，并将哈希值相同的数据存放在同一个位置一即以哈希值为索引构造一个数组。</p>\n<p>在哈希查找的过程中，只需先将要查找的数据映射为它的哈希值，然后查找具有这个哈希值的数据，这就大大减少了查找次数。如果构造哈希函数的参数经过精心设计，内存空间也足以存放哈希表，查找一个数据元素所需的比较次数基本上就接近于一次。</p>\n<h2 id=\"算法-最短路径\"><a class=\"markdownIt-Anchor\" href=\"#算法-最短路径\">#</a> 算法 最短路径</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY2hpbmF1bml4Lm5ldC91aWQtMjY1NDgyMzctaWQtMzgzNDUxNC5odG1s\">http://blog.chinaunix.net/uid-26548237-id-3834514.html</span></p>\n<h2 id=\"银行家算法\"><a class=\"markdownIt-Anchor\" href=\"#银行家算法\">#</a> 银行家算法</h2>\n<p>银行家算法是一种最有代表性的避免死锁的算法。<br>\n要解释银行家算法，必须先解释操作系统安全状态和不安全状态。<br>\n安全状态：如果存在一个由系统中所有进程构成的安全序列 P1，…，Pn，则系统处于安全状态。安全状态一定是没有死锁发生。<br>\n不安全状态：不存在一个安全序列。不安全状态不一定导致死锁。<br>\n算法思想：<br>\n操作系统按照银行家制定的规则为进程分配资源，当进程首次申请资源时，要测试该进程对资源的最大需求量，如果系统现存的资源可以满足它的最大需求量则按当前的申请量分配资源，否则就推迟分配。当进程在执行中继续申请资源时，先测试该进程已占用的资源数与本次申请的资源数之和是否超过了该进程对资源的最大需求量。若超过则拒绝分配资源，若没有超过则再测试系统现存的资源能否满足该进程尚需的最大资源量，若能满足则按当前的申请量分配资源，否则也要推迟分配。</p>\n<h2 id=\"dao层到底是做什么的service和dao层有什么关系说得具体一些\"><a class=\"markdownIt-Anchor\" href=\"#dao层到底是做什么的service和dao层有什么关系说得具体一些\">#</a> Dao 层到底是做什么的？service 和 Dao 层有什么关系？说得具体一些。</h2>\n<p>Dao 层是和数据库打交道的，Service 层会封装具体的业务。有点抽象…<br>\ndao 封装了用户的增删改查。而业务上要求批量删除用户，Service 就可以封装出一个批量删除用户的功能，但是实现只是循环调用 dao 的单个删除<br>\n Service 封装具体的业务，dao 只是封装基本的数据库元操作。这样 dao 就可以做到尽可能的 “轻”，而 Service 又避免了与具体数据库的关联。当系统要迁移到其他数据库的时候，只需要实现一个相应的 dao 就可以了！</p>\n<h2 id=\"java-中-io-流分为几种\"><a class=\"markdownIt-Anchor\" href=\"#java-中-io-流分为几种\">#</a> java 中 IO 流分为几种？</h2>\n<p>按功能来分：输入流（input）、输出流（output）。<br>\n按类型来分：字节流和字符流。<br>\n字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p>\n<p>访问修饰符 public、private、protected、default 在应用设计中的作用<br>\n public           所有类可见<br>\n protected      \t 本包和所有子类都可见（本包中的子类非子类均可访问，不同包中的子类可以访问，不是子类不能访问）<br>\ndefault          本包可见（即默认的形式）（本包中的子类非子类均可访问，不同包中的类及子类均不能访问）<br>\npriavte          本类可见</p>\n<p>public： Java 语言中访问限制最宽的修饰符，一般称之为 “公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包（package）访问。<br>\nprivate: Java 语言中对访问权限限制的最窄的修饰符，一般称之为 “私有的”。被其修饰的类、属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。<br>\nprotect: 介于 public 和 private 之间的一种访问修饰符，一般称之为 “保护形”。被其修饰的类、属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。<br>\ndefault：即不加任何访问修饰符，通常称为 &quot;默认访问模式&quot;。该模式下，只允许在同一个包中进行访问。</p>\n<h2 id=\"和的区别\"><a class=\"markdownIt-Anchor\" href=\"#和的区别\">#</a> &amp; 和 &amp;&amp; 的区别？</h2>\n<p>&amp; 有两个作用，分别是 位与 和 逻辑与<br>\n &amp;&amp; 就是逻辑与<br>\n作为逻辑与， &amp; 和 &amp;&amp; 分别表示长路与和短路与<br>\n长路与 两侧，都会被运算<br>\n短路与 只要第一个是 false，第二个就不进行运算了</p>\n<h2 id=\"常见的集合有哪些\"><a class=\"markdownIt-Anchor\" href=\"#常见的集合有哪些\">#</a> 常见的集合有哪些？</h2>\n<p>Map 接口和 Collection 接口是所有集合框架的父接口<br>\n Collection 接口的子接口包括：Set 接口和 List 接口<br>\n Map（保存数据的方式是键值对）接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap 以及 Properties 等<br>\n Set（是无序的，不可以重复）接口的实现类主要有：HashSet、TreeSet、LinkedHashSet 等<br>\n List（是有顺序的，并且可以重复）接口的实现类主要有：ArrayList、LinkedList、Stack 以及 Vector 等</p>\n<h2 id=\"哪些集合类是线程安全的\"><a class=\"markdownIt-Anchor\" href=\"#哪些集合类是线程安全的\">#</a> 哪些集合类是线程安全的？</h2>\n<p>vector：就比 arraylist 多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在 web 应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。<br>\nstatck：堆栈类，先进后出。<br>\nhashtable：就比 hashmap 多了个线程安全。<br>\nenumeration：枚举，相当于迭代器。</p>\n<h2 id=\"抽象类和接口的区别\"><a class=\"markdownIt-Anchor\" href=\"#抽象类和接口的区别\">#</a> 抽象类和接口的区别？</h2>\n<p>使用方式： 抽象类只能够通过继承被使用；接口必须通过实现被使用<br>\n实现方法：抽象类不仅可以提供抽象方法，也可以提供实现方法；接口只能提供抽象方法，不能提供实现方法。 但是在 JAVA8 版本开始，接口可以提供实现方法了，前提是要在方法前加一个 default 修饰符<br>\n接口可以可继承接口（比如 List 就继承了接口 Collection）<br>\n抽象类可以实现 (implements) 接口（比如 MouseAdapter 鼠标监听适配器 是一个抽象类，并且实现了 MouseListener 接口）<br>\n抽象类可以继承实体类（所有抽象类，都继承了 Object）</p>\n<h2 id=\"hashmap与hashtable的区别\"><a class=\"markdownIt-Anchor\" href=\"#hashmap与hashtable的区别\">#</a> HashMap 与 HashTable 的区别？</h2>\n<p>区别 1： HashMap 可以存放 null      Hashtable 不能存放 null<br>\n 区别 2：HashMap 不是线程安全的类   Hashtable 是线程安全的类</p>\n<h2 id=\"array-和-arraylist-有何区别\"><a class=\"markdownIt-Anchor\" href=\"#array-和-arraylist-有何区别\">#</a> Array 和 ArrayList 有何区别？</h2>\n<p>Array 可以容纳基本类型和对象，而 ArrayList 只能容纳对象。<br>\nArray 是指定大小的，而 ArrayList 初始大小是固定的。<br>\nArray 没有提供 ArrayList 那么多功能，比如 addAll、removeAll 和 iterator 等。</p>\n<h2 id=\"数组与链表的优缺点和区别\"><a class=\"markdownIt-Anchor\" href=\"#数组与链表的优缺点和区别\">#</a> 数组与链表的优缺点和区别</h2>\n<p>1、存取方式上，数组可以顺序存取或者随机存取，而链表只能顺序存取；　<br>\n2、存储位置上，数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；　<br>\n3、存储空间上，链表由于带有指针域，存储密度不如数组大；　<br>\n4、按序号查找时，数组可以随机访问，时间复杂度为 O (1)，而链表不支持随机访问，平均需要 O (n)；　<br>\n5、按值查找时，若数组无序，数组和链表时间复杂度均为 O (1)，但是当数组有序时，可以采用折半查找将时间复杂度降为 O (logn)；　<br>\n6、插入和删除时，数组平均需要移动 n/2 个元素，而链表只需修改指针即可；　<br>\n7、空间分配方面：<br>\n　　数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且如果内存中没有更大块连续存储空间将导致分配失败；<br>\n　　链表存储的节点空间只在需要的时候申请分配，只要内存中有空间就可以分配，操作比较灵活高效；</p>\n<h2 id=\"如何实现数组和-list-之间的转换\"><a class=\"markdownIt-Anchor\" href=\"#如何实现数组和-list-之间的转换\">#</a> 如何实现数组和 List 之间的转换？</h2>\n<p>List 转换成为数组：调用 ArrayList 的 toArray 方法。<br>\n数组转换成为 List：调用 Arrays 的 asList 方法。</p>\n<h2 id=\"4collection-和-collections的区别\"><a class=\"markdownIt-Anchor\" href=\"#4collection-和-collections的区别\">#</a> 4.Collection 和 Collections 的区别？</h2>\n<p>Collection 是接口，是 List 和 Set 的父接口<br>\n Collections 是工具类，提供了排序，混淆等等很多实用方法</p>\n<h2 id=\"泛型的存在是用来解决什么问题\"><a class=\"markdownIt-Anchor\" href=\"#泛型的存在是用来解决什么问题\">#</a> 泛型的存在是用来解决什么问题。</h2>\n<p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数，泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，以提高代码的重用率</p>\n<h2 id=\"nio和-bio-的区别是啥谈谈-reactor-模型\"><a class=\"markdownIt-Anchor\" href=\"#nio和-bio-的区别是啥谈谈-reactor-模型\">#</a> nio 和 bio 的区别是啥，谈谈 reactor 模型。</h2>\n<p>IO (BIO) 是面向流的，NIO 是面向缓冲区的<br>\n BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。<br>\nNIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</p>\n<h2 id=\"mysql-中-in-和-exists-区别\"><a class=\"markdownIt-Anchor\" href=\"#mysql-中-in-和-exists-区别\">#</a> mysql 中 in 和 exists 区别。</h2>\n<p>mysql 中的 in 语句是把外表和内表作 hash 连接，而 exists 语句是对外表作 loop 循环，每次 loop 循环再对内表进行查询。</p>\n<h2 id=\"sleep-和-wait-有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#sleep-和-wait-有什么区别\">#</a> sleep () 和 wait () 有什么区别？</h2>\n<p>sleep () 和 wait () 都是线程暂停执行的方法。<br>\n1、这两个方法来自不同的类分别是 Thread 和 Object，sleep 方法属于 Thread 类中的静态方法，wait 属于 Object 的成员方法。<br>\n2、sleep () 是线程类（Thread）的方法，不涉及线程通信，调用时会暂停此线程指定的时间，但监控依然保持，不会释放对象锁，到时间自动恢复；wait () 是 Object 的方法，用于线程间的通信，调用时会放弃对象锁，进入等待队列，待调用 notify ()/notifyAll () 唤醒指定的线程或者所有线程，才进入对象锁定池准备获得对象锁进入运行状态。</p>\n<h2 id=\"并行和并发有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#并行和并发有什么区别\">#</a> 并行和并发有什么区别？</h2>\n<p>并发：如果系统只有一个 cpu，把 CPU 运行时间划分成若干个时间段，再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。<br>\n并行：当系统有一个以上 CPU 时，则线程的操作有可能非并发。当一个 CPU 执行一个线程时，另一个 CPU 可以执行另一个线程，两个线程互不抢占 CPU 资源，可以同时进行，这种方式我们称之为并行 (Parallel)。</p>\n<h2 id=\"线程和进程的区别\"><a class=\"markdownIt-Anchor\" href=\"#线程和进程的区别\">#</a> . 线程和进程的区别？</h2>\n<p>进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是 cpu 调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。</p>\n<h2 id=\"runnable-和-callable-有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#runnable-和-callable-有什么区别\">#</a> runnable 和 callable 有什么区别？</h2>\n<p>Runnable 接口中的 run () 方法的返回值是 void，它做的事情只是纯粹地去执行 run () 方法中的代码而已；<br>\nCallable 接口中的 call () 方法是有返回值的，是一个泛型，和 Future、FutureTask 配合可以用来获取异步执行的结果。</p>\n<h2 id=\"osi七层模型\"><a class=\"markdownIt-Anchor\" href=\"#osi七层模型\">#</a> OSI 七层模型</h2>\n<p>物理层<br>\n在 OSI 参考模型中，物理层（Physical Layer）是参考模型的最低层，也是 OSI 模型的第一层。<br>\n物理层的主要功能是：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。<br>\n数据链路层<br>\n数据链路层（Data Link Layer）是 OSI 模型的第二层，负责建立和管理节点间的链路。该层的主要功能是：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。<br>\n网络层<br>\n网络层（Network Layer）是 OSI 模型的第三层，它是 OSI 参考模型中最复杂的一层，也是通信子网的最高一层。它在下两层的基础上向资源子网提供服务。其主要任务是：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。该层控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。<br>\n传输层<br>\n OSI 下 3 层的主要任务是数据通信，上 3 层的任务是数据处理。而传输层（Transport Layer）是 OSI 模型的第 4 层。因此该层是通信子网和资源子网的接口和桥梁，起到承上启下的作用。<br>\n该层的主要任务是：向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输。<br>\n会话层<br>\n会话层（Session Layer）是 OSI 模型的第 5 层，是用户应用程序和网络之间的接口，主要任务是：向两个实体的表示层提供建立和使用连接的方法。<br>\n表示层<br>\n表示层（Presentation Layer）是 OSI 模型的第六层，它对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层。其主要功能是 “处理用户信息的表示问题，如编码、数据格式转换和加密解密” 等。<br>\n应用层<br>\n应用层（Application Layer）是 OSI 参考模型的最高层，它是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。<br>\nOSI7 层模型的小结<br>\n在 7 层模型中，每一层都提供一个特殊的网络功能。从网络功能的角度观察：下面 4 层（物理层、数据链路层、网络层和传输层）主要提供数据传输和交换功能，即以节点到节点之间的通信为主；第 4 层作为上下两部分的桥梁，是整个网络体系结构中最关键的部分；而上 3 层（会话层、表示层和应用层）则以提供用户与应用程序之间的信息和数据处理功能为主。简言之，下 4 层主要完成通信子网的功能，上 3 层主要完成资源子网的功能。</p>\n<h2 id=\"tcpip分层模型\"><a class=\"markdownIt-Anchor\" href=\"#tcpip分层模型\">#</a> TCP/IP 分层模型</h2>\n<p>第一层：网络接口层<br>\n　　包括用于协作 IP 数据在已有网络介质上传输的协议。实际上 TCP/IP 标准并不定义与 ISO 数据链路层和物理层相对应的功能。相反，它定义像地址解析协议 (Address Resolution Protocol,ARP) 这样的协议，提供 TCP/IP 协议的数据结构和实际物理硬件之间的接口。<br>\n　　第二层：网间层<br>\n　　对应于 OSI 七层参考模型的网络层。本层包含 IP 协议、RIP 协议 (Routing Information Protocol，路由信息协议)，负责数据的包装、寻址和路由。同时还包含网间控制报文协议 (Internet Control Message Protocol,ICMP) 用来提供网络诊断信息。<br>\n　　第三层：传输层<br>\n　　对应于 OSI 七层参考模型的传输层，它提供两种端到端的通信服务。其中 TCP 协议 (Transmission Control Protocol) 提供可靠的数据流运输服务，UDP 协议 (Use Datagram Protocol) 提供不可靠的用户数据报服务。<br>\n　　第四层：应用层<br>\n　　对应于 OSI 七层参考模型的应用层和表达层。因特网的应用层协议包括 Finger、Whois、FTP (文件传输协议)、Gopher、HTTP (超文本传输协议)、Telent (远程终端协议)、SMTP (简单邮件传送协议)、IRC (因特网中继会话)、NNTP（网络新闻传输协议）等，这也是本书将要讨论的重点。</p>\n<h2 id=\"arraylist和linkedlist的区别\"><a class=\"markdownIt-Anchor\" href=\"#arraylist和linkedlist的区别\">#</a> ArrayList 和 LinkedList 的区别</h2>\n<p>ArrayList 是数组结构，所以定位很快，但是插入和删除很慢<br>\n LinkedList 是双向链表结构，所以插入和删除很快，但是定位很慢</p>\n<h2 id=\"equals和的区别\"><a class=\"markdownIt-Anchor\" href=\"#equals和的区别\">#</a> equals 和 == 的区别？</h2>\n<p>== 是判断两个变量或实例是不是指向同一个内存空间，equals 是判断两个变量或实例所指向的内存空间的值是不是相同<br>\n == 是指对内存地址进行比较 ， equals () 是对字符串的内容进行比较<br>\n == 指引用是否相同， equals () 指的是值是否相同</p>\n<h2 id=\"try-里有一个return语句那么紧跟在这个try后的finally-里的code会不会被执行什么时候被执行在return前还是后\"><a class=\"markdownIt-Anchor\" href=\"#try-里有一个return语句那么紧跟在这个try后的finally-里的code会不会被执行什么时候被执行在return前还是后\">#</a> try {} 里有一个 return 语句，那么紧跟在这个 try 后的 finally {} 里的 code 会不会被执行，什么时候被执行，在 return 前还是后？</h2>\n<p>try 里的 return 和 finally 里的 return 都会执行，但是当前方法只会采纳 finally 中 return 的值。无论 try、catch 块中执行怎样的代码，出现怎样的情况，异常处理的 finally 块总会被执行。</p>\n<h2 id=\"for循环中的return-break-continue的区别\"><a class=\"markdownIt-Anchor\" href=\"#for循环中的return-break-continue的区别\">#</a> for 循环中的 return break continue 的区别？</h2>\n<p>执行 return 后，不仅结束了该循环，当前函数也结束了，后面的语句不再执行；break 会终止并跳出它所在的循环；continue 是跳出本次循环，进入下一次循环的入口处 执行下一次循环</p>\n<h2 id=\"error和exception有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#error和exception有什么区别\">#</a> Error 和 Exception 有什么区别？</h2>\n<p>Error 和 Exception 都实现了 Throwable 接口<br>\n Error 指的是 JVM 层面的错误，比如内存不足 OutOfMemoryError<br>\nException 指的是代码逻辑的异常，比如下标越界 OutOfIndexException</p>\n<h2 id=\"tcp握手协议\"><a class=\"markdownIt-Anchor\" href=\"#tcp握手协议\">#</a> TCP 握手协议</h2>\n<p>第一次握手：建立连接时，客户端发送 syn 包 (syn=j) 到服务器，并进入 SYN_SEND 状态，等待服务器确认；<br>\nSYN：同步序列编号 (Synchronize Sequence Numbers)<br>\n 第二次握手：服务器收到 syn 包，必须确认客户的 SYN（ack=j+1）, 同时自己也发送一个 SYN 包（syn=k）, 即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；<br>\n第三次握手：客户端收到服务器的 SYN＋ACK 包，向服务器发送确认包 ACK (ack=k+1), 此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手.</p>\n<h2 id=\"集合类都有哪些主要方法\"><a class=\"markdownIt-Anchor\" href=\"#集合类都有哪些主要方法\">#</a> 集合类都有哪些？主要方法？</h2>\n<p>常见的集合：ArrayList,LinkedList,HashSet,HashMap,TreeSet 等等<br>\n常见方法：size ()、add ()、remove ()<br>\n String 常用的方法：length ()、valueOf ()、split ()、substring ()</p>\n<h2 id=\"多线程有几种实现方法都是什么\"><a class=\"markdownIt-Anchor\" href=\"#多线程有几种实现方法都是什么\">#</a> 多线程有几种实现方法，都是什么？</h2>\n<p>通常来讲，Java 创建一个线程有三种方式<br>\n①　继承一个 Thread 类<br>\n②　实现 Runnable 接口<br>\n③　匿名内部类</p>\n<h2 id=\"list-set-map的区别\"><a class=\"markdownIt-Anchor\" href=\"#list-set-map的区别\">#</a> List, Set, Map 的区别？</h2>\n<p>list 是最常用的 它其实就是一种可以自由改变长度的数组<br>\n set 和 list 基本的用法差不多 区别在于 set 里不能放相同的元素<br>\n至于 map 这个和上边 2 个在用法上有很大差别 map 里储存的是键值对 可以根据键来值搜索值 键是唯一的 值可以重复… 学 Servlet 和 jsp 的时候 会有大量的 map 的应用</p>\n<h2 id=\"和的区别-2\"><a class=\"markdownIt-Anchor\" href=\"#和的区别-2\">#</a> &amp; 和 &amp;&amp; 的区别？</h2>\n<p>&amp; 有两个作用，分别是 位与 和 逻辑与<br>\n &amp;&amp; 就是逻辑与<br>\n作为逻辑与， &amp; 和 &amp;&amp; 分别表示长路与和短路与<br>\n长路与 两侧，都会被运算<br>\n短路与 只要第一个是 false，第二个就不进行运算了</p>\n<h2 id=\"五个常见到的runtime-exception\"><a class=\"markdownIt-Anchor\" href=\"#五个常见到的runtime-exception\">#</a> 五个常见到的 runtime exception。</h2>\n<p>NullPointerException 空指针异常<br>\n ArithmeticException 算术异常，比如除数为零<br>\n ClassCastException 类型转换异常<br>\n ConcurrentModificationException 同步修改异常，遍历一个集合的时候，删除集合的元素，就会抛出该异常<br>\n IndexOutOfBoundsException 数组下标越界异常<br>\n NegativeArraySizeException 为数组分配的空间是负数异常</p>\n<h2 id=\"servlet的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#servlet的生命周期\">#</a> servlet 的生命周期？</h2>\n<p>一个 Servlet 的生命周期由 实例化，初始化，提供服务，销毁，被回收 几个步骤组成</p>\n<h2 id=\"string是最常使用的java类之一整理的了一些重要的string知识\"><a class=\"markdownIt-Anchor\" href=\"#string是最常使用的java类之一整理的了一些重要的string知识\">#</a> String 是最常使用的 Java 类之一，整理的了一些重要的 String 知识</h2>\n<h3 id=\"什么是string它是什么数据类型\"><a class=\"markdownIt-Anchor\" href=\"#什么是string它是什么数据类型\">#</a> 什么是 String，它是什么数据类型？</h3>\n<p>String 是定义在 java.lang 包下的一个类。它不是基本数据类型。<br>\nString 是不可变的，JVM 使用字符串池来存储所有的字符串对象。</p>\n<h3 id=\"创建string对象的不同方式有哪些\"><a class=\"markdownIt-Anchor\" href=\"#创建string对象的不同方式有哪些\">#</a> 创建 String 对象的不同方式有哪些？</h3>\n<p>和使用其他类一样通过 new 关键字来创建。<br>\n使用这种方式时，JVM 创建字符串对象但不存储于字符串池。我们可以调用 intern () 方法将该字符串对象存储在字符串池，如果字符串池已经有了同样值的字符串，则返回引用。<br>\n使用双引号直接创建。<br>\n使用这种方式时，JVM 去字符串池找有没有值相等字符串，如果有，则返回找到的字符串引用。否则创建一个新的字符串对象并存储在字符串池。<br>\nString str = new String(“abc”);<br>\nString str1 = “abc”;</p>\n<h3 id=\"string-类的常用方法都有那些\"><a class=\"markdownIt-Anchor\" href=\"#string-类的常用方法都有那些\">#</a> String 类的常用方法都有那些？</h3>\n<p>indexOf ()：返回指定字符的索引。<br>\ncharAt ()：返回指定索引处的字符。<br>\nreplace ()：字符串替换。<br>\ntrim ()：去除字符串两端空白。<br>\nsplit ()：分割字符串，返回一个分割后的字符串数组。<br>\ngetBytes ()：返回字符串的 byte 类型数组。<br>\nlength ()：返回字符串长度。<br>\ntoLowerCase ()：将字符串转成小写字母。<br>\ntoUpperCase ()：将字符串转成大写字符。<br>\nsubstring ()：截取字符串。<br>\nequals ()：字符串比较。</p>\n<h3 id=\"如何让一个字符串变成小写或大写形式\"><a class=\"markdownIt-Anchor\" href=\"#如何让一个字符串变成小写或大写形式\">#</a> 如何让一个字符串变成小写或大写形式？</h3>\n<p>使用 toUpperCase 和 toLowerCase 方法让一个字符串变为 大写或小写。</p>\n<h3 id=\"如何比较两个字符串\"><a class=\"markdownIt-Anchor\" href=\"#如何比较两个字符串\">#</a> 如何比较两个字符串？</h3>\n<p>String 内部实现了 Comparable 接口，有两个比较方法：compareTo (String anotherString) 和 compareToIgnoreCase (String str)。<br>\ncompareTo(String anotherString)<br>\n 与传入的 anotherString 字符串进行比较，如果小于传入的字符串返回负数，如果大于则返回证书。当两个字符串值相等时，返回 0. 此时 eqauls 方法会返回 true。<br>\nequalsIgnoreCase(String str)<br>\n 该方法与 compareTo 方法类似，区别只是内部利用了 Character.toUpperCase 等方法进行了大小写转换后进行比较。</p>\n<h3 id=\"如何将string转换为char反过来呢\"><a class=\"markdownIt-Anchor\" href=\"#如何将string转换为char反过来呢\">#</a> 如何将 String 转换为 char, 反过来呢？</h3>\n<p>这是一个误导题，String 是一系列字符，所有我们没法转换成一个单一的 char，但可以调用 toCharArray () 方法将字符串转成字符数组。<br>\nString str = “Java interview”;</p>\n<pre><code>//string to char array\nchar[] chars = str.toCharArray();\nSystem.out.println(chars.length);\n</code></pre>\n<h3 id=\"如何将string转换为byte-array反过来呢\"><a class=\"markdownIt-Anchor\" href=\"#如何将string转换为byte-array反过来呢\">#</a> 如何将 String 转换为 byte array, 反过来呢？</h3>\n<p>使用 String 的 getBytes () 方法将 String 转成 byte 数组，使用 String 的构造方法 new String (byte [] arr) 将 byte 数据转为 String。<br>\npublic class StringToByteArray {<br>\npublic static void main(String[] args) {<br>\nString str = “PANKAJ”;<br>\nbyte[] byteArr = str.getBytes();<br>\n// print the byte[] elements<br>\nSystem.out.println(&quot;String to byte array: &quot; + Arrays.toString(byteArr));<br>\n}<br>\n}<br>\npublic class ByteArrayToString {<br>\npublic static void main(String[] args) {<br>\nbyte[] byteArray = { ‘P’, ‘A’, ‘N’, ‘K’, ‘A’, ‘J’ };<br>\nbyte[] byteArray1 = { 80, 65, 78, 75, 65, 74 };<br>\nString str = new String(byteArray);<br>\nString str1 = new String(byteArray1);<br>\nSystem.out.println(str);<br>\nSystem.out.println(str1);<br>\n}<br>\n}</p>\n<div id=\"question8\"></div>\n<h3 id=\"string-stringbufferstringbuilder的区别\"><a class=\"markdownIt-Anchor\" href=\"#string-stringbufferstringbuilder的区别\">#</a> String, StringBuffer，StringBuilder 的区别？</h3>\n<p>String 是不可变类，每当我们对 String 进行操作的时候，总是会创建新的字符串。操作 String 很耗资源，所以 Java 提供了两个工具类来操作 String - StringBuffer 和 StringBuilder。<br>\nStringBuffer 和 StringBuilder 是可变类，StringBuffer 是线程安全的，StringBuilder 则不是线程安全的。所以在多线程对同一个字符串操作的时候，我们应该选择用 StringBuffer。由于不需要处理多线程的情况，StringBuilder 的效率比 StringBuffer 高。</p>\n<h3 id=\"string是不可变的有什么好处\"><a class=\"markdownIt-Anchor\" href=\"#string是不可变的有什么好处\">#</a> String 是不可变的有什么好处？</h3>\n<p>String 是不可变类有以下几个优点<br>\n由于 String 是不可变类，所以在多线程中使用是安全的，我们不需要做任何其他同步操作。<br>\nString 是不可变的，它的值也不能被改变，所以用来存储数据密码很安全。<br>\n因为 java 字符串是不可变的，可以在 java 运行时节省大量 java 堆空间。因为不同的字符串变量可以引用池中的相同的字符串。如果字符串是可变得话，任何一个变量的值改变，就会反射到其他变量，那字符串池也就没有任何意义了。</p>\n<h3 id=\"如何判断两个string是否相等\"><a class=\"markdownIt-Anchor\" href=\"#如何判断两个string是否相等\">#</a> 如何判断两个 String 是否相等？</h3>\n<p>有两种方式判断字符串是否相等，使用 &quot;<mark>“或者使用 equals 方法。当使用”</mark>&quot; 操作符时，不仅比较字符串的值，还会比较引用的内存地址。大多数情况下，我们只需要判断值是否相等，此时用 equals 方法比较即可。</p>\n<h3 id=\"什么是字符串池\"><a class=\"markdownIt-Anchor\" href=\"#什么是字符串池\">#</a> 什么是字符串池？</h3>\n<p>顾名思义，字符串常量池就是用来存储字符串的。它存在于 Java 堆内存。<br>\n一些 java 题中，可能会问一段代码中有几个字符串被创建，例如：<br>\nString str = new String(“Cat”);<br>\n 上面一行代码将会创建 1 或 2 个字符串。如果在字符串常量池中已经有一个字符串 “Cat”，那么就智慧创建一个 “Cat” 字符串。如果字符串常量池中没有 “Cat”，那么首先会在字符串池中创建，然后才在堆内存中创建，这种情况就会创建 2 个对象了。</p>\n<h3 id=\"string的intern方法\"><a class=\"markdownIt-Anchor\" href=\"#string的intern方法\">#</a> String 的 intern () 方法</h3>\n<p>当 intern () 方法被调用，如果字符串池中含有一个字符串和当前调用方法的字符串 eqauls 相等，那么就会返回池中的字符串。如果池中没有的话，则首先将当前字符串加入到池中，然后返回引用。</p>\n<h3 id=\"string是线程安全的吗\"><a class=\"markdownIt-Anchor\" href=\"#string是线程安全的吗\">#</a> String 是线程安全的吗？</h3>\n<p>String 是不可变类，一旦创建了 String 对象，我们就无法改变它的值。因此，它是线程安全的，可以安全地用于多线程环境中。</p>\n<h3 id=\"为什么我们在使用hashmap的时候总是用string做key\"><a class=\"markdownIt-Anchor\" href=\"#为什么我们在使用hashmap的时候总是用string做key\">#</a> 为什么我们在使用 HashMap 的时候总是用 String 做 key？</h3>\n<p>因为字符串是不可变的，当创建字符串时，它的它的 hashcode 被缓存下来，不需要再次计算。因为 HashMap 内部实现是通过 key 的 hashcode 来确定 value 的存储位置，所以相比于其他对象更快。这也是为什么我们平时都使用 String 作为 HashMap 对象。</p>\n<h2 id=\"ssm\"><a class=\"markdownIt-Anchor\" href=\"#ssm\">#</a> SSM：</h2>\n<p>Spring+SpringMVC+Mybatis</p>\n<h2 id=\"spring\"><a class=\"markdownIt-Anchor\" href=\"#spring\">#</a> Spring</h2>\n<h3 id=\"spring-在ssm中起什么作用\"><a class=\"markdownIt-Anchor\" href=\"#spring-在ssm中起什么作用\">#</a> Spring 在 ssm 中起什么作用？</h3>\n<p>Spring：轻量级框架<br>\n作用：Bean 工厂，用来管理 Bean 的生命周期和框架集成。<br>\n两大核心：<br>\n①. IOC/DI (控制反转 / 依赖注入) ：把 dao 依赖注入到 service 层，service 层反转给 action 层，Spring 顶层容器为 BeanFactory。<br>\n②. AOP：面向切面编程</p>\n<h3 id=\"spring的事务\"><a class=\"markdownIt-Anchor\" href=\"#spring的事务\">#</a> Spring 的事务？</h3>\n<p>编程式事务管理：编程方式管理事务，极大灵活性，难维护。<br>\n声明式事务管理：可以将业务代码和事务管理分离，用注解和 xml 配置来管理事务。</p>\n<h3 id=\"ioc-在项目中的作用\"><a class=\"markdownIt-Anchor\" href=\"#ioc-在项目中的作用\">#</a> IOC 在项目中的作用？</h3>\n<p>作用：Ioc 解决对象之间的依赖问题，把所有 Bean 的依赖关系通过配置文件或注解关联起来，降低了耦合度。</p>\n<h3 id=\"spring的配置文件中的内容\"><a class=\"markdownIt-Anchor\" href=\"#spring的配置文件中的内容\">#</a> Spring 的配置文件中的内容？</h3>\n<p>开启事务注解驱动<br>\n事务管理器<br>\n开启注解功能，并配置扫描包<br>\n配置数据库<br>\n配置 SQL 会话工厂，别名，映射文件<br>\n不用编写 Dao 层的实现类</p>\n<h3 id=\"spring下的注解\"><a class=\"markdownIt-Anchor\" href=\"#spring下的注解\">#</a> Spring 下的注解？</h3>\n<p>注册：@Controller @Service @Component<br>\n 注入：@Autowired @Resource<br>\n 请求地址：@RequestMapping<br>\n 返回具体数据类型而非跳转：@ResponseBody</p>\n<h3 id=\"spring-di-的三种方式\"><a class=\"markdownIt-Anchor\" href=\"#spring-di-的三种方式\">#</a> Spring DI 的三种方式？</h3>\n<p>构造器注入：通过构造方法初始化<br>\n<constructor-arg index=\"0\" type=\"java.lang.String\" value=\"宝马\"></constructor-arg><br>\nsetter 方法注入：通过 setter 方法初始化<br>\n<property name=\"id\" value=\"1111\"></property><br>\n接口注入</p>\n<h3 id=\"spring主要使用了什么模式\"><a class=\"markdownIt-Anchor\" href=\"#spring主要使用了什么模式\">#</a> Spring 主要使用了什么模式？</h3>\n<p>工厂模式：每个 Bean 的创建通过方法<br>\n单例模式：默认的每个 Bean 的作用域都是单例<br>\n代理模式：关于 Aop 的实现通过代理模式</p>\n<h3 id=\"iocaop的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#iocaop的实现原理\">#</a> IOC，AOP 的实现原理？</h3>\n<p>IOC：通过反射机制生成对象注入<br>\n AOP：动态代理</p>\n<h3 id=\"什么是ioc\"><a class=\"markdownIt-Anchor\" href=\"#什么是ioc\">#</a> . 什么是 IOC？</h3>\n<p>IOC： Inversion of control 反转控制。 比如以前创建一个对象，需要自己主动 new 一个对象，通过 IOC，对象的创建交由 Spring 框架 创建，开发人员直接使用已经创建好的对象。</p>\n<h3 id=\"什么是di\"><a class=\"markdownIt-Anchor\" href=\"#什么是di\">#</a> 什么是 DI？</h3>\n<p>DI： Dependency Injection 依赖注入。 通过 IOC 创建对象的时候，可以注入字符串甚至其他对象。 比如 DAO 就会注入 session factory.<br>\n 通常 IOC 和 DI 是紧密结合，一起使用的</p>\n<h3 id=\"什么是aop\"><a class=\"markdownIt-Anchor\" href=\"#什么是aop\">#</a> 什么是 AOP？</h3>\n<p>AOP: 面向切面编程。<br>\n把功能划分为核心业务功能和其他的周边辅助功能，比如日志，性能统计，事务等等。 其他的周边辅助功能可以都看作切面功能。核心功能和切面功能分别独立开发，通过面向切面编程，可以有机的把核心业务功能和切面功能根据需求结合在一起。 比如增加操作可以和事务切面结合在一起，查询操作可以和性能统计切面结合在一起。<br>\n在配置方面，要配置切面，切点，并且通过 aspect:config 把切面和切点结合起来</p>\n<h2 id=\"springmvc\"><a class=\"markdownIt-Anchor\" href=\"#springmvc\">#</a> SpringMvc</h2>\n<h3 id=\"springmvc-的控制器是不是单例模式如果是有什么问题怎么解决\"><a class=\"markdownIt-Anchor\" href=\"#springmvc-的控制器是不是单例模式如果是有什么问题怎么解决\">#</a> SpringMvc 的控制器是不是单例模式，如果是，有什么问题，怎么解决？</h3>\n<p>问题：单例模式，在多线程访问时有线程安全问题<br>\n解决方法：不要用同步，在控制器里面不能写字段</p>\n<h3 id=\"springmvc-中控制器的注解\"><a class=\"markdownIt-Anchor\" href=\"#springmvc-中控制器的注解\">#</a> SpringMvc 中控制器的注解？</h3>\n<p>@Controller：该注解表明该类扮演控制器的角色</p>\n<h3 id=\"requestmapping-注解用在类上的作用\"><a class=\"markdownIt-Anchor\" href=\"#requestmapping-注解用在类上的作用\">#</a> @RequestMapping 注解用在类上的作用？</h3>\n<p>作用：用来映射一个 URL 到一个类或者一个特定的处理方法上</p>\n<h3 id=\"前台多个参数这些参数都是一个对象快速得到对象\"><a class=\"markdownIt-Anchor\" href=\"#前台多个参数这些参数都是一个对象快速得到对象\">#</a> 前台多个参数，这些参数都是一个对象，快速得到对象？</h3>\n<p>方法：直接在方法中声明这个对象，SpringMvc 就自动把属性赋值到这个对象里面</p>\n<h3 id=\"springmvc中函数的返回值\"><a class=\"markdownIt-Anchor\" href=\"#springmvc中函数的返回值\">#</a> SpringMvc 中函数的返回值？</h3>\n<p>String，ModelAndView，List，Set 等<br>\n一般 String，Ajax 请求，返回一个 List 集合</p>\n<h3 id=\"springmvc中的转发和重定向\"><a class=\"markdownIt-Anchor\" href=\"#springmvc中的转发和重定向\">#</a> SpringMvc 中的转发和重定向？</h3>\n<p>转发： return：“hello”<br>\n 重定向 ：return：“redirect:hello.jsp”<br>\n 通过 JackSon 框架把 java 里面对象直接转换成 js 可识别的 json 对象，具体步骤如下：<br>\n加入 JackSon.jar<br>\n 在配置文件中配置 json 的映射<br>\n在接受 Ajax 方法里面直接返回 Object，list 等，方法前面需要加上注解 @ResponseBody</p>\n<h3 id=\"springmvc的工作流程\"><a class=\"markdownIt-Anchor\" href=\"#springmvc的工作流程\">#</a> SpringMvc 的工作流程</h3>\n<p>浏览器→发送请求→前端控制器（DispatcherServlet）→请求→处理器映射器 (HandlerMapping)→返回处理器执行链→前端控制器（DispatcherServlet）→发送处理器执行链→处理器适配器 (HandlerAdatper)→执行→处理器 (Handler)→ModelAndView→处理器适配器 (HandlerAdatper)→modelandview→前端控制器（DispatcherServlet）→modelandview→视图解析器→view→前端控制器（DispatcherServlet）→model→视图 (view)→前端控制器（DispatcherServlet）→响应→浏览器</p>\n<h3 id=\"springmvc的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#springmvc的工作原理\">#</a> SpringMVC 的工作原理？</h3>\n<p>①　用户向服务器发送请求，请求被 springMVC 前端控制器 DispatchServlet 捕获；<br>\n②　DispatcherServle 对请求 URL 进行解析，得到请求资源标识符（URL），然后根据该 URL 调用 HandlerMapping (处理器映射) 将请求映射到处理器 HandlerExcutionChain；<br>\n③　DispatchServlet 根据获得 Handler 选择一个合适的 HandlerAdapter 适配器处理；<br>\n④　Handler 对数据处理完成以后将返回一个 ModelAndView 对象给 DisPatchServlet；<br>\n⑤　DispatcherSevlet 通过 ViewResolver（试图解析器）将逻辑视图转化为真正的视图 View；<br>\nDispatcherServle 通过 model 解析出 ModelAndView () 中的参数进行解析最终展现出完整的 view 并返</p>\n<h3 id=\"struts2-和-springmvc的区别\"><a class=\"markdownIt-Anchor\" href=\"#struts2-和-springmvc的区别\">#</a> Struts2 和 SpringMvc 的区别？</h3>\n<p>入口不同：<br>\nStruts2：filter 过滤器<br>\n SpringMvc：一个 Servlet 即前端控制器</p>\n<p>开发方式不同：<br>\nStruts2：基于类开发，传递参数通过类的属性，只能设置为多例<br>\n SpringMvc：基于方法开发 (一个 url 对应一个方法)，请求参数传递到方法形参，可以为单例也可以为多例 (建议单例)</p>\n<p>请求方式不同：<br>\nStruts2：值栈村塾请求和响应的数据，通过 OGNL 存取数据<br>\n SpringMvc：通过参数解析器将 request 请求内容解析，给方法形参赋值，将数据和视图封装成 ModelAndView 对象，最后又将 ModelAndView 中的模型数据通过 request 域传输到页面，jsp 视图解析器默认使用的是 jstl。</p>\n<h2 id=\"mybatis\"><a class=\"markdownIt-Anchor\" href=\"#mybatis\">#</a> Mybatis</h2>\n<h3 id=\"ibatis和mybatis\"><a class=\"markdownIt-Anchor\" href=\"#ibatis和mybatis\">#</a> Ibatis 和 Mybatis？</h3>\n<p>Ibatis：2010 年，apache 的 Ibatis 框架停止更新，并移交给了 google 团队，同时更名为 MyBatis。从 2010 年后 Ibatis 在没更新过，彻底变成了一个孤儿框架。一个没人维护的框架注定被 mybatis 拍在沙滩上。<br>\nMybatis：Ibatis 的升级版本。</p>\n<h3 id=\"什么是mybatis的接口绑定有什么好处\"><a class=\"markdownIt-Anchor\" href=\"#什么是mybatis的接口绑定有什么好处\">#</a> 什么是 Mybatis 的接口绑定，有什么好处？</h3>\n<p>Mybatis 实现了 DAO 接口与 xml 映射文件的绑定，自动为我们生成接口的具体实现，使用起来变得更加省事和方便。</p>\n<h3 id=\"什么情况用注解什么情况用xml绑定\"><a class=\"markdownIt-Anchor\" href=\"#什么情况用注解什么情况用xml绑定\">#</a> 什么情况用注解，什么情况用 xml 绑定？</h3>\n<p>注解使用情况：Sql 语句简单时<br>\n xml 绑定使用情况：xml 绑定 (@RequestMap 用来绑定 xml 文件)</p>\n<h3 id=\"mybatis在核心处理类叫什么\"><a class=\"markdownIt-Anchor\" href=\"#mybatis在核心处理类叫什么\">#</a> Mybatis 在核心处理类叫什么？</h3>\n<p>SqlSession</p>\n<h3 id=\"查询表名和返回实体bean对象不一致如何处理\"><a class=\"markdownIt-Anchor\" href=\"#查询表名和返回实体bean对象不一致如何处理\">#</a> 查询表名和返回实体 Bean 对象不一致，如何处理？</h3>\n<p>映射键值对即可<br>\n<result column=\"title\" property=\"title\" javaType=\"java.lang.String\"/><br>\ncolumn：数据库中表的列名<br>\n property：实体 Bean 中的属性名</p>\n<h3 id=\"mybatis的好处\"><a class=\"markdownIt-Anchor\" href=\"#mybatis的好处\">#</a> Mybatis 的好处？</h3>\n<p>把 Sql 语句从 Java 中独立出来。<br>\n封装了底层的 JDBC，API 的调用，并且能够将结果集自动转换成 JavaBean 对象，简化了 Java 数据库编程的重复工作。<br>\n自己编写 Sql 语句，更加的灵活。<br>\n入参无需用对象封装（或者 map 封装）, 使用 @Param 注解</p>\n<h3 id=\"mybatis配置一对多\"><a class=\"markdownIt-Anchor\" href=\"#mybatis配置一对多\">#</a> Mybatis 配置一对多？</h3>\n<collection property=\"topicComment\" column=\"id\" ofType=\"com.tmf.bbs.pojo.Comment\" select=\"selectComment\" />\nproperty：属性名\ncolumn：共同列\nofType：集合中元素的类型\nselect：要连接的查询\n<h3 id=\"mybatis配置一对一\"><a class=\"markdownIt-Anchor\" href=\"#mybatis配置一对一\">#</a> Mybatis 配置一对一？</h3>\n<association property=\"topicType\" select=\"selectType\" column=\"topics_type_id\" javaType=\"com.tmf.bbs.pojo.Type\"/>\nproperty：属性名\nselect：要连接的查询\ncolumn：共同列\njavaType：集合中元素的类型\n<h3 id=\"和-的区别\"><a class=\"markdownIt-Anchor\" href=\"#和-的区别\">#</a> ${} 和 #{} 的区别？</h3>\n<p>${}： 简 单 字 符 串 替 换 ， 把 {}：简单字符串替换，把：简单字符串替换，把 {} 直接替换成变量的值，不做任何转换，这种是取值以后再去编译 SQL 语句。<br>\n#{}：预编译处理，sql 中的 #{} 替换成？，补全预编译语句，有效的防止 Sql 语句注入，这种取值是编译好 SQL 语句再取值。<br>\n总结：一般用 #{} 来进行列的代替</p>\n<h3 id=\"获取上一次自动生成的主键值\"><a class=\"markdownIt-Anchor\" href=\"#获取上一次自动生成的主键值\">#</a> 获取上一次自动生成的主键值？</h3>\n<p>select last _insert_id()</p>\n<h3 id=\"mybatis如何分页分页原理\"><a class=\"markdownIt-Anchor\" href=\"#mybatis如何分页分页原理\">#</a> Mybatis 如何分页，分页原理？</h3>\n<p>RowBounds 对象分页<br>\n在 Sql 内直接书写，带有物理分页</p>\n<h3 id=\"mybatis工作原理\"><a class=\"markdownIt-Anchor\" href=\"#mybatis工作原理\">#</a> Mybatis 工作原理？</h3>\n<p>通过 SqlSessionFactoryBuilder 从 mybatis-config.xml 配置文件中构建出 SqlSessionFactory。<br>\nSqlSessionFactory 开启一个 SqlSession，通过 SqlSession 实例获得 Mapper 对象并且运行 Mapper 映射的 Sql 语句。<br>\n完成数据库的 CRUD 操作和事务提交，关闭 SqlSession。</p>\n<h2 id=\"状态和转换详解七态\"><a class=\"markdownIt-Anchor\" href=\"#状态和转换详解七态\">#</a> 状态和转换详解 (七态)</h2>\n<p>操作系统之进程的状态和转换详解 (七态)</p>\n<h3 id=\"三态模型\"><a class=\"markdownIt-Anchor\" href=\"#三态模型\">#</a> 三态模型</h3>\n<p>1. 运行态 (running): 占有处理器正在运行<br>\n 2. 就绪态 (ready): 具备运行条件，等待系统分配处理器以便运行<br>\n 3. 等待态 (blocked): 不具备运行条件，正在等待某个事件的完成<br>\n运行态 —→等待态：等待使用资源；如等待外设传输；等待人工干预。<br>\n等待态 —→就绪态：资源得到满足；如外设传输结束；人工干预完成。<br>\n运行态 —→就绪态：运行时间片到；出现有更高优先权进程。<br>\n就绪态 —→运行态：CPU 空闲时选择一个就绪进程。</p>\n<h3 id=\"五态模型\"><a class=\"markdownIt-Anchor\" href=\"#五态模型\">#</a> 五态模型</h3>\n<p>建态（new）和终止态（exit ）<br>\nNULL—→新建态：执行一个程序，创建一个子进程。<br>\n新建态 —→就绪态：当操作系统完成了进程创建的必要操作，并且当前系统的性能和虚拟内存的容量均允许。<br>\n运行态 —→终止态：当一个进程到达了自然结束点，或是出现了无法克服的错误，或是被操作系统所终结，或是被其他有终止权的进程所终结。<br>\n终止态 —→NULL：完成善后操作。<br>\n就绪态 —→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。<br>\n等待态 —→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。</p>\n<h3 id=\"七态模型\"><a class=\"markdownIt-Anchor\" href=\"#七态模型\">#</a> 七态模型</h3>\n<p>挂起就绪态（ready,suspend）<br>\n挂起就绪态表明了进程具备运行条件但目前在二级存储器中，只有当它被对换到主存才能被调度执行<br>\n挂起等待态（blocked,suspend）挂起等待态则表明了进程正在等待某一个事件且在二级存储器中。<br>\n等待态 —→挂起等待态：如果当前不存在就绪进程，那么至少有一个等待态进程将被对换出去成为挂起等待态；操作系统根据当前资源状况和性能要求，可以决定把等待态进程对换出去成为挂起等待态。<br>\n挂起等待态 —→挂起就绪态：引起进程等待的事件发生之后，相应的挂起等待态进程将转换为挂起就绪态。<br>\n挂起就绪态 —→就绪态：当内存中没有就绪态进程，或者挂起就绪态进程具有比就绪态进程更高的优先级，系统将把挂起就绪态进程转换成就绪态。<br>\n就绪态 —→挂起就绪态：操作系统根据当前资源状况和性能要求，也可以决定把就绪态进程对换出去成为挂起就绪态。<br>\n挂起等待态 —→等待态：当一个进程等待一个事件时，原则上不需要把它调入内存。但是在下面一种情况下，这一状态变化是可能的。当一个进程退出后，主存已经有了一大块自由空间，而某个挂起等待态进程具有较高的优先级并且操作系统已经得知导致它阻塞的事件即将结束，此时便发生了这一状态变化。<br>\n运行态 —→挂起就绪态：当一个具有较高优先级的挂起等待态进程的等待事件结束后，它需要抢占 CPU，，而此时主存空间不够，从而可能导致正在运行的进程转化为挂起就绪态。另外处于运行态的进程也可以自己挂起自己。<br>\n新建态 —→挂起就绪态：考虑到系统当前资源状况和性能要求，可以决定新建的进程将被对换出去成为挂起就绪态。</p>\n<h2 id=\"进程的挂起\"><a class=\"markdownIt-Anchor\" href=\"#进程的挂起\">#</a> 进程的挂起</h2>\n<p>到目前为止，我们或多或少总是假设所有的进程都在内存中。事实上，可能出现这样一些情况，例如由于进程的不断创建，系统的资源已经不能满足进程运行的要求，这个时候就必须把某些进程挂起（suspend），对换到磁盘镜像区中，暂时不参与进程调度，起到平滑系统操作负荷的目的。</p>\n<h3 id=\"引起进程挂起的原因是多样的主要有\"><a class=\"markdownIt-Anchor\" href=\"#引起进程挂起的原因是多样的主要有\">#</a> 引起进程挂起的原因是多样的，主要有：</h3>\n<p>1. 系统中的进程均处于等待状态，处理器空闲，此时需要把一些阻塞进程对换出去，以腾出足够的内存装入就绪进程运行。<br>\n2. 进程竞争资源，导致系统资源不足，负荷过重，此时需要挂起部分进程以调整系统负荷，保证系统的实时性或让系统正常运行。<br>\n3. 把一些定期执行的进程（如审计程序、监控程序、记账程序）对换出去，以减轻系统负荷。<br>\n4. 用户要求挂起自己的进程，以便根据中间执行情况和中间结果进行某些调试、检查和改正。<br>\n5. 父进程要求挂起自己的后代进程，以进行某些检查和改正。<br>\n6. 操作系统需要挂起某些进程，检查运行中资源使用情况，以改善系统性能；或当系统出现故障或某些功能受到破坏时，需要挂起某些进程以排除故障。</p>\n<h3 id=\"一个挂起进程具有如下特征\"><a class=\"markdownIt-Anchor\" href=\"#一个挂起进程具有如下特征\">#</a> 一个挂起进程具有如下特征：</h3>\n<ol>\n<li>该进程不能立即被执行。</li>\n<li>挂起进程可能会等待一个事件，但所等待的事件是独立于挂起条件的，事件结束并不能导致进程具备执行条件。</li>\n<li>进程进入挂起状态是由于操作系统、父进程或进程本身阻止它的运行。</li>\n<li>结束进程挂起状态的命令只能通过操作系统或父进程发出。</li>\n</ol>\n<h2 id=\"加密算法\"><a class=\"markdownIt-Anchor\" href=\"#加密算法\">#</a> 加密算法</h2>\n<p>BASE64 严格地说，属于编码格式，而非加密算法<br>\n MD5 (Message Digest algorithm 5，信息摘要算法)<br>\n SHA (Secure Hash Algorithm，安全散列算法)<br>\n HMAC (Hash Message Authentication Code，散列消息鉴别码)</p>\n<h3 id=\"base64\"><a class=\"markdownIt-Anchor\" href=\"#base64\">#</a> BASE64</h3>\n<p>Base64 是网络上最常见的用于传输 8Bit=1 字节代码的编码方式之一</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/01/08/hello-world/",
            "url": "http://example.com/2021/01/08/hello-world/",
            "title": "Hello World",
            "date_published": "2021-01-08T13:46:11.333Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}