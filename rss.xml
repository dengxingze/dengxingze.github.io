<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>DXZ</title>
        <link>http://example.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Thu, 21 Jan 2021 17:30:38 +0800</pubDate>
        <lastBuildDate>Thu, 21 Jan 2021 17:30:38 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2021/01/21/Linux%20interview%20summary/</guid>
            <title>Linux interview summary</title>
            <link>http://example.com/2021/01/21/Linux%20interview%20summary/</link>
            <pubDate>Thu, 21 Jan 2021 17:30:38 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;常用指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用指令&#34;&gt;#&lt;/a&gt; 常用指令&lt;/h2&gt;
&lt;p&gt;ls　　        显示文件或目录&lt;br&gt;
 - l           列出文件详细信息 l (list)&lt;br&gt;
-a          列出当前目录下所有文件及目录，包括隐藏的 a (all)&lt;br&gt;
 mkdir         创建目录&lt;br&gt;
 - p           创建目录，若无父目录，则创建 p (parent)&lt;br&gt;
 cd               切换目录&lt;br&gt;
 touch          创建空文件&lt;br&gt;
 echo            创建带有内容的文件。&lt;br&gt;
cat              查看文件内容&lt;br&gt;
 cp                拷贝&lt;br&gt;
 mv               移动或重命名&lt;br&gt;
 rm               删除文件&lt;br&gt;
 - r            递归删除，可删除子目录及文件&lt;br&gt;
 - f            强制删除&lt;br&gt;
 find              在文件系统中搜索某文件&lt;br&gt;
 wc                统计文本中行数、字数、字符数&lt;br&gt;
 grep             在文本文件中查找某个字符串&lt;br&gt;
 rmdir           删除空目录&lt;br&gt;
 tree             树形结构显示目录，需要安装 tree 包&lt;br&gt;
 pwd              显示当前目录&lt;br&gt;
 ln                  创建链接文件&lt;br&gt;
 more、less  分页显示文本文件内容&lt;br&gt;
 head、tail    显示文件头、尾内容&lt;br&gt;
 ctrl+alt+F1  命令行全屏模式&lt;/p&gt;
&lt;h2 id=&#34;系统管理命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统管理命令&#34;&gt;#&lt;/a&gt; 系统管理命令&lt;/h2&gt;
&lt;p&gt;stat              显示指定文件的详细信息，比 ls 更详细&lt;br&gt;
 who               显示在线登陆用户&lt;br&gt;
 whoami          显示当前操作用户&lt;br&gt;
 hostname      显示主机名&lt;br&gt;
 uname           显示系统信息&lt;br&gt;
 top                动态显示当前耗费资源最多进程信息&lt;br&gt;
 ps                  显示瞬间进程状态 ps -aux&lt;br&gt;
du                  查看目录大小 du -h /home 带有单位显示目录信息&lt;br&gt;
 df                  查看磁盘大小 df -h 带有单位显示磁盘信息&lt;br&gt;
 ifconfig          查看网络情况&lt;br&gt;
 ping                测试网络连通&lt;br&gt;
 netstat          显示网络状态信息&lt;br&gt;
 man                命令不会用了，找男人  如：man ls&lt;br&gt;
clear              清屏&lt;br&gt;
 alias               对命令重命名 如：alias showmeit=“ps -aux” ，另外解除使用 unaliax showmeit&lt;br&gt;
kill                 杀死进程，可以先用 ps 或 top 命令查看进程的 id，然后再用 kill 命令杀死进程。&lt;/p&gt;
&lt;h2 id=&#34;打包压缩相关命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打包压缩相关命令&#34;&gt;#&lt;/a&gt; 打包压缩相关命令&lt;/h2&gt;
&lt;p&gt;gzip：&lt;br&gt;
bzip2：&lt;br&gt;
tar:                打包压缩&lt;br&gt;
 - c              归档文件&lt;br&gt;
 - x              压缩文件&lt;br&gt;
 - z              gzip 压缩文件&lt;br&gt;
 - j              bzip2 压缩文件&lt;br&gt;
 - v              显示压缩或解压缩过程 v (view)&lt;br&gt;
-f              使用档名&lt;br&gt;
例：&lt;br&gt;
tar -cvf /home/abc.tar/home/abc              只打包，不压缩&lt;br&gt;
 tar -zcvf /home/abc.tar.gz/home/abc        打包，并用 gzip 压缩&lt;br&gt;
 tar -jcvf /home/abc.tar.bz2 /home/abc      打包，并用 bzip2 压缩&lt;br&gt;
当然，如果想解压缩，就直接替换上面的命令  tar -cvf  /tar -zcvf  /tar -jcvf 中的 “c” 换成 “x” 就可以了。&lt;/p&gt;
&lt;h2 id=&#34;关机重启机器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关机重启机器&#34;&gt;#&lt;/a&gt; 关机 / 重启机器&lt;/h2&gt;
&lt;p&gt;shutdown&lt;br&gt;
-r             关机重启&lt;br&gt;
 - h             关机不重启&lt;br&gt;
 now          立刻关机&lt;br&gt;
 halt               关机&lt;br&gt;
 reboot          重启&lt;/p&gt;
&lt;h2 id=&#34;linux管道&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux管道&#34;&gt;#&lt;/a&gt; Linux 管道&lt;/h2&gt;
&lt;p&gt;将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。&lt;br&gt;
例：grep -r “close” /home/* | more       在 home 目录下所有文件中查找，包括 close 的文件，并分页输出。&lt;/p&gt;
&lt;h2 id=&#34;linux软件包管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux软件包管理&#34;&gt;#&lt;/a&gt; Linux 软件包管理&lt;/h2&gt;
&lt;p&gt;dpkg (Debian Package) 管理工具，软件包名以.deb 后缀。这种方法适合系统不能联网的情况下。&lt;br&gt;
比如安装 tree 命令的安装包，先将 tree.deb 传到 Linux 系统中。再使用如下命令安装。&lt;br&gt;
sudo dpkg -i tree_1.5.3-1_i386.deb         安装软件&lt;br&gt;
 sudo dpkg -r tree                                     卸载软件&lt;br&gt;
注：将 tree.deb 传到 Linux 系统中，有多种方式。VMwareTool，使用挂载方式；使用 winSCP 工具等；&lt;br&gt;
APT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。&lt;/p&gt;
&lt;p&gt;依然以 tree 为例&lt;br&gt;
 sudo apt-get install tree                         安装 tree&lt;br&gt;
sudo apt-get remove tree                       卸载 tree&lt;br&gt;
sudo apt-get update                                 更新软件&lt;br&gt;
 sudo apt-get upgrade&lt;/p&gt;
&lt;p&gt;将.rpm 文件转为.deb 文件&lt;br&gt;
.rpm 为 RedHat 使用的软件格式。在 Ubuntu 下不能直接使用，所以需要转换一下。&lt;br&gt;
sudo alien abc.rpm&lt;/p&gt;
&lt;h2 id=&#34;vim使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vim使用&#34;&gt;#&lt;/a&gt; vim 使用&lt;/h2&gt;
&lt;p&gt;vim 三种模式：命令模式、插入模式、编辑模式。使用 ESC 或 i 或：来切换模式。&lt;br&gt;
命令模式下：&lt;br&gt;
:q                      退出&lt;br&gt;
:q!                     强制退出&lt;br&gt;
:wq                   保存并退出&lt;br&gt;
:set number     显示行号&lt;br&gt;
:set nonumber  隐藏行号&lt;br&gt;
 /apache            在文档中查找 apache 按 n 跳到下一个，shift+n 上一个&lt;br&gt;
 yyp                   复制光标所在行，并粘贴&lt;br&gt;
 h (左移一个字符←)、j (下一行↓)、k (上一行↑)、l (右移一个字符→)&lt;/p&gt;
&lt;h2 id=&#34;用户及用户组管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户及用户组管理&#34;&gt;#&lt;/a&gt; 用户及用户组管理&lt;/h2&gt;
&lt;p&gt;/etc/passwd    存储用户账号&lt;br&gt;
 /etc/group       存储组账号&lt;br&gt;
 /etc/shadow    存储用户账号的密码&lt;br&gt;
 /etc/gshadow  存储用户组账号的密码&lt;br&gt;
 useradd 用户名&lt;br&gt;
 userdel 用户名&lt;br&gt;
 adduser 用户名&lt;br&gt;
 groupadd 组名&lt;br&gt;
 groupdel 组名&lt;br&gt;
 passwd root     给 root 设置密码&lt;br&gt;
 su root&lt;br&gt;
su - root&lt;br&gt;
/etc/profile     系统环境变量&lt;br&gt;
 bash_profile     用户环境变量&lt;br&gt;
.bashrc              用户环境变量&lt;br&gt;
 su user              切换用户，加载配置文件.bashrc&lt;br&gt;
su - user            切换用户，加载配置文件 /etc/profile ，加载 bash_profile&lt;/p&gt;
&lt;h2 id=&#34;更改文件的用户及用户组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更改文件的用户及用户组&#34;&gt;#&lt;/a&gt; 更改文件的用户及用户组&lt;/h2&gt;
&lt;p&gt;sudo chown [-R] owner[:group] {File|Directory}&lt;br&gt;
 例如：还以 jdk-7u21-linux-i586.tar.gz 为例。属于用户 hadoop，组 hadoop&lt;br&gt;
 要想切换此文件所属的用户及组。可以使用命令。&lt;br&gt;
sudo chown root:root jdk-7u21-linux-i586.tar.gz&lt;/p&gt;
&lt;h2 id=&#34;绝对路径用什么符号表示绝对路径用什么符号表示当前目录-上层目录用什么表示主目录用什么表示-切换目录用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绝对路径用什么符号表示绝对路径用什么符号表示当前目录-上层目录用什么表示主目录用什么表示-切换目录用什么命令&#34;&gt;#&lt;/a&gt; 绝对路径用什么符号表示绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示？切换目录用什么命令？&lt;/h2&gt;
&lt;p&gt;绝对路径： 如 /etc/init.d&lt;br&gt;
 当前目录和上层目录： ./  …/&lt;br&gt;
 主目录： ~/&lt;br&gt;
 切换目录： cd&lt;/p&gt;
&lt;h2 id=&#34;怎么查看当前进程怎么执行退出怎么查看当前路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#怎么查看当前进程怎么执行退出怎么查看当前路径&#34;&gt;#&lt;/a&gt; 怎么查看当前进程？怎么执行退出？怎么查看当前路径？&lt;/h2&gt;
&lt;p&gt;查看当前进程： ps&lt;br&gt;
 执行退出： exit&lt;br&gt;
 查看当前路径： pwd&lt;/p&gt;
&lt;h2 id=&#34;怎么清屏怎么退出当前命令怎么执行睡眠怎么查看当前用户-id查看指定帮助用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#怎么清屏怎么退出当前命令怎么执行睡眠怎么查看当前用户-id查看指定帮助用什么命令&#34;&gt;#&lt;/a&gt; 怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？&lt;/h2&gt;
&lt;p&gt;清屏： clear&lt;br&gt;
 退出当前命令： ctrl+c 彻底退出&lt;br&gt;
执行睡眠 ： ctrl+z 挂起当前进程 fg 恢复后台&lt;br&gt;
查看当前用户 id： ”id“：查看显示目前登陆账户的 uid 和 gid 及所属分组及用户名&lt;br&gt;
查看指定帮助： 如 man adduser 这个很全 而且有例子； adduser --help 这个告诉你一些常用参数； info adduesr；&lt;/p&gt;
&lt;h2 id=&#34;ls-命令执行什么功能-可以带哪些参数有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ls-命令执行什么功能-可以带哪些参数有什么区别&#34;&gt;#&lt;/a&gt; Ls 命令执行什么功能？ 可以带哪些参数，有什么区别？&lt;/h2&gt;
&lt;p&gt;ls 执行的功能： 列出指定目录中的目录，以及文件&lt;br&gt;
哪些参数以及区别： a 所有文件 l 详细信息，包括大小字节数，可读可写可执行的权限等&lt;/p&gt;
&lt;h2 id=&#34;建立软链接快捷方式以及硬链接的命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#建立软链接快捷方式以及硬链接的命令&#34;&gt;#&lt;/a&gt; 建立软链接 (快捷方式)，以及硬链接的命令。&lt;/h2&gt;
&lt;p&gt;软链接： ln -s slink source&lt;br&gt;
 硬链接： ln link source&lt;/p&gt;
&lt;h2 id=&#34;目录创建用什么命令创建文件用什么命令复制文件用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目录创建用什么命令创建文件用什么命令复制文件用什么命令&#34;&gt;#&lt;/a&gt; 目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？&lt;/h2&gt;
&lt;p&gt;创建目录： mkdir&lt;br&gt;
 创建文件：典型的如 touch，vi 也可以创建文件，其实只要向一个不存在的文件输出，都会创建文件&lt;br&gt;
复制文件： cp 7. 文件权限修改用什么命令？格式是怎么样的？&lt;br&gt;
文件权限修改： chmod&lt;br&gt;
 格式如下：&lt;br&gt;
chmodu+xfile 给 file 的属主增加执行权限  chmod 751 file 给 file 的属主分配读、写、执行 (7) 的权限，给 file 的所在组分配读、执行 (5) 的权限，给其他用户分配执行 (1) 的权限&lt;br&gt;
 chmodu=rwx,g=rx,o=xfile 上例的另一种形式 chmod =r file 为所有用户分配读权限&lt;br&gt;
 chmod444file 同上例 chmod a-wx,a+r file 同上例&lt;br&gt;
 $ chmod -R u+r directory 递归地给 directory 目录下所有文件和子目录的属主分配读的权限&lt;/p&gt;
&lt;h2 id=&#34;查看文件内容有哪些命令可以使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看文件内容有哪些命令可以使用&#34;&gt;#&lt;/a&gt; 查看文件内容有哪些命令可以使用？&lt;/h2&gt;
&lt;p&gt;vi 文件名 #编辑方式查看，可修改&lt;br&gt;
 cat 文件名 #显示全部文件内容&lt;br&gt;
 more 文件名 #分页显示文件内容&lt;br&gt;
 less 文件名 #与 more 相似，更好的是可以往前翻页&lt;br&gt;
 tail 文件名 #仅查看尾部，还可以指定行数&lt;br&gt;
 head 文件名 #仅查看头部，还可以指定行数&lt;/p&gt;
&lt;h2 id=&#34;随意写文件命令怎么向屏幕输出带空格的字符串比如hello-world&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#随意写文件命令怎么向屏幕输出带空格的字符串比如hello-world&#34;&gt;#&lt;/a&gt; 随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello world”?&lt;/h2&gt;
&lt;p&gt;写文件命令：vi&lt;br&gt;
 向屏幕输出带空格的字符串:echo hello world&lt;/p&gt;
&lt;h2 id=&#34;终端是哪个文件夹下的哪个文件黑洞文件是哪个文件夹下的哪个命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终端是哪个文件夹下的哪个文件黑洞文件是哪个文件夹下的哪个命令&#34;&gt;#&lt;/a&gt; 终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？&lt;/h2&gt;
&lt;p&gt;终端  /dev/tty&lt;br&gt;
 黑洞文件  /dev/null&lt;/p&gt;
&lt;h2 id=&#34;移动文件用哪个命令改名用哪个命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移动文件用哪个命令改名用哪个命令&#34;&gt;#&lt;/a&gt; 移动文件用哪个命令？改名用哪个命令？&lt;/h2&gt;
&lt;p&gt;mv mv&lt;/p&gt;
&lt;h2 id=&#34;复制文件用哪个命令如果需要连同文件夹一块复制呢如果需要有提示功能呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复制文件用哪个命令如果需要连同文件夹一块复制呢如果需要有提示功能呢&#34;&gt;#&lt;/a&gt; 复制文件用哪个命令？如果需要连同文件夹一块复制呢？如果需要有提示功能呢？&lt;/h2&gt;
&lt;p&gt;cp cp -r  ？？？？&lt;/p&gt;
&lt;h2 id=&#34;删除文件用哪个命令如果需要连目录及目录下文件一块删除呢删除空文件夹用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除文件用哪个命令如果需要连目录及目录下文件一块删除呢删除空文件夹用什么命令&#34;&gt;#&lt;/a&gt; 删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？&lt;/h2&gt;
&lt;p&gt;rm rm -r rmdir&lt;/p&gt;
&lt;h2 id=&#34;linux-下命令有哪几种可使用的通配符分别代表什么含义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux-下命令有哪几种可使用的通配符分别代表什么含义&#34;&gt;#&lt;/a&gt; Linux 下命令有哪几种可使用的通配符？分别代表什么含义？&lt;/h2&gt;
&lt;p&gt;“？” 可替代单个字符。&lt;br&gt;
“*” 可替代任意多个字符。&lt;br&gt;
方括号 “[charset]” 可替代 charset 集中的任何单个字符，如 [a-z]，[abABC]&lt;/p&gt;
&lt;h2 id=&#34;对一个文件的内容进行统计用什么命令行号-单词数-字节数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对一个文件的内容进行统计用什么命令行号-单词数-字节数&#34;&gt;#&lt;/a&gt; 对一个文件的内容进行统计用什么命令？(行号、单词数、字节数)&lt;/h2&gt;
&lt;p&gt;wc 命令 - c 统计字节数 - l 统计行数 - w 统计字数。&lt;/p&gt;
&lt;h2 id=&#34;grep-命令有什么用-如何忽略大小写-如何查找不含该串的行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#grep-命令有什么用-如何忽略大小写-如何查找不含该串的行&#34;&gt;#&lt;/a&gt; Grep 命令有什么用？ 如何忽略大小写？ 如何查找不含该串的行？&lt;/h2&gt;
&lt;p&gt;是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。&lt;br&gt;
grep [stringSTRING] filename grep [^string] filename&lt;/p&gt;
&lt;h2 id=&#34;linux-中进程有哪几种状态在-ps-显示出来的信息中分别用什么符号表示的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux-中进程有哪几种状态在-ps-显示出来的信息中分别用什么符号表示的&#34;&gt;#&lt;/a&gt; Linux 中进程有哪几种状态？在 ps 显示出来的信息中，分别用什么符号表示的？&lt;/h2&gt;
&lt;p&gt;1）、不可中断状态：进程处于睡眠状态，但是此刻进程是不可中断的。不可中断， 指进程不响应异步信号。&lt;br&gt;
（2）、暂停状态 / 跟踪状态：向进程发送一个 SIGSTOP 信号，它就会因响应该信号 而进入 TASK_STOPPED 状态；当进程正在被跟踪时，它处于 TASK_TRACED 这个特殊的状态。&lt;br&gt;
“正在被跟踪” 指的是进程暂停下来，等待跟踪它的进程对它进行操作。&lt;br&gt;
（3）、就绪状态：在 run_queue 队列里的状态&lt;br&gt;
（4）、运行状态：在 run_queue 队列里的状态&lt;br&gt;
（5）、可中断睡眠状态：处于这个状态的进程因为等待某某事件的发生（比如等待 socket 连接、等待信号量），而被挂起&lt;br&gt;
（6）、zombie 状态（僵尸）：父亲没有通过 wait 系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉&lt;br&gt;
（7）、退出状态&lt;br&gt;
 D 不可中断 Uninterruptible（usually IO）&lt;br&gt;
R 正在运行，或在队列中的进程&lt;br&gt;
 S 处于休眠状态&lt;br&gt;
 T 停止或被追踪&lt;br&gt;
 Z 僵尸进程&lt;br&gt;
 W 进入内存交换（从内核 2.6 开始无效）&lt;br&gt;
X 死掉的进程&lt;/p&gt;
&lt;h2 id=&#34;怎么使一个命令在后台运行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#怎么使一个命令在后台运行&#34;&gt;#&lt;/a&gt; 怎么使一个命令在后台运行？&lt;/h2&gt;
&lt;p&gt;一般都是使用 &amp;amp; 在命令结尾来让程序自动运行。(命令后可以不追加空格)&lt;/p&gt;
&lt;h2 id=&#34;利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息&#34;&gt;#&lt;/a&gt; 利用 ps 怎么显示所有的进程？怎么利用 ps 查看指定进程的信息？&lt;/h2&gt;
&lt;p&gt;ps -ef (system v 输出)&lt;br&gt;
 ps -aux bsd 格式输出&lt;br&gt;
 ps -ef | grep pid&lt;/p&gt;
&lt;h2 id=&#34;专门用来查看后台任务的是哪个命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#专门用来查看后台任务的是哪个命令&#34;&gt;#&lt;/a&gt; 专门用来查看后台任务的是哪个命令？&lt;/h2&gt;
&lt;p&gt;job -l&lt;/p&gt;
&lt;h2 id=&#34;把后台任务调到前台执行使用什么命令把停下的后台任务在后台执行起来用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#把后台任务调到前台执行使用什么命令把停下的后台任务在后台执行起来用什么命令&#34;&gt;#&lt;/a&gt; 把后台任务调到前台执行使用什么命令？把停下的后台任务在后台执行起来用什么命令？&lt;/h2&gt;
&lt;p&gt;把后台任务调到前台执行 fg&lt;br&gt;
 把停下的后台任务在后台执行起来 bg&lt;/p&gt;
&lt;p&gt;## 终止进程用什么命令？带什么参数？&lt;br&gt;
kill [-s &amp;lt; 信息名称或编号&amp;gt;][程序] 或 kill [-l &amp;lt; 信息编号 &amp;gt;]&lt;br&gt;
kill-9 pid&lt;/p&gt;
&lt;h2 id=&#34;怎么查看系统支持的所有信号&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#怎么查看系统支持的所有信号&#34;&gt;#&lt;/a&gt; 怎么查看系统支持的所有信号？&lt;/h2&gt;
&lt;p&gt;kill -l&lt;/p&gt;
&lt;h2 id=&#34;搜索文件用什么命令-格式是怎么样的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#搜索文件用什么命令-格式是怎么样的&#34;&gt;#&lt;/a&gt; 搜索文件用什么命令？格式是怎么样的？&lt;/h2&gt;
&lt;p&gt;find &amp;lt;指定目录&amp;gt; &amp;lt; 指定条件 &amp;gt; &amp;lt; 指定动作 &amp;gt;&lt;br&gt;
whereis 加参数与文件名&lt;br&gt;
 locate 只加文件名&lt;br&gt;
 find 直接搜索磁盘，较慢。&lt;br&gt;
find / -name “string*”&lt;/p&gt;
&lt;h2 id=&#34;查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令&#34;&gt;#&lt;/a&gt; 查看当前谁在使用该主机用什么命令？查找自己所在的终端信息用什么命令？&lt;/h2&gt;
&lt;p&gt;查找自己所在的终端信息：who am i&lt;br&gt;
 查看当前谁在使用该主机：who&lt;/p&gt;
&lt;h2 id=&#34;查看用过的命令列表使用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看用过的命令列表使用什么命令&#34;&gt;#&lt;/a&gt; 查看用过的命令列表使用什么命令？&lt;/h2&gt;
&lt;p&gt;history&lt;/p&gt;
&lt;h2 id=&#34;查看磁盘使用空间使用什么命令-空闲空间呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看磁盘使用空间使用什么命令-空闲空间呢&#34;&gt;#&lt;/a&gt; 查看磁盘使用空间使用什么命令？ 空闲空间呢？&lt;/h2&gt;
&lt;p&gt;df -hl&lt;br&gt;
 文件系统 容量 已用 可用 已用 % 挂载点&lt;br&gt;
 Filesystem Size Used Avail Use% Mounted on /dev/hda2 45G 19G 24G 44% /&lt;br&gt;
/dev/hda1 494M 19M 450M 4% /boot&lt;/p&gt;
&lt;h2 id=&#34;查看网络是否连通使用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看网络是否连通使用什么命令&#34;&gt;#&lt;/a&gt; 查看网络是否连通使用什么命令？&lt;/h2&gt;
&lt;p&gt;netstat&lt;/p&gt;
&lt;h2 id=&#34;查看-ip-地址及接口信息使用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看-ip-地址及接口信息使用什么命令&#34;&gt;#&lt;/a&gt; 查看 ip 地址及接口信息使用什么命令？&lt;/h2&gt;
&lt;p&gt;ifconfig&lt;/p&gt;
&lt;h2 id=&#34;查看各类环境变量用什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看各类环境变量用什么命令&#34;&gt;#&lt;/a&gt; 查看各类环境变量用什么命令？&lt;/h2&gt;
&lt;p&gt;查看所有 env&lt;br&gt;
 查看某个，如 home： env $HOME&lt;/p&gt;
&lt;h2 id=&#34;指定命令提示符是通过什么命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指定命令提示符是通过什么命令&#34;&gt;#&lt;/a&gt; 指定命令提示符是通过什么命令？&lt;/h2&gt;
&lt;p&gt;\u：显示当前用户账号&lt;br&gt;
 \h：显示当前主机名&lt;br&gt;
 \W：只显示当前路径最后一个目录&lt;br&gt;
 \w：显示当前绝对路径（当前用户目录会以～代替）&lt;br&gt;
&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mtext&gt;：显示当前全路径&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;PWD：显示当前全路径
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;显&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;示&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;当&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;前&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;全&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;路&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;径&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：显示命令行’&#39;或者’#&#39;符号
\#：下达的第几个命令
\d：代表日期，格式为week day month date，例如：&#34;MonAug1&#34;
\t：显示时间为24小时格式，如：HH：MM：SS
\T：显示时间为12小时格式
\A：显示时间为24小时格式：HH：MM
\v：BASH的版本信息 如export PS1=’[\u@\h\w\#]‘&lt;/p&gt;
&lt;h2 id=&#34;查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加&#34;&gt;#&lt;/a&gt; 查找命令的可执行文件是去哪查找的？怎么对其进行设置及添加？&lt;/h2&gt;
&lt;p&gt;whereis [-bfmsu][-B &amp;lt; 目录 &amp;gt;…][-M &amp;lt; 目录 &amp;gt;…][-S &amp;lt; 目录 &amp;gt;…][文件…]&lt;br&gt;
 补充说明：whereis 指令会在特定目录中查找符合条件的文件。这些文件的烈性应属于原始代码，二进制文件，或是帮助文件。&lt;br&gt;
-b   只查找二进制文件。&lt;br&gt;
-B &amp;lt;目录&amp;gt; 只在设置的目录下查找二进制文件。 -f 不显示文件名前的路径名称。&lt;br&gt;
-m   只查找说明文件。&lt;br&gt;
-M &amp;lt;目录&amp;gt; 只在设置的目录下查找说明文件。 -s 只查找原始代码文件。&lt;br&gt;
-S &amp;lt;目录&amp;gt; 只在设置的目录下查找原始代码文件。 -u 查找不包含指定类型的文件。&lt;br&gt;
which 指令会在 PATH 变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。&lt;br&gt;
-n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。&lt;br&gt;
-p 与 - n 参数相同，但此处的包括了文件的路径。 -w 指定输出时栏位的宽度。&lt;br&gt;
-V   显示版本信息&lt;/p&gt;
&lt;h2 id=&#34;对命令进行取别名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对命令进行取别名&#34;&gt;#&lt;/a&gt; 对命令进行取别名？&lt;/h2&gt;
&lt;p&gt;alias la=‘ls -a’&lt;/p&gt;
&lt;h2 id=&#34;du-和-df-的定义以及区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#du-和-df-的定义以及区别&#34;&gt;#&lt;/a&gt; du 和 df 的定义，以及区别？&lt;/h2&gt;
&lt;p&gt;du 显示目录或文件的大小&lt;br&gt;
 df 显示每个 &amp;lt;文件&amp;gt; 所在的文件系统的信息，默认是显示所有文件系统。&lt;br&gt;
（文件系统分配其中的一些磁盘块用来记录它自身的一些数据，如 i 节点，磁盘分布图，间接块，超级块等。这些数据对大多数用户级的程序来说是不可见的，通常称为 Meta Data。）&lt;br&gt;
du 命令是用户级的程序，它不考虑 Meta Data，而 df 命令则查看文件系统的磁盘分配图并考虑 Meta Data。&lt;br&gt;
df 命令获得真正的文件系统数据，而 du 命令只查看文件系统的部分情况。&lt;/p&gt;
&lt;h2 id=&#34;awk-详解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#awk-详解&#34;&gt;#&lt;/a&gt; awk 详解。&lt;/h2&gt;
&lt;p&gt;awk ‘{pattern + action}’ {filenames}&lt;br&gt;
#cat /etc/passwd |awk -F ‘:’ ‘{print 1&amp;quot;\t&amp;quot;7}’ //-F 的意思是以’:&#39; 分隔 root /bin/bash&lt;br&gt;
daemon /bin/sh 搜索 /etc/passwd 有 root 关键字的所有行&lt;br&gt;
 #awk -F: ‘/root/’ /etc/passwd root❌0:0:root:/root:/bin/bash&lt;/p&gt;
&lt;h2 id=&#34;给命令绑定一个宏或者按键的时候应该怎么做呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#给命令绑定一个宏或者按键的时候应该怎么做呢&#34;&gt;#&lt;/a&gt; 给命令绑定一个宏或者按键的时候，应该怎么做呢？&lt;/h2&gt;
&lt;p&gt;可以使用 bind 命令，bind 可以很方便地在 shell 中实现宏或按键的绑定。&lt;br&gt;
在进行按键绑定的时候，我们需要先获取到绑定按键对应的字符序列。&lt;br&gt;
比如获取 F12 的字符序列获取方法如下：先按下 Ctrl+V, 然后按下 F12 . 我们就可以得到 F12 的字符序列 ^[[24~。&lt;br&gt;
接着使用 bind 进行绑定。&lt;br&gt;
[root@localhost ~]# bind ‘”\e[24~&amp;quot;:“date”’&lt;br&gt;
注意：相同的按键在不同的终端或终端模拟器下可能会产生不同的字符序列。&lt;br&gt;
【附】也可以使用 showkey -a 命令查看按键对应的字符序列。&lt;/p&gt;
&lt;h2 id=&#34;显示当前系统支持的所有命令的列表他需要怎么做&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#显示当前系统支持的所有命令的列表他需要怎么做&#34;&gt;#&lt;/a&gt; 显示当前系统支持的所有命令的列表，他需要怎么做？&lt;/h2&gt;
&lt;p&gt;使用命令 compgen ­-c，可以打印出所有支持的命令列表。&lt;br&gt;
[root@localhost ~]$ compgen -c&lt;/p&gt;
&lt;h2 id=&#34;打印出当前的目录栈你会建议他怎么做&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打印出当前的目录栈你会建议他怎么做&#34;&gt;#&lt;/a&gt; 打印出当前的目录栈，你会建议他怎么做？&lt;/h2&gt;
&lt;p&gt;使用 Linux 命令 dirs 可以将当前的目录栈打印出来。&lt;br&gt;
[root@localhost ~]# dirs&lt;br&gt;
/usr/share/X11&lt;br&gt;
【附】：目录栈通过 pushd popd 来操作。&lt;/p&gt;
&lt;h2 id=&#34;系统在多任务运行时不重启机器的条件下把所有正在运行的进程移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统在多任务运行时不重启机器的条件下把所有正在运行的进程移除&#34;&gt;#&lt;/a&gt; 系统在多任务运行时不重启机器的条件下，把所有正在运行的进程移除？&lt;/h2&gt;
&lt;p&gt;使用 linux 命令 ’disown -r ’可以将所有正在运行的进程移除。&lt;/p&gt;
&lt;h2 id=&#34;bash-shell-中的hash-命令有什么作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bash-shell-中的hash-命令有什么作用&#34;&gt;#&lt;/a&gt; bash shell 中的 hash 命令有什么作用？&lt;/h2&gt;
&lt;p&gt;linux 命令’hash’管理着一个内置的哈希表，记录了已执行过的命令的完整路径，用该命令可以打印出你所使用过的命令以及执行的次数。&lt;br&gt;
[root@localhost ~]# hash&lt;br&gt;
hits command&lt;br&gt;
2 /bin/ls&lt;br&gt;
2 /bin/su&lt;/p&gt;
&lt;h2 id=&#34;哪一个bash内置命令能够进行数学运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哪一个bash内置命令能够进行数学运算&#34;&gt;#&lt;/a&gt; 哪一个 bash 内置命令能够进行数学运算。&lt;/h2&gt;
&lt;p&gt;bash shell 的内置命令 let 可以进行整型数的数学运算。&lt;br&gt;
#! /bin/bash&lt;br&gt;
…&lt;br&gt;
…&lt;br&gt;
let c=a+b&lt;br&gt;
…&lt;br&gt;
…&lt;/p&gt;
&lt;h2 id=&#34;一页一页地查看一个大文件的内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一页一页地查看一个大文件的内容&#34;&gt;#&lt;/a&gt; 一页一页地查看一个大文件的内容&lt;/h2&gt;
&lt;p&gt;通过管道将命令”cat file_name.txt” 和 ’more’ 连接在一起可以实现这个需要.&lt;br&gt;
[root@localhost ~]# cat file_name.txt | more&lt;/p&gt;
&lt;h2 id=&#34;数据字典属于哪一个用户的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据字典属于哪一个用户的&#34;&gt;#&lt;/a&gt; 数据字典属于哪一个用户的？&lt;/h2&gt;
&lt;p&gt;数据字典是属于’SYS’用户的，用户‘SYS’ 和 ’SYSEM’是由系统默认自动创建的&lt;/p&gt;
&lt;h2 id=&#34;查看一个linux命令的概要与用法假设你在bin目录中偶然看到一个你从没见过的的命令怎样才能知道它的作用和用法呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看一个linux命令的概要与用法假设你在bin目录中偶然看到一个你从没见过的的命令怎样才能知道它的作用和用法呢&#34;&gt;#&lt;/a&gt; 查看一个 linux 命令的概要与用法？假设你在 /bin 目录中偶然看到一个你从没见过的的命令，怎样才能知道它的作用和用法呢？&lt;/h2&gt;
&lt;p&gt;使用命令 whatis 可以先出显示出这个命令的用法简要，比如，你可以使用 whatis zcat 去查看‘zcat’的介绍以及使用简要。&lt;br&gt;
[root@localhost ~]# whatis zcat&lt;br&gt;
zcat [gzip] (1) – compress or expand files&lt;/p&gt;
&lt;h2 id=&#34;查看自己文件系统的磁盘空间配额呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看自己文件系统的磁盘空间配额呢&#34;&gt;#&lt;/a&gt; 查看自己文件系统的磁盘空间配额呢？&lt;/h2&gt;
&lt;p&gt;使用命令 repquota 能够显示出一个文件系统的配额信息&lt;br&gt;
【附】只有 root 用户才能够查看其它用户的配额。&lt;/p&gt;
&lt;h2 id=&#34;root用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#root用户&#34;&gt;#&lt;/a&gt; root 用户&lt;/h2&gt;
&lt;p&gt;root 存在于 UNIX 系统（如 AIX、BSD 等）和类 UNIX 系统（如 Debian、Redhat、Ubuntu 等版本的 Linux 系统以及 Android 系统）中，超级用户一般命名为 root，相当于 Windows 系统中的 system 用户。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/01/20/SQL%20interview%20summary%20/</guid>
            <title>SQL interview summary</title>
            <link>http://example.com/2021/01/20/SQL%20interview%20summary%20/</link>
            <pubDate>Wed, 20 Jan 2021 15:50:35 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;一、第一、第二、第三范式之间的理解&lt;br&gt;
第一范式（1NF）无重复的列&lt;br&gt;
　　所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。简而言之，第一范式就是无重复的列。&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;p&gt;1NF 的定义为：符合 1NF 的关系中的每个属性都不可再分&lt;br&gt;
说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。&lt;/p&gt;
&lt;p&gt;第二范式（2NF）属性完全依赖于主键&lt;br&gt;
　　第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。例如员工信息表中加上了员工编号（emp_id）列，因为每个员工的员工编号是惟一的，因此每个员工可以被惟一区分。这个惟一属性列被称为主关键字或主键、主码。&lt;br&gt;
第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是属性完全依赖于主键。&lt;/p&gt;
&lt;p&gt;第三范式（3NF）&lt;br&gt;
　　满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在的员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性。 也就是说， 如果存在非主属性对于码的传递函数依赖，则不符合 3NF 的要求。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/01/17/Java%20interview%20summary/</guid>
            <title>Java interview summary</title>
            <link>http://example.com/2021/01/17/Java%20interview%20summary/</link>
            <pubDate>Sun, 17 Jan 2021 18:21:37 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;jre与jdk&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jre与jdk&#34;&gt;#&lt;/a&gt; JRE 与 JDK&lt;/h2&gt;
&lt;p&gt;JRE： Java Runtime Environment&lt;br&gt;
JDK：Java Development Kit&lt;br&gt;
JRE 是 java 运行时环境，包含了 java 虚拟机，java 基础类库。是使用 java 语言编写的程序运行所需要的软件环境，是提供给想运行 java 程序的用户使用的。&lt;br&gt;
JDK 是 java 开发工具包，&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;
&lt;p&gt;是程序员使用 java 语言编写 java 程序所需的开发工具包，是提供给程序员使用的。JDK 包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具：jconsole，jvisualvm 等工具软件，还包含了 java 程序编写所需的文档和 demo 例子程序。如果你需要运行 java 程序，只需安装 JRE 就可以了。如果你需要编写 java 程序，需要安装 JDK。&lt;/p&gt;
&lt;h2 id=&#34;形参和实参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#形参和实参&#34;&gt;#&lt;/a&gt; 形参和实参&lt;/h2&gt;
&lt;p&gt;形参：全称为 &amp;quot;形式参数&amp;quot; 是在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传如的参数.&lt;br&gt;
 实参：全称为 &amp;quot;实际参数&amp;quot; 是在调用时传递个该函数的参数.&lt;/p&gt;
&lt;h2 id=&#34;java四类八种基本数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java四类八种基本数据类型&#34;&gt;#&lt;/a&gt; java 四类八种基本数据类型&lt;/h2&gt;
&lt;p&gt;第一类：整型 byte short int long&lt;br&gt;
 第二类：浮点型 float double&lt;br&gt;
 第三类：逻辑型 boolean (它只有两个值可取 true false)&lt;br&gt;
 第四类：字符型 char&lt;br&gt;
byte (位)                     占用 1 字节&lt;br&gt;
 short (短整数)             占用 2 字节&lt;br&gt;
 int (整数)                    占用 4 字节&lt;br&gt;
 long (长整数)              占用 8 字节&lt;br&gt;
 float (单精度)              占用 4 字节&lt;br&gt;
 double (双精度)          占用 8 字节&lt;br&gt;
 char (字符)                 占用 2 字节&lt;br&gt;
 boolean (布尔值)        占用 1/8 字节&lt;/p&gt;
&lt;h2 id=&#34;java创建对象的四种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java创建对象的四种方式&#34;&gt;#&lt;/a&gt; java 创建对象的四种方式？&lt;/h2&gt;
&lt;p&gt;使用 new 创建对象、运用反射手段、调用对象的 clone () 方法、运用反序列化手段&lt;/p&gt;
&lt;h2 id=&#34;面向对象的特征有哪些方面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#面向对象的特征有哪些方面&#34;&gt;#&lt;/a&gt; 面向对象的特征有哪些方面？&lt;/h2&gt;
&lt;p&gt;①　封装&lt;br&gt;
最常见的是把属性私有化封装在一个类里面，只能通过方法去访问&lt;br&gt;
②　继承&lt;br&gt;
子类继承父类，从而继承了父类的方法和属性&lt;br&gt;
③　抽象&lt;br&gt;
比如一个英雄类，抽象出了 name,hp 这些属性，使得开发过程中更加易于理解&lt;br&gt;
④　多态&lt;br&gt;
多态分操作符的多态和类的多态。 类的多态指父类引用指向子类对象，并且有继承，有重写。&lt;/p&gt;
&lt;h2 id=&#34;重载和重写的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重载和重写的区别&#34;&gt;#&lt;/a&gt; 重载和重写的区别？&lt;/h2&gt;
&lt;p&gt;重载指的是在同一个类里面，方法名一样，但是参数不一样&lt;br&gt;
重写指的是子类继承了父类的某个方法后，重新又写了一遍&lt;/p&gt;
&lt;h2 id=&#34;final修饰类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#final修饰类&#34;&gt;#&lt;/a&gt; final 修饰类:&lt;/h2&gt;
&lt;p&gt;final 修饰类即表示此类已经是 “最后的、最终的” 含义。因此，用 final 修饰的类不能被继承，即不能拥有自己的子类。&lt;/p&gt;
&lt;h2 id=&#34;队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#队列&#34;&gt;#&lt;/a&gt; 队列&lt;/h2&gt;
&lt;p&gt;队列（queue）是一种采用先进先出 (FIFO) 策略的抽象数据结构，它的想法来自于生活中排队的策略。顾客在付款结账的时候，按照到来的先后顺序排队结账，先来的顾客先结账，后来的顾客后结账。&lt;/p&gt;
&lt;h2 id=&#34;栈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#栈&#34;&gt;#&lt;/a&gt; 栈&lt;/h2&gt;
&lt;p&gt;栈是一种操作受限的线性表只允许从一端插入和删除数据。栈有两种存储方式，即线性存储和链接存储（链表）。栈的一个最重要的特征就是栈的插入和删除只能在栈顶进行，所以每次删除的元素都是最后进栈的元素，故栈也被称为后进先出（LIFO）表。每个栈都有一个栈顶指针，它初始值为 - 1，且总是指向最后一个入栈的元素，栈有两种处理方式，即进栈（push）和出栈（pop），因为在进栈只需要移动一个变量存储空间，所以它的时间复杂度为 O (1)，但是对于出栈分两种情况，栈未满时，时间复杂度也为 O (1)，但是当栈满时，需要重新分配内存，并移动栈内所有数据，所以此时的时间复杂度为 O (n)。以下举例栈结构的两种实现方式，线性存储和链接存储。&lt;/p&gt;
&lt;h2 id=&#34;多继承与多态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多继承与多态&#34;&gt;#&lt;/a&gt; 多继承与多态&lt;/h2&gt;
&lt;p&gt;多继承即一个子类可以有多个父类，它继承了多个父类的特性。&lt;br&gt;
多继承可以看作是单继承的扩展。所谓多继承是指派生类具有多个基类，派生类与每个基类之间的关系仍可看作是一个单继承。&lt;br&gt;
多态允许将子类类型的指针赋值给父类类型的指针。&lt;/p&gt;
&lt;h2 id=&#34;虚函数与纯虚函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚函数与纯虚函数&#34;&gt;#&lt;/a&gt; 虚函数与纯虚函数&lt;/h2&gt;
&lt;p&gt;虚函数是指一个类中你希望重载的成员函数，当你用一个基类指针或引用指向一个继承类对象的时候，你调用一个虚函数，实际调用的是继承类的版本。&lt;br&gt;
有纯虚函数的类是抽象类，不能生成对象，只能派生。他派生的类的纯虚函数没有被改写，那么，它的派生类还是个抽象类。&lt;br&gt;
定义纯虚函数就是为了让基类不可实例化化，&lt;br&gt;
 因为实例化这样的抽象数据结构本身并没有意义.&lt;/p&gt;
&lt;h2 id=&#34;二叉树的常用性质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树的常用性质&#34;&gt;#&lt;/a&gt; 二叉树的常用性质&lt;/h2&gt;
&lt;h3 id=&#34;常用性质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用性质&#34;&gt;#&lt;/a&gt; 常用性质&lt;/h3&gt;
&lt;p&gt;&amp;lt;1&amp;gt;. 在二叉树的第 i 层上最多有 2^(i-1) 个节点 。（i&amp;gt;=1）&lt;br&gt;
&amp;lt;2&amp;gt;. 二叉树中如果深度为 k (有 k 层), 那么最多有 2^k-1 个节点。(k&amp;gt;=1）&lt;br&gt;
&amp;lt;3&amp;gt;. 若二叉树按照从上到下从左到右依次编号，则若某节点编号为 k，则其左右子树根节点编号分别为 2k 和 2k+1;&lt;br&gt;
&amp;lt;4&amp;gt;. 二叉树分类：满二叉树，完全二叉树&lt;br&gt;
满二叉树：高度为 h，由 2^h-1 个节点构成的二叉树称为满二叉树。&lt;/p&gt;
&lt;h3 id=&#34;遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#遍历&#34;&gt;#&lt;/a&gt; 遍历&lt;/h3&gt;
&lt;p&gt;先序遍历：按照根节点 -&amp;gt; 左子树 -&amp;gt; 右子树的顺序访问二叉树&lt;br&gt;
先序遍历：（1）访问根节点；（2）采用先序递归遍历左子树；（3）采用先序递归遍历右子树；&lt;br&gt;
中序遍历：按照左子树 -&amp;gt; 根节点 -&amp;gt; 右子树的顺序访问&lt;br&gt;
中序遍历：（1）采用中序遍历左子树；（2）访问根节点；（3）采用中序遍历右子树&lt;br&gt;
后序遍历：按照左子树 -&amp;gt; 右子树–&amp;gt; 根节点的顺序访问&lt;br&gt;
后序遍历：（1）采用后序递归遍历左子树；（2）采用后序递归遍历右子树；（3）访问根节点；&lt;/p&gt;
&lt;h2 id=&#34;希尔排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#希尔排序&#34;&gt;#&lt;/a&gt; 希尔排序：&lt;/h2&gt;
&lt;p&gt;间隔为增量跳跃取数据&lt;/p&gt;
&lt;h2 id=&#34;序列化和反序列化的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#序列化和反序列化的定义&#34;&gt;#&lt;/a&gt; 序列化和反序列化的定义：&lt;/h2&gt;
&lt;p&gt;(1) Java 序列化就是指把 Java 对象转换为字节序列的过程&lt;br&gt;
 Java 反序列化就是指把字节序列恢复为 Java 对象的过程。&lt;br&gt;
(2) 序列化最重要的作用：在传递和保存对象时。保证对象的完整性和可传递性。对象转换为有序字节流，以便在网络上传输或者保存在本地文件中。&lt;br&gt;
反序列化的最重要的作用：根据字节流中保存的对象状态及描述信息，通过反序列化重建对象。&lt;br&gt;
总结：核心作用就是对象状态的保存和重建。（整个过程核心点就是字节流中所保存的对象状态及描述信息）&lt;/p&gt;
&lt;h2 id=&#34;osi七层模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#osi七层模型&#34;&gt;#&lt;/a&gt; OSI 七层模型&lt;/h2&gt;
&lt;p&gt;物理层&lt;br&gt;
在 OSI 参考模型中，物理层（Physical Layer）是参考模型的最低层，也是 OSI 模型的第一层。&lt;br&gt;
物理层的主要功能是：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。&lt;br&gt;
数据链路层&lt;br&gt;
数据链路层（Data Link Layer）是 OSI 模型的第二层，负责建立和管理节点间的链路。该层的主要功能是：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。&lt;br&gt;
网络层&lt;br&gt;
网络层（Network Layer）是 OSI 模型的第三层，它是 OSI 参考模型中最复杂的一层，也是通信子网的最高一层。它在下两层的基础上向资源子网提供服务。其主要任务是：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。该层控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。&lt;br&gt;
传输层&lt;br&gt;
 OSI 下 3 层的主要任务是数据通信，上 3 层的任务是数据处理。而传输层（Transport Layer）是 OSI 模型的第 4 层。因此该层是通信子网和资源子网的接口和桥梁，起到承上启下的作用。&lt;br&gt;
该层的主要任务是：向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输。&lt;br&gt;
会话层&lt;br&gt;
会话层（Session Layer）是 OSI 模型的第 5 层，是用户应用程序和网络之间的接口，主要任务是：向两个实体的表示层提供建立和使用连接的方法。&lt;br&gt;
表示层&lt;br&gt;
表示层（Presentation Layer）是 OSI 模型的第六层，它对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层。其主要功能是 “处理用户信息的表示问题，如编码、数据格式转换和加密解密” 等。&lt;br&gt;
应用层&lt;br&gt;
应用层（Application Layer）是 OSI 参考模型的最高层，它是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。&lt;br&gt;
OSI7 层模型的小结&lt;br&gt;
在 7 层模型中，每一层都提供一个特殊的网络功能。从网络功能的角度观察：下面 4 层（物理层、数据链路层、网络层和传输层）主要提供数据传输和交换功能，即以节点到节点之间的通信为主；第 4 层作为上下两部分的桥梁，是整个网络体系结构中最关键的部分；而上 3 层（会话层、表示层和应用层）则以提供用户与应用程序之间的信息和数据处理功能为主。简言之，下 4 层主要完成通信子网的功能，上 3 层主要完成资源子网的功能。&lt;/p&gt;
&lt;h2 id=&#34;tcpip分层模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tcpip分层模型&#34;&gt;#&lt;/a&gt; TCP/IP 分层模型&lt;/h2&gt;
&lt;p&gt;第一层：网络接口层&lt;br&gt;
　　包括用于协作 IP 数据在已有网络介质上传输的协议。实际上 TCP/IP 标准并不定义与 ISO 数据链路层和物理层相对应的功能。相反，它定义像地址解析协议 (Address Resolution Protocol,ARP) 这样的协议，提供 TCP/IP 协议的数据结构和实际物理硬件之间的接口。&lt;br&gt;
　　第二层：网间层&lt;br&gt;
　　对应于 OSI 七层参考模型的网络层。本层包含 IP 协议、RIP 协议 (Routing Information Protocol，路由信息协议)，负责数据的包装、寻址和路由。同时还包含网间控制报文协议 (Internet Control Message Protocol,ICMP) 用来提供网络诊断信息。&lt;br&gt;
　　第三层：传输层&lt;br&gt;
　　对应于 OSI 七层参考模型的传输层，它提供两种端到端的通信服务。其中 TCP 协议 (Transmission Control Protocol) 提供可靠的数据流运输服务，UDP 协议 (Use Datagram Protocol) 提供不可靠的用户数据报服务。&lt;br&gt;
　　第四层：应用层&lt;br&gt;
　　对应于 OSI 七层参考模型的应用层和表达层。因特网的应用层协议包括 Finger、Whois、FTP (文件传输协议)、Gopher、HTTP (超文本传输协议)、Telent (远程终端协议)、SMTP (简单邮件传送协议)、IRC (因特网中继会话)、NNTP（网络新闻传输协议）等，这也是本书将要讨论的重点。&lt;/p&gt;
&lt;h2 id=&#34;arraylist和linkedlist的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arraylist和linkedlist的区别&#34;&gt;#&lt;/a&gt; ArrayList 和 LinkedList 的区别&lt;/h2&gt;
&lt;p&gt;ArrayList 是数组结构，所以定位很快，但是插入和删除很慢&lt;br&gt;
 LinkedList 是双向链表结构，所以插入和删除很快，但是定位很慢&lt;/p&gt;
&lt;h2 id=&#34;equals和的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#equals和的区别&#34;&gt;#&lt;/a&gt; equals 和 == 的区别？&lt;/h2&gt;
&lt;p&gt;== 是判断两个变量或实例是不是指向同一个内存空间，equals 是判断两个变量或实例所指向的内存空间的值是不是相同&lt;br&gt;
 == 是指对内存地址进行比较 ， equals () 是对字符串的内容进行比较&lt;br&gt;
 == 指引用是否相同， equals () 指的是值是否相同&lt;/p&gt;
&lt;h2 id=&#34;try-里有一个return语句那么紧跟在这个try后的finally-里的code会不会被执行什么时候被执行在return前还是后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#try-里有一个return语句那么紧跟在这个try后的finally-里的code会不会被执行什么时候被执行在return前还是后&#34;&gt;#&lt;/a&gt; try {} 里有一个 return 语句，那么紧跟在这个 try 后的 finally {} 里的 code 会不会被执行，什么时候被执行，在 return 前还是后？&lt;/h2&gt;
&lt;p&gt;try 里的 return 和 finally 里的 return 都会执行，但是当前方法只会采纳 finally 中 return 的值。无论 try、catch 块中执行怎样的代码，出现怎样的情况，异常处理的 finally 块总会被执行。&lt;/p&gt;
&lt;h2 id=&#34;for循环中的return-break-continue的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#for循环中的return-break-continue的区别&#34;&gt;#&lt;/a&gt; for 循环中的 return break continue 的区别？&lt;/h2&gt;
&lt;p&gt;执行 return 后，不仅结束了该循环，当前函数也结束了，后面的语句不再执行；break 会终止并跳出它所在的循环；continue 是跳出本次循环，进入下一次循环的入口处 执行下一次循环&lt;/p&gt;
&lt;h2 id=&#34;error和exception有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#error和exception有什么区别&#34;&gt;#&lt;/a&gt; Error 和 Exception 有什么区别？&lt;/h2&gt;
&lt;p&gt;Error 和 Exception 都实现了 Throwable 接口&lt;br&gt;
 Error 指的是 JVM 层面的错误，比如内存不足 OutOfMemoryError&lt;br&gt;
Exception 指的是代码逻辑的异常，比如下标越界 OutOfIndexException&lt;/p&gt;
&lt;h2 id=&#34;集合类都有哪些主要方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合类都有哪些主要方法&#34;&gt;#&lt;/a&gt; 集合类都有哪些？主要方法？&lt;/h2&gt;
&lt;p&gt;常见的集合：ArrayList,LinkedList,HashSet,HashMap,TreeSet 等等&lt;br&gt;
常见方法：size ()、add ()、remove ()&lt;br&gt;
 String 常用的方法：length ()、valueOf ()、split ()、substring ()&lt;/p&gt;
&lt;h2 id=&#34;多线程有几种实现方法都是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多线程有几种实现方法都是什么&#34;&gt;#&lt;/a&gt; 多线程有几种实现方法，都是什么？&lt;/h2&gt;
&lt;p&gt;通常来讲，Java 创建一个线程有三种方式&lt;br&gt;
①　继承一个 Thread 类&lt;br&gt;
②　实现 Runnable 接口&lt;br&gt;
③　匿名内部类&lt;/p&gt;
&lt;h2 id=&#34;list-set-map的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list-set-map的区别&#34;&gt;#&lt;/a&gt; List, Set, Map 的区别？&lt;/h2&gt;
&lt;p&gt;list 是最常用的 它其实就是一种可以自由改变长度的数组&lt;br&gt;
 set 和 list 基本的用法差不多 区别在于 set 里不能放相同的元素&lt;br&gt;
至于 map 这个和上边 2 个在用法上有很大差别 map 里储存的是键值对 可以根据键来值搜索值 键是唯一的 值可以重复… 学 Servlet 和 jsp 的时候 会有大量的 map 的应用&lt;/p&gt;
&lt;h2 id=&#34;和的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#和的区别&#34;&gt;#&lt;/a&gt; &amp;amp; 和 &amp;amp;&amp;amp; 的区别？&lt;/h2&gt;
&lt;p&gt;&amp;amp; 有两个作用，分别是 位与 和 逻辑与&lt;br&gt;
 &amp;amp;&amp;amp; 就是逻辑与&lt;br&gt;
作为逻辑与， &amp;amp; 和 &amp;amp;&amp;amp; 分别表示长路与和短路与&lt;br&gt;
长路与 两侧，都会被运算&lt;br&gt;
短路与 只要第一个是 false，第二个就不进行运算了&lt;/p&gt;
&lt;h2 id=&#34;五个常见到的runtime-exception&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五个常见到的runtime-exception&#34;&gt;#&lt;/a&gt; 五个常见到的 runtime exception。&lt;/h2&gt;
&lt;p&gt;NullPointerException 空指针异常&lt;br&gt;
 ArithmeticException 算术异常，比如除数为零&lt;br&gt;
 ClassCastException 类型转换异常&lt;br&gt;
 ConcurrentModificationException 同步修改异常，遍历一个集合的时候，删除集合的元素，就会抛出该异常&lt;br&gt;
 IndexOutOfBoundsException 数组下标越界异常&lt;br&gt;
 NegativeArraySizeException 为数组分配的空间是负数异常&lt;/p&gt;
&lt;h2 id=&#34;servlet的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#servlet的生命周期&#34;&gt;#&lt;/a&gt; servlet 的生命周期？&lt;/h2&gt;
&lt;p&gt;一个 Servlet 的生命周期由 实例化，初始化，提供服务，销毁，被回收 几个步骤组成&lt;/p&gt;
&lt;h2 id=&#34;ssm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ssm&#34;&gt;#&lt;/a&gt; SSM：&lt;/h2&gt;
&lt;p&gt;Spring+SpringMVC+Mybatis&lt;/p&gt;
&lt;h2 id=&#34;spring&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring&#34;&gt;#&lt;/a&gt; Spring&lt;/h2&gt;
&lt;h3 id=&#34;spring-在ssm中起什么作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-在ssm中起什么作用&#34;&gt;#&lt;/a&gt; Spring 在 ssm 中起什么作用？&lt;/h3&gt;
&lt;p&gt;Spring：轻量级框架&lt;br&gt;
作用：Bean 工厂，用来管理 Bean 的生命周期和框架集成。&lt;br&gt;
两大核心：&lt;br&gt;
①. IOC/DI (控制反转 / 依赖注入) ：把 dao 依赖注入到 service 层，service 层反转给 action 层，Spring 顶层容器为 BeanFactory。&lt;br&gt;
②. AOP：面向切面编程&lt;/p&gt;
&lt;h3 id=&#34;spring的事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring的事务&#34;&gt;#&lt;/a&gt; Spring 的事务？&lt;/h3&gt;
&lt;p&gt;编程式事务管理：编程方式管理事务，极大灵活性，难维护。&lt;br&gt;
声明式事务管理：可以将业务代码和事务管理分离，用注解和 xml 配置来管理事务。&lt;/p&gt;
&lt;h3 id=&#34;ioc-在项目中的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ioc-在项目中的作用&#34;&gt;#&lt;/a&gt; IOC 在项目中的作用？&lt;/h3&gt;
&lt;p&gt;作用：Ioc 解决对象之间的依赖问题，把所有 Bean 的依赖关系通过配置文件或注解关联起来，降低了耦合度。&lt;/p&gt;
&lt;h3 id=&#34;spring的配置文件中的内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring的配置文件中的内容&#34;&gt;#&lt;/a&gt; Spring 的配置文件中的内容？&lt;/h3&gt;
&lt;p&gt;开启事务注解驱动&lt;br&gt;
事务管理器&lt;br&gt;
开启注解功能，并配置扫描包&lt;br&gt;
配置数据库&lt;br&gt;
配置 SQL 会话工厂，别名，映射文件&lt;br&gt;
不用编写 Dao 层的实现类&lt;/p&gt;
&lt;h3 id=&#34;spring下的注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring下的注解&#34;&gt;#&lt;/a&gt; Spring 下的注解？&lt;/h3&gt;
&lt;p&gt;注册：@Controller @Service @Component&lt;br&gt;
 注入：@Autowired @Resource&lt;br&gt;
 请求地址：@RequestMapping&lt;br&gt;
 返回具体数据类型而非跳转：@ResponseBody&lt;/p&gt;
&lt;h3 id=&#34;spring-di-的三种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-di-的三种方式&#34;&gt;#&lt;/a&gt; Spring DI 的三种方式？&lt;/h3&gt;
&lt;p&gt;构造器注入：通过构造方法初始化&lt;br&gt;
&lt;constructor-arg index=&#34;0&#34; type=&#34;java.lang.String&#34; value=&#34;宝马&#34;&gt;&lt;/constructor-arg&gt;&lt;br&gt;
setter 方法注入：通过 setter 方法初始化&lt;br&gt;
&lt;property name=&#34;id&#34; value=&#34;1111&#34;&gt;&lt;/property&gt;&lt;br&gt;
接口注入&lt;/p&gt;
&lt;h3 id=&#34;spring主要使用了什么模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring主要使用了什么模式&#34;&gt;#&lt;/a&gt; Spring 主要使用了什么模式？&lt;/h3&gt;
&lt;p&gt;工厂模式：每个 Bean 的创建通过方法&lt;br&gt;
单例模式：默认的每个 Bean 的作用域都是单例&lt;br&gt;
代理模式：关于 Aop 的实现通过代理模式&lt;/p&gt;
&lt;h3 id=&#34;iocaop的实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iocaop的实现原理&#34;&gt;#&lt;/a&gt; IOC，AOP 的实现原理？&lt;/h3&gt;
&lt;p&gt;IOC：通过反射机制生成对象注入&lt;br&gt;
 AOP：动态代理&lt;/p&gt;
&lt;h3 id=&#34;什么是ioc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是ioc&#34;&gt;#&lt;/a&gt; . 什么是 IOC？&lt;/h3&gt;
&lt;p&gt;IOC： Inversion of control 反转控制。 比如以前创建一个对象，需要自己主动 new 一个对象，通过 IOC，对象的创建交由 Spring 框架 创建，开发人员直接使用已经创建好的对象。&lt;/p&gt;
&lt;h3 id=&#34;什么是di&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是di&#34;&gt;#&lt;/a&gt; 什么是 DI？&lt;/h3&gt;
&lt;p&gt;DI： Dependency Injection 依赖注入。 通过 IOC 创建对象的时候，可以注入字符串甚至其他对象。 比如 DAO 就会注入 session factory.&lt;br&gt;
 通常 IOC 和 DI 是紧密结合，一起使用的&lt;/p&gt;
&lt;h3 id=&#34;什么是aop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是aop&#34;&gt;#&lt;/a&gt; 什么是 AOP？&lt;/h3&gt;
&lt;p&gt;AOP: 面向切面编程。&lt;br&gt;
把功能划分为核心业务功能和其他的周边辅助功能，比如日志，性能统计，事务等等。 其他的周边辅助功能可以都看作切面功能。核心功能和切面功能分别独立开发，通过面向切面编程，可以有机的把核心业务功能和切面功能根据需求结合在一起。 比如增加操作可以和事务切面结合在一起，查询操作可以和性能统计切面结合在一起。&lt;br&gt;
在配置方面，要配置切面，切点，并且通过 aspect:config 把切面和切点结合起来&lt;/p&gt;
&lt;h2 id=&#34;springmvc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springmvc&#34;&gt;#&lt;/a&gt; SpringMvc&lt;/h2&gt;
&lt;h3 id=&#34;springmvc-的控制器是不是单例模式如果是有什么问题怎么解决&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springmvc-的控制器是不是单例模式如果是有什么问题怎么解决&#34;&gt;#&lt;/a&gt; SpringMvc 的控制器是不是单例模式，如果是，有什么问题，怎么解决？&lt;/h3&gt;
&lt;p&gt;问题：单例模式，在多线程访问时有线程安全问题&lt;br&gt;
解决方法：不要用同步，在控制器里面不能写字段&lt;/p&gt;
&lt;h3 id=&#34;springmvc-中控制器的注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springmvc-中控制器的注解&#34;&gt;#&lt;/a&gt; SpringMvc 中控制器的注解？&lt;/h3&gt;
&lt;p&gt;@Controller：该注解表明该类扮演控制器的角色&lt;/p&gt;
&lt;h3 id=&#34;requestmapping-注解用在类上的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#requestmapping-注解用在类上的作用&#34;&gt;#&lt;/a&gt; @RequestMapping 注解用在类上的作用？&lt;/h3&gt;
&lt;p&gt;作用：用来映射一个 URL 到一个类或者一个特定的处理方法上&lt;/p&gt;
&lt;h3 id=&#34;前台多个参数这些参数都是一个对象快速得到对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前台多个参数这些参数都是一个对象快速得到对象&#34;&gt;#&lt;/a&gt; 前台多个参数，这些参数都是一个对象，快速得到对象？&lt;/h3&gt;
&lt;p&gt;方法：直接在方法中声明这个对象，SpringMvc 就自动把属性赋值到这个对象里面&lt;/p&gt;
&lt;h3 id=&#34;springmvc中函数的返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springmvc中函数的返回值&#34;&gt;#&lt;/a&gt; SpringMvc 中函数的返回值？&lt;/h3&gt;
&lt;p&gt;String，ModelAndView，List，Set 等&lt;br&gt;
一般 String，Ajax 请求，返回一个 List 集合&lt;/p&gt;
&lt;h3 id=&#34;springmvc中的转发和重定向&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springmvc中的转发和重定向&#34;&gt;#&lt;/a&gt; SpringMvc 中的转发和重定向？&lt;/h3&gt;
&lt;p&gt;转发： return：“hello”&lt;br&gt;
 重定向 ：return：“redirect:hello.jsp”&lt;br&gt;
 通过 JackSon 框架把 java 里面对象直接转换成 js 可识别的 json 对象，具体步骤如下：&lt;br&gt;
加入 JackSon.jar&lt;br&gt;
 在配置文件中配置 json 的映射&lt;br&gt;
在接受 Ajax 方法里面直接返回 Object，list 等，方法前面需要加上注解 @ResponseBody&lt;/p&gt;
&lt;h3 id=&#34;springmvc的工作流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springmvc的工作流程&#34;&gt;#&lt;/a&gt; SpringMvc 的工作流程&lt;/h3&gt;
&lt;p&gt;浏览器→发送请求→前端控制器（DispatcherServlet）→请求→处理器映射器 (HandlerMapping)→返回处理器执行链→前端控制器（DispatcherServlet）→发送处理器执行链→处理器适配器 (HandlerAdatper)→执行→处理器 (Handler)→ModelAndView→处理器适配器 (HandlerAdatper)→modelandview→前端控制器（DispatcherServlet）→modelandview→视图解析器→view→前端控制器（DispatcherServlet）→model→视图 (view)→前端控制器（DispatcherServlet）→响应→浏览器&lt;/p&gt;
&lt;h3 id=&#34;struts2-和-springmvc的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#struts2-和-springmvc的区别&#34;&gt;#&lt;/a&gt; Struts2 和 SpringMvc 的区别？&lt;/h3&gt;
&lt;p&gt;入口不同：&lt;br&gt;
Struts2：filter 过滤器&lt;br&gt;
 SpringMvc：一个 Servlet 即前端控制器&lt;/p&gt;
&lt;p&gt;开发方式不同：&lt;br&gt;
Struts2：基于类开发，传递参数通过类的属性，只能设置为多例&lt;br&gt;
 SpringMvc：基于方法开发 (一个 url 对应一个方法)，请求参数传递到方法形参，可以为单例也可以为多例 (建议单例)&lt;/p&gt;
&lt;p&gt;请求方式不同：&lt;br&gt;
Struts2：值栈村塾请求和响应的数据，通过 OGNL 存取数据&lt;br&gt;
 SpringMvc：通过参数解析器将 request 请求内容解析，给方法形参赋值，将数据和视图封装成 ModelAndView 对象，最后又将 ModelAndView 中的模型数据通过 request 域传输到页面，jsp 视图解析器默认使用的是 jstl。&lt;/p&gt;
&lt;h2 id=&#34;mybatis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis&#34;&gt;#&lt;/a&gt; Mybatis&lt;/h2&gt;
&lt;h3 id=&#34;ibatis和mybatis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ibatis和mybatis&#34;&gt;#&lt;/a&gt; Ibatis 和 Mybatis？&lt;/h3&gt;
&lt;p&gt;Ibatis：2010 年，apache 的 Ibatis 框架停止更新，并移交给了 google 团队，同时更名为 MyBatis。从 2010 年后 Ibatis 在没更新过，彻底变成了一个孤儿框架。一个没人维护的框架注定被 mybatis 拍在沙滩上。&lt;br&gt;
Mybatis：Ibatis 的升级版本。&lt;/p&gt;
&lt;h3 id=&#34;什么是mybatis的接口绑定有什么好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是mybatis的接口绑定有什么好处&#34;&gt;#&lt;/a&gt; 什么是 Mybatis 的接口绑定，有什么好处？&lt;/h3&gt;
&lt;p&gt;Mybatis 实现了 DAO 接口与 xml 映射文件的绑定，自动为我们生成接口的具体实现，使用起来变得更加省事和方便。&lt;/p&gt;
&lt;h3 id=&#34;什么情况用注解什么情况用xml绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么情况用注解什么情况用xml绑定&#34;&gt;#&lt;/a&gt; 什么情况用注解，什么情况用 xml 绑定？&lt;/h3&gt;
&lt;p&gt;注解使用情况：Sql 语句简单时&lt;br&gt;
 xml 绑定使用情况：xml 绑定 (@RequestMap 用来绑定 xml 文件)&lt;/p&gt;
&lt;h3 id=&#34;mybatis在核心处理类叫什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis在核心处理类叫什么&#34;&gt;#&lt;/a&gt; Mybatis 在核心处理类叫什么？&lt;/h3&gt;
&lt;p&gt;SqlSession&lt;/p&gt;
&lt;h3 id=&#34;查询表名和返回实体bean对象不一致如何处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询表名和返回实体bean对象不一致如何处理&#34;&gt;#&lt;/a&gt; 查询表名和返回实体 Bean 对象不一致，如何处理？&lt;/h3&gt;
&lt;p&gt;映射键值对即可&lt;br&gt;
&lt;result column=&#34;title&#34; property=&#34;title&#34; javaType=&#34;java.lang.String&#34;/&gt;&lt;br&gt;
column：数据库中表的列名&lt;br&gt;
 property：实体 Bean 中的属性名&lt;/p&gt;
&lt;h3 id=&#34;mybatis的好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis的好处&#34;&gt;#&lt;/a&gt; Mybatis 的好处？&lt;/h3&gt;
&lt;p&gt;把 Sql 语句从 Java 中独立出来。&lt;br&gt;
封装了底层的 JDBC，API 的调用，并且能够将结果集自动转换成 JavaBean 对象，简化了 Java 数据库编程的重复工作。&lt;br&gt;
自己编写 Sql 语句，更加的灵活。&lt;br&gt;
入参无需用对象封装（或者 map 封装）, 使用 @Param 注解&lt;/p&gt;
&lt;h3 id=&#34;mybatis配置一对多&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis配置一对多&#34;&gt;#&lt;/a&gt; Mybatis 配置一对多？&lt;/h3&gt;
&lt;collection property=&#34;topicComment&#34; column=&#34;id&#34; ofType=&#34;com.tmf.bbs.pojo.Comment&#34; select=&#34;selectComment&#34; /&gt;
property：属性名
column：共同列
ofType：集合中元素的类型
select：要连接的查询
&lt;h3 id=&#34;mybatis配置一对一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis配置一对一&#34;&gt;#&lt;/a&gt; Mybatis 配置一对一？&lt;/h3&gt;
&lt;association property=&#34;topicType&#34; select=&#34;selectType&#34; column=&#34;topics_type_id&#34; javaType=&#34;com.tmf.bbs.pojo.Type&#34;/&gt;
property：属性名
select：要连接的查询
column：共同列
javaType：集合中元素的类型
&lt;h3 id=&#34;和-的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#和-的区别&#34;&gt;#&lt;/a&gt; ${} 和 #{} 的区别？&lt;/h3&gt;
&lt;p&gt;${}： 简 单 字 符 串 替 换 ， 把 {}：简单字符串替换，把：简单字符串替换，把 {} 直接替换成变量的值，不做任何转换，这种是取值以后再去编译 SQL 语句。&lt;br&gt;
#{}：预编译处理，sql 中的 #{} 替换成？，补全预编译语句，有效的防止 Sql 语句注入，这种取值是编译好 SQL 语句再取值。&lt;br&gt;
总结：一般用 #{} 来进行列的代替&lt;/p&gt;
&lt;h3 id=&#34;获取上一次自动生成的主键值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取上一次自动生成的主键值&#34;&gt;#&lt;/a&gt; 获取上一次自动生成的主键值？&lt;/h3&gt;
&lt;p&gt;select last _insert_id()&lt;/p&gt;
&lt;h3 id=&#34;mybatis如何分页分页原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis如何分页分页原理&#34;&gt;#&lt;/a&gt; Mybatis 如何分页，分页原理？&lt;/h3&gt;
&lt;p&gt;RowBounds 对象分页&lt;br&gt;
在 Sql 内直接书写，带有物理分页&lt;/p&gt;
&lt;h3 id=&#34;mybatis工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis工作原理&#34;&gt;#&lt;/a&gt; Mybatis 工作原理？&lt;/h3&gt;
&lt;p&gt;通过 SqlSessionFactoryBuilder 从 mybatis-config.xml 配置文件中构建出 SqlSessionFactory。&lt;br&gt;
SqlSessionFactory 开启一个 SqlSession，通过 SqlSession 实例获得 Mapper 对象并且运行 Mapper 映射的 Sql 语句。&lt;br&gt;
完成数据库的 CRUD 操作和事务提交，关闭 SqlSession。&lt;/p&gt;
&lt;h2 id=&#34;状态和转换详解七态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#状态和转换详解七态&#34;&gt;#&lt;/a&gt; 状态和转换详解 (七态)&lt;/h2&gt;
&lt;p&gt;操作系统之进程的状态和转换详解 (七态)&lt;/p&gt;
&lt;h3 id=&#34;三态模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三态模型&#34;&gt;#&lt;/a&gt; 三态模型&lt;/h3&gt;
&lt;p&gt;1. 运行态 (running): 占有处理器正在运行&lt;br&gt;
 2. 就绪态 (ready): 具备运行条件，等待系统分配处理器以便运行&lt;br&gt;
 3. 等待态 (blocked): 不具备运行条件，正在等待某个事件的完成&lt;br&gt;
运行态 —→等待态：等待使用资源；如等待外设传输；等待人工干预。&lt;br&gt;
等待态 —→就绪态：资源得到满足；如外设传输结束；人工干预完成。&lt;br&gt;
运行态 —→就绪态：运行时间片到；出现有更高优先权进程。&lt;br&gt;
就绪态 —→运行态：CPU 空闲时选择一个就绪进程。&lt;/p&gt;
&lt;h3 id=&#34;五态模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五态模型&#34;&gt;#&lt;/a&gt; 五态模型&lt;/h3&gt;
&lt;p&gt;建态（new）和终止态（exit ）&lt;br&gt;
NULL—→新建态：执行一个程序，创建一个子进程。&lt;br&gt;
新建态 —→就绪态：当操作系统完成了进程创建的必要操作，并且当前系统的性能和虚拟内存的容量均允许。&lt;br&gt;
运行态 —→终止态：当一个进程到达了自然结束点，或是出现了无法克服的错误，或是被操作系统所终结，或是被其他有终止权的进程所终结。&lt;br&gt;
终止态 —→NULL：完成善后操作。&lt;br&gt;
就绪态 —→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。&lt;br&gt;
等待态 —→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。&lt;/p&gt;
&lt;h3 id=&#34;七态模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七态模型&#34;&gt;#&lt;/a&gt; 七态模型&lt;/h3&gt;
&lt;p&gt;挂起就绪态（ready,suspend）&lt;br&gt;
挂起就绪态表明了进程具备运行条件但目前在二级存储器中，只有当它被对换到主存才能被调度执行&lt;br&gt;
挂起等待态（blocked,suspend）挂起等待态则表明了进程正在等待某一个事件且在二级存储器中。&lt;br&gt;
等待态 —→挂起等待态：如果当前不存在就绪进程，那么至少有一个等待态进程将被对换出去成为挂起等待态；操作系统根据当前资源状况和性能要求，可以决定把等待态进程对换出去成为挂起等待态。&lt;br&gt;
挂起等待态 —→挂起就绪态：引起进程等待的事件发生之后，相应的挂起等待态进程将转换为挂起就绪态。&lt;br&gt;
挂起就绪态 —→就绪态：当内存中没有就绪态进程，或者挂起就绪态进程具有比就绪态进程更高的优先级，系统将把挂起就绪态进程转换成就绪态。&lt;br&gt;
就绪态 —→挂起就绪态：操作系统根据当前资源状况和性能要求，也可以决定把就绪态进程对换出去成为挂起就绪态。&lt;br&gt;
挂起等待态 —→等待态：当一个进程等待一个事件时，原则上不需要把它调入内存。但是在下面一种情况下，这一状态变化是可能的。当一个进程退出后，主存已经有了一大块自由空间，而某个挂起等待态进程具有较高的优先级并且操作系统已经得知导致它阻塞的事件即将结束，此时便发生了这一状态变化。&lt;br&gt;
运行态 —→挂起就绪态：当一个具有较高优先级的挂起等待态进程的等待事件结束后，它需要抢占 CPU，，而此时主存空间不够，从而可能导致正在运行的进程转化为挂起就绪态。另外处于运行态的进程也可以自己挂起自己。&lt;br&gt;
新建态 —→挂起就绪态：考虑到系统当前资源状况和性能要求，可以决定新建的进程将被对换出去成为挂起就绪态。&lt;/p&gt;
&lt;h2 id=&#34;进程的挂起&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程的挂起&#34;&gt;#&lt;/a&gt; 进程的挂起&lt;/h2&gt;
&lt;p&gt;到目前为止，我们或多或少总是假设所有的进程都在内存中。事实上，可能出现这样一些情况，例如由于进程的不断创建，系统的资源已经不能满足进程运行的要求，这个时候就必须把某些进程挂起（suspend），对换到磁盘镜像区中，暂时不参与进程调度，起到平滑系统操作负荷的目的。&lt;/p&gt;
&lt;h3 id=&#34;引起进程挂起的原因是多样的主要有&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引起进程挂起的原因是多样的主要有&#34;&gt;#&lt;/a&gt; 引起进程挂起的原因是多样的，主要有：&lt;/h3&gt;
&lt;p&gt;1. 系统中的进程均处于等待状态，处理器空闲，此时需要把一些阻塞进程对换出去，以腾出足够的内存装入就绪进程运行。&lt;br&gt;
2. 进程竞争资源，导致系统资源不足，负荷过重，此时需要挂起部分进程以调整系统负荷，保证系统的实时性或让系统正常运行。&lt;br&gt;
3. 把一些定期执行的进程（如审计程序、监控程序、记账程序）对换出去，以减轻系统负荷。&lt;br&gt;
4. 用户要求挂起自己的进程，以便根据中间执行情况和中间结果进行某些调试、检查和改正。&lt;br&gt;
5. 父进程要求挂起自己的后代进程，以进行某些检查和改正。&lt;br&gt;
6. 操作系统需要挂起某些进程，检查运行中资源使用情况，以改善系统性能；或当系统出现故障或某些功能受到破坏时，需要挂起某些进程以排除故障。&lt;/p&gt;
&lt;h3 id=&#34;一个挂起进程具有如下特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一个挂起进程具有如下特征&#34;&gt;#&lt;/a&gt; 一个挂起进程具有如下特征：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;该进程不能立即被执行。&lt;/li&gt;
&lt;li&gt;挂起进程可能会等待一个事件，但所等待的事件是独立于挂起条件的，事件结束并不能导致进程具备执行条件。&lt;/li&gt;
&lt;li&gt;进程进入挂起状态是由于操作系统、父进程或进程本身阻止它的运行。&lt;/li&gt;
&lt;li&gt;结束进程挂起状态的命令只能通过操作系统或父进程发出。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/01/08/hello-world/</guid>
            <title>Hello World</title>
            <link>http://example.com/2021/01/08/hello-world/</link>
            <pubDate>Fri, 08 Jan 2021 21:46:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
